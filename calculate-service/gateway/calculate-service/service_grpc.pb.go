// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: calculate-service/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CampaignService_CreateCampaignTypeConfig_FullMethodName = "/campaign.CampaignService/CreateCampaignTypeConfig"
	CampaignService_GetCampaignTypeConfig_FullMethodName    = "/campaign.CampaignService/GetCampaignTypeConfig"
	CampaignService_ListCampaignTypeConfigs_FullMethodName  = "/campaign.CampaignService/ListCampaignTypeConfigs"
	CampaignService_UpdateCampaignTypeConfig_FullMethodName = "/campaign.CampaignService/UpdateCampaignTypeConfig"
	CampaignService_DeleteCampaignTypeConfig_FullMethodName = "/campaign.CampaignService/DeleteCampaignTypeConfig"
	CampaignService_CreateCampaignConfig_FullMethodName     = "/campaign.CampaignService/CreateCampaignConfig"
	CampaignService_GetCampaignConfig_FullMethodName        = "/campaign.CampaignService/GetCampaignConfig"
	CampaignService_ListCampaignConfigs_FullMethodName      = "/campaign.CampaignService/ListCampaignConfigs"
	CampaignService_UpdateCampaignConfig_FullMethodName     = "/campaign.CampaignService/UpdateCampaignConfig"
	CampaignService_DeleteCampaignConfig_FullMethodName     = "/campaign.CampaignService/DeleteCampaignConfig"
	CampaignService_CreateUserCampaignConfig_FullMethodName = "/campaign.CampaignService/CreateUserCampaignConfig"
	CampaignService_GetUserCampaignConfig_FullMethodName    = "/campaign.CampaignService/GetUserCampaignConfig"
	CampaignService_ListUserCampaignConfigs_FullMethodName  = "/campaign.CampaignService/ListUserCampaignConfigs"
	CampaignService_UpdateUserCampaignConfig_FullMethodName = "/campaign.CampaignService/UpdateUserCampaignConfig"
	CampaignService_DeleteUserCampaignConfig_FullMethodName = "/campaign.CampaignService/DeleteUserCampaignConfig"
)

// CampaignServiceClient is the client API for CampaignService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampaignServiceClient interface {
	// Campaign Type Config operations
	CreateCampaignTypeConfig(ctx context.Context, in *CreateCampaignTypeConfigRequest, opts ...grpc.CallOption) (*CampaignTypeConfigResponse, error)
	GetCampaignTypeConfig(ctx context.Context, in *GetCampaignTypeConfigRequest, opts ...grpc.CallOption) (*CampaignTypeConfigResponse, error)
	ListCampaignTypeConfigs(ctx context.Context, in *ListCampaignTypeConfigsRequest, opts ...grpc.CallOption) (*ListCampaignTypeConfigsResponse, error)
	UpdateCampaignTypeConfig(ctx context.Context, in *UpdateCampaignTypeConfigRequest, opts ...grpc.CallOption) (*CampaignTypeConfigResponse, error)
	DeleteCampaignTypeConfig(ctx context.Context, in *DeleteCampaignTypeConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Campaign Config operations
	CreateCampaignConfig(ctx context.Context, in *CreateCampaignConfigRequest, opts ...grpc.CallOption) (*CampaignConfigResponse, error)
	GetCampaignConfig(ctx context.Context, in *GetCampaignConfigRequest, opts ...grpc.CallOption) (*CampaignConfigResponse, error)
	ListCampaignConfigs(ctx context.Context, in *ListCampaignConfigsRequest, opts ...grpc.CallOption) (*ListCampaignConfigsResponse, error)
	UpdateCampaignConfig(ctx context.Context, in *UpdateCampaignConfigRequest, opts ...grpc.CallOption) (*CampaignConfigResponse, error)
	DeleteCampaignConfig(ctx context.Context, in *DeleteCampaignConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// User Campaign Config operations
	CreateUserCampaignConfig(ctx context.Context, in *CreateUserCampaignConfigRequest, opts ...grpc.CallOption) (*UserCampaignConfigResponse, error)
	GetUserCampaignConfig(ctx context.Context, in *GetUserCampaignConfigRequest, opts ...grpc.CallOption) (*UserCampaignConfigResponse, error)
	ListUserCampaignConfigs(ctx context.Context, in *ListUserCampaignConfigsRequest, opts ...grpc.CallOption) (*ListUserCampaignConfigsResponse, error)
	UpdateUserCampaignConfig(ctx context.Context, in *UpdateUserCampaignConfigRequest, opts ...grpc.CallOption) (*UserCampaignConfigResponse, error)
	DeleteUserCampaignConfig(ctx context.Context, in *DeleteUserCampaignConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type campaignServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampaignServiceClient(cc grpc.ClientConnInterface) CampaignServiceClient {
	return &campaignServiceClient{cc}
}

func (c *campaignServiceClient) CreateCampaignTypeConfig(ctx context.Context, in *CreateCampaignTypeConfigRequest, opts ...grpc.CallOption) (*CampaignTypeConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CampaignTypeConfigResponse)
	err := c.cc.Invoke(ctx, CampaignService_CreateCampaignTypeConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) GetCampaignTypeConfig(ctx context.Context, in *GetCampaignTypeConfigRequest, opts ...grpc.CallOption) (*CampaignTypeConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CampaignTypeConfigResponse)
	err := c.cc.Invoke(ctx, CampaignService_GetCampaignTypeConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ListCampaignTypeConfigs(ctx context.Context, in *ListCampaignTypeConfigsRequest, opts ...grpc.CallOption) (*ListCampaignTypeConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCampaignTypeConfigsResponse)
	err := c.cc.Invoke(ctx, CampaignService_ListCampaignTypeConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) UpdateCampaignTypeConfig(ctx context.Context, in *UpdateCampaignTypeConfigRequest, opts ...grpc.CallOption) (*CampaignTypeConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CampaignTypeConfigResponse)
	err := c.cc.Invoke(ctx, CampaignService_UpdateCampaignTypeConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) DeleteCampaignTypeConfig(ctx context.Context, in *DeleteCampaignTypeConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CampaignService_DeleteCampaignTypeConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) CreateCampaignConfig(ctx context.Context, in *CreateCampaignConfigRequest, opts ...grpc.CallOption) (*CampaignConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CampaignConfigResponse)
	err := c.cc.Invoke(ctx, CampaignService_CreateCampaignConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) GetCampaignConfig(ctx context.Context, in *GetCampaignConfigRequest, opts ...grpc.CallOption) (*CampaignConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CampaignConfigResponse)
	err := c.cc.Invoke(ctx, CampaignService_GetCampaignConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ListCampaignConfigs(ctx context.Context, in *ListCampaignConfigsRequest, opts ...grpc.CallOption) (*ListCampaignConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCampaignConfigsResponse)
	err := c.cc.Invoke(ctx, CampaignService_ListCampaignConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) UpdateCampaignConfig(ctx context.Context, in *UpdateCampaignConfigRequest, opts ...grpc.CallOption) (*CampaignConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CampaignConfigResponse)
	err := c.cc.Invoke(ctx, CampaignService_UpdateCampaignConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) DeleteCampaignConfig(ctx context.Context, in *DeleteCampaignConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CampaignService_DeleteCampaignConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) CreateUserCampaignConfig(ctx context.Context, in *CreateUserCampaignConfigRequest, opts ...grpc.CallOption) (*UserCampaignConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCampaignConfigResponse)
	err := c.cc.Invoke(ctx, CampaignService_CreateUserCampaignConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) GetUserCampaignConfig(ctx context.Context, in *GetUserCampaignConfigRequest, opts ...grpc.CallOption) (*UserCampaignConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCampaignConfigResponse)
	err := c.cc.Invoke(ctx, CampaignService_GetUserCampaignConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) ListUserCampaignConfigs(ctx context.Context, in *ListUserCampaignConfigsRequest, opts ...grpc.CallOption) (*ListUserCampaignConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserCampaignConfigsResponse)
	err := c.cc.Invoke(ctx, CampaignService_ListUserCampaignConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) UpdateUserCampaignConfig(ctx context.Context, in *UpdateUserCampaignConfigRequest, opts ...grpc.CallOption) (*UserCampaignConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCampaignConfigResponse)
	err := c.cc.Invoke(ctx, CampaignService_UpdateUserCampaignConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignServiceClient) DeleteUserCampaignConfig(ctx context.Context, in *DeleteUserCampaignConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CampaignService_DeleteUserCampaignConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampaignServiceServer is the server API for CampaignService service.
// All implementations must embed UnimplementedCampaignServiceServer
// for forward compatibility.
type CampaignServiceServer interface {
	// Campaign Type Config operations
	CreateCampaignTypeConfig(context.Context, *CreateCampaignTypeConfigRequest) (*CampaignTypeConfigResponse, error)
	GetCampaignTypeConfig(context.Context, *GetCampaignTypeConfigRequest) (*CampaignTypeConfigResponse, error)
	ListCampaignTypeConfigs(context.Context, *ListCampaignTypeConfigsRequest) (*ListCampaignTypeConfigsResponse, error)
	UpdateCampaignTypeConfig(context.Context, *UpdateCampaignTypeConfigRequest) (*CampaignTypeConfigResponse, error)
	DeleteCampaignTypeConfig(context.Context, *DeleteCampaignTypeConfigRequest) (*emptypb.Empty, error)
	// Campaign Config operations
	CreateCampaignConfig(context.Context, *CreateCampaignConfigRequest) (*CampaignConfigResponse, error)
	GetCampaignConfig(context.Context, *GetCampaignConfigRequest) (*CampaignConfigResponse, error)
	ListCampaignConfigs(context.Context, *ListCampaignConfigsRequest) (*ListCampaignConfigsResponse, error)
	UpdateCampaignConfig(context.Context, *UpdateCampaignConfigRequest) (*CampaignConfigResponse, error)
	DeleteCampaignConfig(context.Context, *DeleteCampaignConfigRequest) (*emptypb.Empty, error)
	// User Campaign Config operations
	CreateUserCampaignConfig(context.Context, *CreateUserCampaignConfigRequest) (*UserCampaignConfigResponse, error)
	GetUserCampaignConfig(context.Context, *GetUserCampaignConfigRequest) (*UserCampaignConfigResponse, error)
	ListUserCampaignConfigs(context.Context, *ListUserCampaignConfigsRequest) (*ListUserCampaignConfigsResponse, error)
	UpdateUserCampaignConfig(context.Context, *UpdateUserCampaignConfigRequest) (*UserCampaignConfigResponse, error)
	DeleteUserCampaignConfig(context.Context, *DeleteUserCampaignConfigRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCampaignServiceServer()
}

// UnimplementedCampaignServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCampaignServiceServer struct{}

func (UnimplementedCampaignServiceServer) CreateCampaignTypeConfig(context.Context, *CreateCampaignTypeConfigRequest) (*CampaignTypeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaignTypeConfig not implemented")
}
func (UnimplementedCampaignServiceServer) GetCampaignTypeConfig(context.Context, *GetCampaignTypeConfigRequest) (*CampaignTypeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignTypeConfig not implemented")
}
func (UnimplementedCampaignServiceServer) ListCampaignTypeConfigs(context.Context, *ListCampaignTypeConfigsRequest) (*ListCampaignTypeConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaignTypeConfigs not implemented")
}
func (UnimplementedCampaignServiceServer) UpdateCampaignTypeConfig(context.Context, *UpdateCampaignTypeConfigRequest) (*CampaignTypeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaignTypeConfig not implemented")
}
func (UnimplementedCampaignServiceServer) DeleteCampaignTypeConfig(context.Context, *DeleteCampaignTypeConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaignTypeConfig not implemented")
}
func (UnimplementedCampaignServiceServer) CreateCampaignConfig(context.Context, *CreateCampaignConfigRequest) (*CampaignConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaignConfig not implemented")
}
func (UnimplementedCampaignServiceServer) GetCampaignConfig(context.Context, *GetCampaignConfigRequest) (*CampaignConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignConfig not implemented")
}
func (UnimplementedCampaignServiceServer) ListCampaignConfigs(context.Context, *ListCampaignConfigsRequest) (*ListCampaignConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaignConfigs not implemented")
}
func (UnimplementedCampaignServiceServer) UpdateCampaignConfig(context.Context, *UpdateCampaignConfigRequest) (*CampaignConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaignConfig not implemented")
}
func (UnimplementedCampaignServiceServer) DeleteCampaignConfig(context.Context, *DeleteCampaignConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaignConfig not implemented")
}
func (UnimplementedCampaignServiceServer) CreateUserCampaignConfig(context.Context, *CreateUserCampaignConfigRequest) (*UserCampaignConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserCampaignConfig not implemented")
}
func (UnimplementedCampaignServiceServer) GetUserCampaignConfig(context.Context, *GetUserCampaignConfigRequest) (*UserCampaignConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCampaignConfig not implemented")
}
func (UnimplementedCampaignServiceServer) ListUserCampaignConfigs(context.Context, *ListUserCampaignConfigsRequest) (*ListUserCampaignConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserCampaignConfigs not implemented")
}
func (UnimplementedCampaignServiceServer) UpdateUserCampaignConfig(context.Context, *UpdateUserCampaignConfigRequest) (*UserCampaignConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCampaignConfig not implemented")
}
func (UnimplementedCampaignServiceServer) DeleteUserCampaignConfig(context.Context, *DeleteUserCampaignConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserCampaignConfig not implemented")
}
func (UnimplementedCampaignServiceServer) mustEmbedUnimplementedCampaignServiceServer() {}
func (UnimplementedCampaignServiceServer) testEmbeddedByValue()                         {}

// UnsafeCampaignServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampaignServiceServer will
// result in compilation errors.
type UnsafeCampaignServiceServer interface {
	mustEmbedUnimplementedCampaignServiceServer()
}

func RegisterCampaignServiceServer(s grpc.ServiceRegistrar, srv CampaignServiceServer) {
	// If the following call pancis, it indicates UnimplementedCampaignServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CampaignService_ServiceDesc, srv)
}

func _CampaignService_CreateCampaignTypeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignTypeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).CreateCampaignTypeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_CreateCampaignTypeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).CreateCampaignTypeConfig(ctx, req.(*CreateCampaignTypeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_GetCampaignTypeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignTypeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).GetCampaignTypeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_GetCampaignTypeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).GetCampaignTypeConfig(ctx, req.(*GetCampaignTypeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ListCampaignTypeConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCampaignTypeConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ListCampaignTypeConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_ListCampaignTypeConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ListCampaignTypeConfigs(ctx, req.(*ListCampaignTypeConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_UpdateCampaignTypeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignTypeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).UpdateCampaignTypeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_UpdateCampaignTypeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).UpdateCampaignTypeConfig(ctx, req.(*UpdateCampaignTypeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_DeleteCampaignTypeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCampaignTypeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).DeleteCampaignTypeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_DeleteCampaignTypeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).DeleteCampaignTypeConfig(ctx, req.(*DeleteCampaignTypeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_CreateCampaignConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).CreateCampaignConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_CreateCampaignConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).CreateCampaignConfig(ctx, req.(*CreateCampaignConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_GetCampaignConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).GetCampaignConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_GetCampaignConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).GetCampaignConfig(ctx, req.(*GetCampaignConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ListCampaignConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCampaignConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ListCampaignConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_ListCampaignConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ListCampaignConfigs(ctx, req.(*ListCampaignConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_UpdateCampaignConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).UpdateCampaignConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_UpdateCampaignConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).UpdateCampaignConfig(ctx, req.(*UpdateCampaignConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_DeleteCampaignConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCampaignConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).DeleteCampaignConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_DeleteCampaignConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).DeleteCampaignConfig(ctx, req.(*DeleteCampaignConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_CreateUserCampaignConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserCampaignConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).CreateUserCampaignConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_CreateUserCampaignConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).CreateUserCampaignConfig(ctx, req.(*CreateUserCampaignConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_GetUserCampaignConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCampaignConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).GetUserCampaignConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_GetUserCampaignConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).GetUserCampaignConfig(ctx, req.(*GetUserCampaignConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_ListUserCampaignConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserCampaignConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).ListUserCampaignConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_ListUserCampaignConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).ListUserCampaignConfigs(ctx, req.(*ListUserCampaignConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_UpdateUserCampaignConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserCampaignConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).UpdateUserCampaignConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_UpdateUserCampaignConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).UpdateUserCampaignConfig(ctx, req.(*UpdateUserCampaignConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignService_DeleteUserCampaignConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserCampaignConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignServiceServer).DeleteUserCampaignConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CampaignService_DeleteUserCampaignConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignServiceServer).DeleteUserCampaignConfig(ctx, req.(*DeleteUserCampaignConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CampaignService_ServiceDesc is the grpc.ServiceDesc for CampaignService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampaignService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "campaign.CampaignService",
	HandlerType: (*CampaignServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCampaignTypeConfig",
			Handler:    _CampaignService_CreateCampaignTypeConfig_Handler,
		},
		{
			MethodName: "GetCampaignTypeConfig",
			Handler:    _CampaignService_GetCampaignTypeConfig_Handler,
		},
		{
			MethodName: "ListCampaignTypeConfigs",
			Handler:    _CampaignService_ListCampaignTypeConfigs_Handler,
		},
		{
			MethodName: "UpdateCampaignTypeConfig",
			Handler:    _CampaignService_UpdateCampaignTypeConfig_Handler,
		},
		{
			MethodName: "DeleteCampaignTypeConfig",
			Handler:    _CampaignService_DeleteCampaignTypeConfig_Handler,
		},
		{
			MethodName: "CreateCampaignConfig",
			Handler:    _CampaignService_CreateCampaignConfig_Handler,
		},
		{
			MethodName: "GetCampaignConfig",
			Handler:    _CampaignService_GetCampaignConfig_Handler,
		},
		{
			MethodName: "ListCampaignConfigs",
			Handler:    _CampaignService_ListCampaignConfigs_Handler,
		},
		{
			MethodName: "UpdateCampaignConfig",
			Handler:    _CampaignService_UpdateCampaignConfig_Handler,
		},
		{
			MethodName: "DeleteCampaignConfig",
			Handler:    _CampaignService_DeleteCampaignConfig_Handler,
		},
		{
			MethodName: "CreateUserCampaignConfig",
			Handler:    _CampaignService_CreateUserCampaignConfig_Handler,
		},
		{
			MethodName: "GetUserCampaignConfig",
			Handler:    _CampaignService_GetUserCampaignConfig_Handler,
		},
		{
			MethodName: "ListUserCampaignConfigs",
			Handler:    _CampaignService_ListUserCampaignConfigs_Handler,
		},
		{
			MethodName: "UpdateUserCampaignConfig",
			Handler:    _CampaignService_UpdateUserCampaignConfig_Handler,
		},
		{
			MethodName: "DeleteUserCampaignConfig",
			Handler:    _CampaignService_DeleteUserCampaignConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculate-service/service.proto",
}
