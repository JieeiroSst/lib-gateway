// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: hospital-patientm-anagement-service/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HospotalService_CreateDepartment_FullMethodName    = "/hospital.HospotalService/CreateDepartment"
	HospotalService_GetDepartment_FullMethodName       = "/hospital.HospotalService/GetDepartment"
	HospotalService_ListDepartments_FullMethodName     = "/hospital.HospotalService/ListDepartments"
	HospotalService_UpdateDepartment_FullMethodName    = "/hospital.HospotalService/UpdateDepartment"
	HospotalService_DeleteDepartment_FullMethodName    = "/hospital.HospotalService/DeleteDepartment"
	HospotalService_CreateStaff_FullMethodName         = "/hospital.HospotalService/CreateStaff"
	HospotalService_GetStaff_FullMethodName            = "/hospital.HospotalService/GetStaff"
	HospotalService_ListStaff_FullMethodName           = "/hospital.HospotalService/ListStaff"
	HospotalService_UpdateStaff_FullMethodName         = "/hospital.HospotalService/UpdateStaff"
	HospotalService_DeleteStaff_FullMethodName         = "/hospital.HospotalService/DeleteStaff"
	HospotalService_CreatePatient_FullMethodName       = "/hospital.HospotalService/CreatePatient"
	HospotalService_GetPatient_FullMethodName          = "/hospital.HospotalService/GetPatient"
	HospotalService_ListPatients_FullMethodName        = "/hospital.HospotalService/ListPatients"
	HospotalService_UpdatePatient_FullMethodName       = "/hospital.HospotalService/UpdatePatient"
	HospotalService_DeletePatient_FullMethodName       = "/hospital.HospotalService/DeletePatient"
	HospotalService_CreateMedicalRecord_FullMethodName = "/hospital.HospotalService/CreateMedicalRecord"
	HospotalService_GetMedicalRecord_FullMethodName    = "/hospital.HospotalService/GetMedicalRecord"
	HospotalService_ListMedicalRecords_FullMethodName  = "/hospital.HospotalService/ListMedicalRecords"
	HospotalService_UpdateMedicalRecord_FullMethodName = "/hospital.HospotalService/UpdateMedicalRecord"
	HospotalService_DeleteMedicalRecord_FullMethodName = "/hospital.HospotalService/DeleteMedicalRecord"
)

// HospotalServiceClient is the client API for HospotalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HospotalServiceClient interface {
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*Department, error)
	GetDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error)
	ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error)
	UpdateDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error)
	DeleteDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateStaff(ctx context.Context, in *CreateStaffRequest, opts ...grpc.CallOption) (*Staff, error)
	GetStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*Staff, error)
	ListStaff(ctx context.Context, in *ListStaffRequest, opts ...grpc.CallOption) (*ListStaffResponse, error)
	UpdateStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*Staff, error)
	DeleteStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreatePatient(ctx context.Context, in *CreatePatientRequest, opts ...grpc.CallOption) (*Patient, error)
	GetPatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Patient, error)
	ListPatients(ctx context.Context, in *ListPatientsRequest, opts ...grpc.CallOption) (*ListPatientsResponse, error)
	UpdatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Patient, error)
	DeletePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateMedicalRecord(ctx context.Context, in *CreateMedicalRecordRequest, opts ...grpc.CallOption) (*MedicalRecord, error)
	GetMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*MedicalRecord, error)
	ListMedicalRecords(ctx context.Context, in *ListMedicalRecordsRequest, opts ...grpc.CallOption) (*ListMedicalRecordsResponse, error)
	UpdateMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*MedicalRecord, error)
	DeleteMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type hospotalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHospotalServiceClient(cc grpc.ClientConnInterface) HospotalServiceClient {
	return &hospotalServiceClient{cc}
}

func (c *hospotalServiceClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*Department, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Department)
	err := c.cc.Invoke(ctx, HospotalService_CreateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) GetDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Department)
	err := c.cc.Invoke(ctx, HospotalService_GetDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepartmentsResponse)
	err := c.cc.Invoke(ctx, HospotalService_ListDepartments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) UpdateDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*Department, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Department)
	err := c.cc.Invoke(ctx, HospotalService_UpdateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) DeleteDepartment(ctx context.Context, in *Department, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HospotalService_DeleteDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) CreateStaff(ctx context.Context, in *CreateStaffRequest, opts ...grpc.CallOption) (*Staff, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Staff)
	err := c.cc.Invoke(ctx, HospotalService_CreateStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) GetStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*Staff, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Staff)
	err := c.cc.Invoke(ctx, HospotalService_GetStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) ListStaff(ctx context.Context, in *ListStaffRequest, opts ...grpc.CallOption) (*ListStaffResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListStaffResponse)
	err := c.cc.Invoke(ctx, HospotalService_ListStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) UpdateStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*Staff, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Staff)
	err := c.cc.Invoke(ctx, HospotalService_UpdateStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) DeleteStaff(ctx context.Context, in *Staff, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HospotalService_DeleteStaff_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) CreatePatient(ctx context.Context, in *CreatePatientRequest, opts ...grpc.CallOption) (*Patient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Patient)
	err := c.cc.Invoke(ctx, HospotalService_CreatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) GetPatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Patient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Patient)
	err := c.cc.Invoke(ctx, HospotalService_GetPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) ListPatients(ctx context.Context, in *ListPatientsRequest, opts ...grpc.CallOption) (*ListPatientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPatientsResponse)
	err := c.cc.Invoke(ctx, HospotalService_ListPatients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) UpdatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*Patient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Patient)
	err := c.cc.Invoke(ctx, HospotalService_UpdatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) DeletePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HospotalService_DeletePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) CreateMedicalRecord(ctx context.Context, in *CreateMedicalRecordRequest, opts ...grpc.CallOption) (*MedicalRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicalRecord)
	err := c.cc.Invoke(ctx, HospotalService_CreateMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) GetMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*MedicalRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicalRecord)
	err := c.cc.Invoke(ctx, HospotalService_GetMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) ListMedicalRecords(ctx context.Context, in *ListMedicalRecordsRequest, opts ...grpc.CallOption) (*ListMedicalRecordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicalRecordsResponse)
	err := c.cc.Invoke(ctx, HospotalService_ListMedicalRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) UpdateMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*MedicalRecord, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicalRecord)
	err := c.cc.Invoke(ctx, HospotalService_UpdateMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hospotalServiceClient) DeleteMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HospotalService_DeleteMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HospotalServiceServer is the server API for HospotalService service.
// All implementations must embed UnimplementedHospotalServiceServer
// for forward compatibility.
type HospotalServiceServer interface {
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*Department, error)
	GetDepartment(context.Context, *Department) (*Department, error)
	ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error)
	UpdateDepartment(context.Context, *Department) (*Department, error)
	DeleteDepartment(context.Context, *Department) (*emptypb.Empty, error)
	CreateStaff(context.Context, *CreateStaffRequest) (*Staff, error)
	GetStaff(context.Context, *Staff) (*Staff, error)
	ListStaff(context.Context, *ListStaffRequest) (*ListStaffResponse, error)
	UpdateStaff(context.Context, *Staff) (*Staff, error)
	DeleteStaff(context.Context, *Staff) (*emptypb.Empty, error)
	CreatePatient(context.Context, *CreatePatientRequest) (*Patient, error)
	GetPatient(context.Context, *Patient) (*Patient, error)
	ListPatients(context.Context, *ListPatientsRequest) (*ListPatientsResponse, error)
	UpdatePatient(context.Context, *Patient) (*Patient, error)
	DeletePatient(context.Context, *Patient) (*emptypb.Empty, error)
	CreateMedicalRecord(context.Context, *CreateMedicalRecordRequest) (*MedicalRecord, error)
	GetMedicalRecord(context.Context, *MedicalRecord) (*MedicalRecord, error)
	ListMedicalRecords(context.Context, *ListMedicalRecordsRequest) (*ListMedicalRecordsResponse, error)
	UpdateMedicalRecord(context.Context, *MedicalRecord) (*MedicalRecord, error)
	DeleteMedicalRecord(context.Context, *MedicalRecord) (*emptypb.Empty, error)
	mustEmbedUnimplementedHospotalServiceServer()
}

// UnimplementedHospotalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHospotalServiceServer struct{}

func (UnimplementedHospotalServiceServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedHospotalServiceServer) GetDepartment(context.Context, *Department) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedHospotalServiceServer) ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartments not implemented")
}
func (UnimplementedHospotalServiceServer) UpdateDepartment(context.Context, *Department) (*Department, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedHospotalServiceServer) DeleteDepartment(context.Context, *Department) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedHospotalServiceServer) CreateStaff(context.Context, *CreateStaffRequest) (*Staff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaff not implemented")
}
func (UnimplementedHospotalServiceServer) GetStaff(context.Context, *Staff) (*Staff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaff not implemented")
}
func (UnimplementedHospotalServiceServer) ListStaff(context.Context, *ListStaffRequest) (*ListStaffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaff not implemented")
}
func (UnimplementedHospotalServiceServer) UpdateStaff(context.Context, *Staff) (*Staff, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStaff not implemented")
}
func (UnimplementedHospotalServiceServer) DeleteStaff(context.Context, *Staff) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaff not implemented")
}
func (UnimplementedHospotalServiceServer) CreatePatient(context.Context, *CreatePatientRequest) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatient not implemented")
}
func (UnimplementedHospotalServiceServer) GetPatient(context.Context, *Patient) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatient not implemented")
}
func (UnimplementedHospotalServiceServer) ListPatients(context.Context, *ListPatientsRequest) (*ListPatientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatients not implemented")
}
func (UnimplementedHospotalServiceServer) UpdatePatient(context.Context, *Patient) (*Patient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatient not implemented")
}
func (UnimplementedHospotalServiceServer) DeletePatient(context.Context, *Patient) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatient not implemented")
}
func (UnimplementedHospotalServiceServer) CreateMedicalRecord(context.Context, *CreateMedicalRecordRequest) (*MedicalRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicalRecord not implemented")
}
func (UnimplementedHospotalServiceServer) GetMedicalRecord(context.Context, *MedicalRecord) (*MedicalRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicalRecord not implemented")
}
func (UnimplementedHospotalServiceServer) ListMedicalRecords(context.Context, *ListMedicalRecordsRequest) (*ListMedicalRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicalRecords not implemented")
}
func (UnimplementedHospotalServiceServer) UpdateMedicalRecord(context.Context, *MedicalRecord) (*MedicalRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicalRecord not implemented")
}
func (UnimplementedHospotalServiceServer) DeleteMedicalRecord(context.Context, *MedicalRecord) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicalRecord not implemented")
}
func (UnimplementedHospotalServiceServer) mustEmbedUnimplementedHospotalServiceServer() {}
func (UnimplementedHospotalServiceServer) testEmbeddedByValue()                         {}

// UnsafeHospotalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HospotalServiceServer will
// result in compilation errors.
type UnsafeHospotalServiceServer interface {
	mustEmbedUnimplementedHospotalServiceServer()
}

func RegisterHospotalServiceServer(s grpc.ServiceRegistrar, srv HospotalServiceServer) {
	// If the following call pancis, it indicates UnimplementedHospotalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HospotalService_ServiceDesc, srv)
}

func _HospotalService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Department)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_GetDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).GetDepartment(ctx, req.(*Department))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_ListDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).ListDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_ListDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).ListDepartments(ctx, req.(*ListDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Department)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).UpdateDepartment(ctx, req.(*Department))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Department)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).DeleteDepartment(ctx, req.(*Department))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_CreateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).CreateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_CreateStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).CreateStaff(ctx, req.(*CreateStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_GetStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Staff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).GetStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_GetStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).GetStaff(ctx, req.(*Staff))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_ListStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).ListStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_ListStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).ListStaff(ctx, req.(*ListStaffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_UpdateStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Staff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).UpdateStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_UpdateStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).UpdateStaff(ctx, req.(*Staff))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_DeleteStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Staff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).DeleteStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_DeleteStaff_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).DeleteStaff(ctx, req.(*Staff))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_CreatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).CreatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_CreatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).CreatePatient(ctx, req.(*CreatePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_GetPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).GetPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_GetPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).GetPatient(ctx, req.(*Patient))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_ListPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).ListPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_ListPatients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).ListPatients(ctx, req.(*ListPatientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_UpdatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).UpdatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_UpdatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).UpdatePatient(ctx, req.(*Patient))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_DeletePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).DeletePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_DeletePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).DeletePatient(ctx, req.(*Patient))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_CreateMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicalRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).CreateMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_CreateMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).CreateMedicalRecord(ctx, req.(*CreateMedicalRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_GetMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).GetMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_GetMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).GetMedicalRecord(ctx, req.(*MedicalRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_ListMedicalRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicalRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).ListMedicalRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_ListMedicalRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).ListMedicalRecords(ctx, req.(*ListMedicalRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_UpdateMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).UpdateMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_UpdateMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).UpdateMedicalRecord(ctx, req.(*MedicalRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _HospotalService_DeleteMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HospotalServiceServer).DeleteMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HospotalService_DeleteMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HospotalServiceServer).DeleteMedicalRecord(ctx, req.(*MedicalRecord))
	}
	return interceptor(ctx, in, info, handler)
}

// HospotalService_ServiceDesc is the grpc.ServiceDesc for HospotalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HospotalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hospital.HospotalService",
	HandlerType: (*HospotalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDepartment",
			Handler:    _HospotalService_CreateDepartment_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _HospotalService_GetDepartment_Handler,
		},
		{
			MethodName: "ListDepartments",
			Handler:    _HospotalService_ListDepartments_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _HospotalService_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _HospotalService_DeleteDepartment_Handler,
		},
		{
			MethodName: "CreateStaff",
			Handler:    _HospotalService_CreateStaff_Handler,
		},
		{
			MethodName: "GetStaff",
			Handler:    _HospotalService_GetStaff_Handler,
		},
		{
			MethodName: "ListStaff",
			Handler:    _HospotalService_ListStaff_Handler,
		},
		{
			MethodName: "UpdateStaff",
			Handler:    _HospotalService_UpdateStaff_Handler,
		},
		{
			MethodName: "DeleteStaff",
			Handler:    _HospotalService_DeleteStaff_Handler,
		},
		{
			MethodName: "CreatePatient",
			Handler:    _HospotalService_CreatePatient_Handler,
		},
		{
			MethodName: "GetPatient",
			Handler:    _HospotalService_GetPatient_Handler,
		},
		{
			MethodName: "ListPatients",
			Handler:    _HospotalService_ListPatients_Handler,
		},
		{
			MethodName: "UpdatePatient",
			Handler:    _HospotalService_UpdatePatient_Handler,
		},
		{
			MethodName: "DeletePatient",
			Handler:    _HospotalService_DeletePatient_Handler,
		},
		{
			MethodName: "CreateMedicalRecord",
			Handler:    _HospotalService_CreateMedicalRecord_Handler,
		},
		{
			MethodName: "GetMedicalRecord",
			Handler:    _HospotalService_GetMedicalRecord_Handler,
		},
		{
			MethodName: "ListMedicalRecords",
			Handler:    _HospotalService_ListMedicalRecords_Handler,
		},
		{
			MethodName: "UpdateMedicalRecord",
			Handler:    _HospotalService_UpdateMedicalRecord_Handler,
		},
		{
			MethodName: "DeleteMedicalRecord",
			Handler:    _HospotalService_DeleteMedicalRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hospital-patientm-anagement-service/service.proto",
}

const (
	AppointmentService_CreateAppointment_FullMethodName       = "/hospital.AppointmentService/CreateAppointment"
	AppointmentService_GetAppointment_FullMethodName          = "/hospital.AppointmentService/GetAppointment"
	AppointmentService_UpdateAppointmentStatus_FullMethodName = "/hospital.AppointmentService/UpdateAppointmentStatus"
	AppointmentService_ListAppointments_FullMethodName        = "/hospital.AppointmentService/ListAppointments"
	AppointmentService_UpdateAppointment_FullMethodName       = "/hospital.AppointmentService/UpdateAppointment"
	AppointmentService_DeleteAppointment_FullMethodName       = "/hospital.AppointmentService/DeleteAppointment"
	AppointmentService_CreatePrescription_FullMethodName      = "/hospital.AppointmentService/CreatePrescription"
	AppointmentService_GetPrescription_FullMethodName         = "/hospital.AppointmentService/GetPrescription"
	AppointmentService_ListPrescriptions_FullMethodName       = "/hospital.AppointmentService/ListPrescriptions"
	AppointmentService_UpdatePrescription_FullMethodName      = "/hospital.AppointmentService/UpdatePrescription"
	AppointmentService_DeletePrescription_FullMethodName      = "/hospital.AppointmentService/DeletePrescription"
	AppointmentService_CreateLabResult_FullMethodName         = "/hospital.AppointmentService/CreateLabResult"
	AppointmentService_GetLabResult_FullMethodName            = "/hospital.AppointmentService/GetLabResult"
	AppointmentService_ListLabResults_FullMethodName          = "/hospital.AppointmentService/ListLabResults"
	AppointmentService_UpdateLabResult_FullMethodName         = "/hospital.AppointmentService/UpdateLabResult"
	AppointmentService_DeleteLabResult_FullMethodName         = "/hospital.AppointmentService/DeleteLabResult"
	AppointmentService_CreateBilling_FullMethodName           = "/hospital.AppointmentService/CreateBilling"
	AppointmentService_GetBilling_FullMethodName              = "/hospital.AppointmentService/GetBilling"
	AppointmentService_UpdateBillingStatus_FullMethodName     = "/hospital.AppointmentService/UpdateBillingStatus"
	AppointmentService_ListBillings_FullMethodName            = "/hospital.AppointmentService/ListBillings"
	AppointmentService_UpdateBilling_FullMethodName           = "/hospital.AppointmentService/UpdateBilling"
	AppointmentService_DeleteBilling_FullMethodName           = "/hospital.AppointmentService/DeleteBilling"
	AppointmentService_GetDepartmentStats_FullMethodName      = "/hospital.AppointmentService/GetDepartmentStats"
	AppointmentService_GetAppointmentStats_FullMethodName     = "/hospital.AppointmentService/GetAppointmentStats"
	AppointmentService_GetBillingStats_FullMethodName         = "/hospital.AppointmentService/GetBillingStats"
)

// AppointmentServiceClient is the client API for AppointmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppointmentServiceClient interface {
	CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*Appointment, error)
	GetAppointment(ctx context.Context, in *Appointment, opts ...grpc.CallOption) (*Appointment, error)
	UpdateAppointmentStatus(ctx context.Context, in *UpdateAppointmentStatusRequest, opts ...grpc.CallOption) (*Appointment, error)
	ListAppointments(ctx context.Context, in *ListAppointmentsRequest, opts ...grpc.CallOption) (*ListAppointmentsResponse, error)
	UpdateAppointment(ctx context.Context, in *Appointment, opts ...grpc.CallOption) (*Appointment, error)
	DeleteAppointment(ctx context.Context, in *Appointment, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreatePrescription(ctx context.Context, in *CreatePrescriptionRequest, opts ...grpc.CallOption) (*Prescription, error)
	GetPrescription(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*Prescription, error)
	ListPrescriptions(ctx context.Context, in *ListPrescriptionsRequest, opts ...grpc.CallOption) (*ListPrescriptionsResponse, error)
	UpdatePrescription(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*Prescription, error)
	DeletePrescription(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateLabResult(ctx context.Context, in *CreateLabResultRequest, opts ...grpc.CallOption) (*LabResult, error)
	GetLabResult(ctx context.Context, in *LabResult, opts ...grpc.CallOption) (*LabResult, error)
	ListLabResults(ctx context.Context, in *ListLabResultsRequest, opts ...grpc.CallOption) (*ListLabResultsResponse, error)
	UpdateLabResult(ctx context.Context, in *LabResult, opts ...grpc.CallOption) (*LabResult, error)
	DeleteLabResult(ctx context.Context, in *LabResult, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateBilling(ctx context.Context, in *CreateBillingRequest, opts ...grpc.CallOption) (*Billing, error)
	GetBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*Billing, error)
	UpdateBillingStatus(ctx context.Context, in *UpdateBillingStatusRequest, opts ...grpc.CallOption) (*Billing, error)
	ListBillings(ctx context.Context, in *ListBillingsRequest, opts ...grpc.CallOption) (*ListBillingsResponse, error)
	UpdateBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*Billing, error)
	DeleteBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDepartmentStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DepartmentStatsResponse, error)
	GetAppointmentStats(ctx context.Context, in *AppointmentStatsRequest, opts ...grpc.CallOption) (*AppointmentStatsResponse, error)
	GetBillingStats(ctx context.Context, in *BillingStatsRequest, opts ...grpc.CallOption) (*BillingStatsResponse, error)
}

type appointmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppointmentServiceClient(cc grpc.ClientConnInterface) AppointmentServiceClient {
	return &appointmentServiceClient{cc}
}

func (c *appointmentServiceClient) CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*Appointment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Appointment)
	err := c.cc.Invoke(ctx, AppointmentService_CreateAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetAppointment(ctx context.Context, in *Appointment, opts ...grpc.CallOption) (*Appointment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Appointment)
	err := c.cc.Invoke(ctx, AppointmentService_GetAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) UpdateAppointmentStatus(ctx context.Context, in *UpdateAppointmentStatusRequest, opts ...grpc.CallOption) (*Appointment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Appointment)
	err := c.cc.Invoke(ctx, AppointmentService_UpdateAppointmentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) ListAppointments(ctx context.Context, in *ListAppointmentsRequest, opts ...grpc.CallOption) (*ListAppointmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppointmentsResponse)
	err := c.cc.Invoke(ctx, AppointmentService_ListAppointments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) UpdateAppointment(ctx context.Context, in *Appointment, opts ...grpc.CallOption) (*Appointment, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Appointment)
	err := c.cc.Invoke(ctx, AppointmentService_UpdateAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) DeleteAppointment(ctx context.Context, in *Appointment, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppointmentService_DeleteAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) CreatePrescription(ctx context.Context, in *CreatePrescriptionRequest, opts ...grpc.CallOption) (*Prescription, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Prescription)
	err := c.cc.Invoke(ctx, AppointmentService_CreatePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetPrescription(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*Prescription, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Prescription)
	err := c.cc.Invoke(ctx, AppointmentService_GetPrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) ListPrescriptions(ctx context.Context, in *ListPrescriptionsRequest, opts ...grpc.CallOption) (*ListPrescriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrescriptionsResponse)
	err := c.cc.Invoke(ctx, AppointmentService_ListPrescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) UpdatePrescription(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*Prescription, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Prescription)
	err := c.cc.Invoke(ctx, AppointmentService_UpdatePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) DeletePrescription(ctx context.Context, in *Prescription, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppointmentService_DeletePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) CreateLabResult(ctx context.Context, in *CreateLabResultRequest, opts ...grpc.CallOption) (*LabResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabResult)
	err := c.cc.Invoke(ctx, AppointmentService_CreateLabResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetLabResult(ctx context.Context, in *LabResult, opts ...grpc.CallOption) (*LabResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabResult)
	err := c.cc.Invoke(ctx, AppointmentService_GetLabResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) ListLabResults(ctx context.Context, in *ListLabResultsRequest, opts ...grpc.CallOption) (*ListLabResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLabResultsResponse)
	err := c.cc.Invoke(ctx, AppointmentService_ListLabResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) UpdateLabResult(ctx context.Context, in *LabResult, opts ...grpc.CallOption) (*LabResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LabResult)
	err := c.cc.Invoke(ctx, AppointmentService_UpdateLabResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) DeleteLabResult(ctx context.Context, in *LabResult, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppointmentService_DeleteLabResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) CreateBilling(ctx context.Context, in *CreateBillingRequest, opts ...grpc.CallOption) (*Billing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Billing)
	err := c.cc.Invoke(ctx, AppointmentService_CreateBilling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*Billing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Billing)
	err := c.cc.Invoke(ctx, AppointmentService_GetBilling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) UpdateBillingStatus(ctx context.Context, in *UpdateBillingStatusRequest, opts ...grpc.CallOption) (*Billing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Billing)
	err := c.cc.Invoke(ctx, AppointmentService_UpdateBillingStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) ListBillings(ctx context.Context, in *ListBillingsRequest, opts ...grpc.CallOption) (*ListBillingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBillingsResponse)
	err := c.cc.Invoke(ctx, AppointmentService_ListBillings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) UpdateBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*Billing, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Billing)
	err := c.cc.Invoke(ctx, AppointmentService_UpdateBilling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) DeleteBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AppointmentService_DeleteBilling_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetDepartmentStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DepartmentStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DepartmentStatsResponse)
	err := c.cc.Invoke(ctx, AppointmentService_GetDepartmentStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetAppointmentStats(ctx context.Context, in *AppointmentStatsRequest, opts ...grpc.CallOption) (*AppointmentStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppointmentStatsResponse)
	err := c.cc.Invoke(ctx, AppointmentService_GetAppointmentStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appointmentServiceClient) GetBillingStats(ctx context.Context, in *BillingStatsRequest, opts ...grpc.CallOption) (*BillingStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BillingStatsResponse)
	err := c.cc.Invoke(ctx, AppointmentService_GetBillingStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppointmentServiceServer is the server API for AppointmentService service.
// All implementations must embed UnimplementedAppointmentServiceServer
// for forward compatibility.
type AppointmentServiceServer interface {
	CreateAppointment(context.Context, *CreateAppointmentRequest) (*Appointment, error)
	GetAppointment(context.Context, *Appointment) (*Appointment, error)
	UpdateAppointmentStatus(context.Context, *UpdateAppointmentStatusRequest) (*Appointment, error)
	ListAppointments(context.Context, *ListAppointmentsRequest) (*ListAppointmentsResponse, error)
	UpdateAppointment(context.Context, *Appointment) (*Appointment, error)
	DeleteAppointment(context.Context, *Appointment) (*emptypb.Empty, error)
	CreatePrescription(context.Context, *CreatePrescriptionRequest) (*Prescription, error)
	GetPrescription(context.Context, *Prescription) (*Prescription, error)
	ListPrescriptions(context.Context, *ListPrescriptionsRequest) (*ListPrescriptionsResponse, error)
	UpdatePrescription(context.Context, *Prescription) (*Prescription, error)
	DeletePrescription(context.Context, *Prescription) (*emptypb.Empty, error)
	CreateLabResult(context.Context, *CreateLabResultRequest) (*LabResult, error)
	GetLabResult(context.Context, *LabResult) (*LabResult, error)
	ListLabResults(context.Context, *ListLabResultsRequest) (*ListLabResultsResponse, error)
	UpdateLabResult(context.Context, *LabResult) (*LabResult, error)
	DeleteLabResult(context.Context, *LabResult) (*emptypb.Empty, error)
	CreateBilling(context.Context, *CreateBillingRequest) (*Billing, error)
	GetBilling(context.Context, *Billing) (*Billing, error)
	UpdateBillingStatus(context.Context, *UpdateBillingStatusRequest) (*Billing, error)
	ListBillings(context.Context, *ListBillingsRequest) (*ListBillingsResponse, error)
	UpdateBilling(context.Context, *Billing) (*Billing, error)
	DeleteBilling(context.Context, *Billing) (*emptypb.Empty, error)
	GetDepartmentStats(context.Context, *emptypb.Empty) (*DepartmentStatsResponse, error)
	GetAppointmentStats(context.Context, *AppointmentStatsRequest) (*AppointmentStatsResponse, error)
	GetBillingStats(context.Context, *BillingStatsRequest) (*BillingStatsResponse, error)
	mustEmbedUnimplementedAppointmentServiceServer()
}

// UnimplementedAppointmentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppointmentServiceServer struct{}

func (UnimplementedAppointmentServiceServer) CreateAppointment(context.Context, *CreateAppointmentRequest) (*Appointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) GetAppointment(context.Context, *Appointment) (*Appointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) UpdateAppointmentStatus(context.Context, *UpdateAppointmentStatusRequest) (*Appointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointmentStatus not implemented")
}
func (UnimplementedAppointmentServiceServer) ListAppointments(context.Context, *ListAppointmentsRequest) (*ListAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppointments not implemented")
}
func (UnimplementedAppointmentServiceServer) UpdateAppointment(context.Context, *Appointment) (*Appointment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) DeleteAppointment(context.Context, *Appointment) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppointment not implemented")
}
func (UnimplementedAppointmentServiceServer) CreatePrescription(context.Context, *CreatePrescriptionRequest) (*Prescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrescription not implemented")
}
func (UnimplementedAppointmentServiceServer) GetPrescription(context.Context, *Prescription) (*Prescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrescription not implemented")
}
func (UnimplementedAppointmentServiceServer) ListPrescriptions(context.Context, *ListPrescriptionsRequest) (*ListPrescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrescriptions not implemented")
}
func (UnimplementedAppointmentServiceServer) UpdatePrescription(context.Context, *Prescription) (*Prescription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrescription not implemented")
}
func (UnimplementedAppointmentServiceServer) DeletePrescription(context.Context, *Prescription) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrescription not implemented")
}
func (UnimplementedAppointmentServiceServer) CreateLabResult(context.Context, *CreateLabResultRequest) (*LabResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabResult not implemented")
}
func (UnimplementedAppointmentServiceServer) GetLabResult(context.Context, *LabResult) (*LabResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabResult not implemented")
}
func (UnimplementedAppointmentServiceServer) ListLabResults(context.Context, *ListLabResultsRequest) (*ListLabResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabResults not implemented")
}
func (UnimplementedAppointmentServiceServer) UpdateLabResult(context.Context, *LabResult) (*LabResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabResult not implemented")
}
func (UnimplementedAppointmentServiceServer) DeleteLabResult(context.Context, *LabResult) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabResult not implemented")
}
func (UnimplementedAppointmentServiceServer) CreateBilling(context.Context, *CreateBillingRequest) (*Billing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBilling not implemented")
}
func (UnimplementedAppointmentServiceServer) GetBilling(context.Context, *Billing) (*Billing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBilling not implemented")
}
func (UnimplementedAppointmentServiceServer) UpdateBillingStatus(context.Context, *UpdateBillingStatusRequest) (*Billing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBillingStatus not implemented")
}
func (UnimplementedAppointmentServiceServer) ListBillings(context.Context, *ListBillingsRequest) (*ListBillingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBillings not implemented")
}
func (UnimplementedAppointmentServiceServer) UpdateBilling(context.Context, *Billing) (*Billing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBilling not implemented")
}
func (UnimplementedAppointmentServiceServer) DeleteBilling(context.Context, *Billing) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBilling not implemented")
}
func (UnimplementedAppointmentServiceServer) GetDepartmentStats(context.Context, *emptypb.Empty) (*DepartmentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentStats not implemented")
}
func (UnimplementedAppointmentServiceServer) GetAppointmentStats(context.Context, *AppointmentStatsRequest) (*AppointmentStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentStats not implemented")
}
func (UnimplementedAppointmentServiceServer) GetBillingStats(context.Context, *BillingStatsRequest) (*BillingStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingStats not implemented")
}
func (UnimplementedAppointmentServiceServer) mustEmbedUnimplementedAppointmentServiceServer() {}
func (UnimplementedAppointmentServiceServer) testEmbeddedByValue()                            {}

// UnsafeAppointmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppointmentServiceServer will
// result in compilation errors.
type UnsafeAppointmentServiceServer interface {
	mustEmbedUnimplementedAppointmentServiceServer()
}

func RegisterAppointmentServiceServer(s grpc.ServiceRegistrar, srv AppointmentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppointmentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppointmentService_ServiceDesc, srv)
}

func _AppointmentService_CreateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).CreateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_CreateAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).CreateAppointment(ctx, req.(*CreateAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Appointment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetAppointment(ctx, req.(*Appointment))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_UpdateAppointmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).UpdateAppointmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_UpdateAppointmentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).UpdateAppointmentStatus(ctx, req.(*UpdateAppointmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_ListAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).ListAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_ListAppointments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).ListAppointments(ctx, req.(*ListAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_UpdateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Appointment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).UpdateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_UpdateAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).UpdateAppointment(ctx, req.(*Appointment))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_DeleteAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Appointment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).DeleteAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_DeleteAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).DeleteAppointment(ctx, req.(*Appointment))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_CreatePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).CreatePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_CreatePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).CreatePrescription(ctx, req.(*CreatePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetPrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetPrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetPrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetPrescription(ctx, req.(*Prescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_ListPrescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).ListPrescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_ListPrescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).ListPrescriptions(ctx, req.(*ListPrescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_UpdatePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).UpdatePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_UpdatePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).UpdatePrescription(ctx, req.(*Prescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_DeletePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prescription)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).DeletePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_DeletePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).DeletePrescription(ctx, req.(*Prescription))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_CreateLabResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).CreateLabResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_CreateLabResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).CreateLabResult(ctx, req.(*CreateLabResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetLabResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetLabResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetLabResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetLabResult(ctx, req.(*LabResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_ListLabResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).ListLabResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_ListLabResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).ListLabResults(ctx, req.(*ListLabResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_UpdateLabResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).UpdateLabResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_UpdateLabResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).UpdateLabResult(ctx, req.(*LabResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_DeleteLabResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).DeleteLabResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_DeleteLabResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).DeleteLabResult(ctx, req.(*LabResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_CreateBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBillingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).CreateBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_CreateBilling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).CreateBilling(ctx, req.(*CreateBillingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Billing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetBilling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetBilling(ctx, req.(*Billing))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_UpdateBillingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBillingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).UpdateBillingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_UpdateBillingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).UpdateBillingStatus(ctx, req.(*UpdateBillingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_ListBillings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBillingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).ListBillings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_ListBillings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).ListBillings(ctx, req.(*ListBillingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_UpdateBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Billing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).UpdateBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_UpdateBilling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).UpdateBilling(ctx, req.(*Billing))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_DeleteBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Billing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).DeleteBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_DeleteBilling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).DeleteBilling(ctx, req.(*Billing))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetDepartmentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetDepartmentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetDepartmentStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetDepartmentStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetAppointmentStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppointmentStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetAppointmentStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetAppointmentStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetAppointmentStats(ctx, req.(*AppointmentStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppointmentService_GetBillingStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppointmentServiceServer).GetBillingStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppointmentService_GetBillingStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppointmentServiceServer).GetBillingStats(ctx, req.(*BillingStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppointmentService_ServiceDesc is the grpc.ServiceDesc for AppointmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppointmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hospital.AppointmentService",
	HandlerType: (*AppointmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppointment",
			Handler:    _AppointmentService_CreateAppointment_Handler,
		},
		{
			MethodName: "GetAppointment",
			Handler:    _AppointmentService_GetAppointment_Handler,
		},
		{
			MethodName: "UpdateAppointmentStatus",
			Handler:    _AppointmentService_UpdateAppointmentStatus_Handler,
		},
		{
			MethodName: "ListAppointments",
			Handler:    _AppointmentService_ListAppointments_Handler,
		},
		{
			MethodName: "UpdateAppointment",
			Handler:    _AppointmentService_UpdateAppointment_Handler,
		},
		{
			MethodName: "DeleteAppointment",
			Handler:    _AppointmentService_DeleteAppointment_Handler,
		},
		{
			MethodName: "CreatePrescription",
			Handler:    _AppointmentService_CreatePrescription_Handler,
		},
		{
			MethodName: "GetPrescription",
			Handler:    _AppointmentService_GetPrescription_Handler,
		},
		{
			MethodName: "ListPrescriptions",
			Handler:    _AppointmentService_ListPrescriptions_Handler,
		},
		{
			MethodName: "UpdatePrescription",
			Handler:    _AppointmentService_UpdatePrescription_Handler,
		},
		{
			MethodName: "DeletePrescription",
			Handler:    _AppointmentService_DeletePrescription_Handler,
		},
		{
			MethodName: "CreateLabResult",
			Handler:    _AppointmentService_CreateLabResult_Handler,
		},
		{
			MethodName: "GetLabResult",
			Handler:    _AppointmentService_GetLabResult_Handler,
		},
		{
			MethodName: "ListLabResults",
			Handler:    _AppointmentService_ListLabResults_Handler,
		},
		{
			MethodName: "UpdateLabResult",
			Handler:    _AppointmentService_UpdateLabResult_Handler,
		},
		{
			MethodName: "DeleteLabResult",
			Handler:    _AppointmentService_DeleteLabResult_Handler,
		},
		{
			MethodName: "CreateBilling",
			Handler:    _AppointmentService_CreateBilling_Handler,
		},
		{
			MethodName: "GetBilling",
			Handler:    _AppointmentService_GetBilling_Handler,
		},
		{
			MethodName: "UpdateBillingStatus",
			Handler:    _AppointmentService_UpdateBillingStatus_Handler,
		},
		{
			MethodName: "ListBillings",
			Handler:    _AppointmentService_ListBillings_Handler,
		},
		{
			MethodName: "UpdateBilling",
			Handler:    _AppointmentService_UpdateBilling_Handler,
		},
		{
			MethodName: "DeleteBilling",
			Handler:    _AppointmentService_DeleteBilling_Handler,
		},
		{
			MethodName: "GetDepartmentStats",
			Handler:    _AppointmentService_GetDepartmentStats_Handler,
		},
		{
			MethodName: "GetAppointmentStats",
			Handler:    _AppointmentService_GetAppointmentStats_Handler,
		},
		{
			MethodName: "GetBillingStats",
			Handler:    _AppointmentService_GetBillingStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hospital-patientm-anagement-service/service.proto",
}
