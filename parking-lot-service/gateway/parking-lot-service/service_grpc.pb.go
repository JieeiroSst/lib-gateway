// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: parking-lot-service/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ParkingService_GetSpot_FullMethodName              = "/parking.ParkingService/GetSpot"
	ParkingService_ListSpots_FullMethodName            = "/parking.ParkingService/ListSpots"
	ParkingService_CreateSpot_FullMethodName           = "/parking.ParkingService/CreateSpot"
	ParkingService_UpdateSpot_FullMethodName           = "/parking.ParkingService/UpdateSpot"
	ParkingService_DeleteSpot_FullMethodName           = "/parking.ParkingService/DeleteSpot"
	ParkingService_GetVehicle_FullMethodName           = "/parking.ParkingService/GetVehicle"
	ParkingService_ListVehicles_FullMethodName         = "/parking.ParkingService/ListVehicles"
	ParkingService_CreateVehicle_FullMethodName        = "/parking.ParkingService/CreateVehicle"
	ParkingService_UpdateVehicle_FullMethodName        = "/parking.ParkingService/UpdateVehicle"
	ParkingService_DeleteVehicle_FullMethodName        = "/parking.ParkingService/DeleteVehicle"
	ParkingService_ParkVehicle_FullMethodName          = "/parking.ParkingService/ParkVehicle"
	ParkingService_LeaveParking_FullMethodName         = "/parking.ParkingService/LeaveParking"
	ParkingService_GetParkingHistory_FullMethodName    = "/parking.ParkingService/GetParkingHistory"
	ParkingService_SearchParkingHistory_FullMethodName = "/parking.ParkingService/SearchParkingHistory"
	ParkingService_GetOccupancyReport_FullMethodName   = "/parking.ParkingService/GetOccupancyReport"
)

// ParkingServiceClient is the client API for ParkingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParkingServiceClient interface {
	GetSpot(ctx context.Context, in *GetSpotRequest, opts ...grpc.CallOption) (*ParkingSpot, error)
	ListSpots(ctx context.Context, in *ListSpotsRequest, opts ...grpc.CallOption) (*ListSpotsResponse, error)
	CreateSpot(ctx context.Context, in *CreateSpotRequest, opts ...grpc.CallOption) (*ParkingSpot, error)
	UpdateSpot(ctx context.Context, in *UpdateSpotRequest, opts ...grpc.CallOption) (*ParkingSpot, error)
	DeleteSpot(ctx context.Context, in *DeleteSpotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error)
	ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error)
	CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error)
	UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error)
	DeleteVehicle(ctx context.Context, in *DeleteVehicleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ParkVehicle(ctx context.Context, in *ParkVehicleRequest, opts ...grpc.CallOption) (*ParkingHistory, error)
	LeaveParking(ctx context.Context, in *LeaveParkingRequest, opts ...grpc.CallOption) (*ParkingHistory, error)
	GetParkingHistory(ctx context.Context, in *GetParkingHistoryRequest, opts ...grpc.CallOption) (*ParkingHistory, error)
	SearchParkingHistory(ctx context.Context, in *SearchParkingHistoryRequest, opts ...grpc.CallOption) (*SearchParkingHistoryResponse, error)
	GetOccupancyReport(ctx context.Context, in *GetOccupancyReportRequest, opts ...grpc.CallOption) (*OccupancyReport, error)
}

type parkingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParkingServiceClient(cc grpc.ClientConnInterface) ParkingServiceClient {
	return &parkingServiceClient{cc}
}

func (c *parkingServiceClient) GetSpot(ctx context.Context, in *GetSpotRequest, opts ...grpc.CallOption) (*ParkingSpot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingSpot)
	err := c.cc.Invoke(ctx, ParkingService_GetSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) ListSpots(ctx context.Context, in *ListSpotsRequest, opts ...grpc.CallOption) (*ListSpotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSpotsResponse)
	err := c.cc.Invoke(ctx, ParkingService_ListSpots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) CreateSpot(ctx context.Context, in *CreateSpotRequest, opts ...grpc.CallOption) (*ParkingSpot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingSpot)
	err := c.cc.Invoke(ctx, ParkingService_CreateSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) UpdateSpot(ctx context.Context, in *UpdateSpotRequest, opts ...grpc.CallOption) (*ParkingSpot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingSpot)
	err := c.cc.Invoke(ctx, ParkingService_UpdateSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) DeleteSpot(ctx context.Context, in *DeleteSpotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ParkingService_DeleteSpot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, ParkingService_GetVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVehiclesResponse)
	err := c.cc.Invoke(ctx, ParkingService_ListVehicles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, ParkingService_CreateVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*Vehicle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vehicle)
	err := c.cc.Invoke(ctx, ParkingService_UpdateVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) DeleteVehicle(ctx context.Context, in *DeleteVehicleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ParkingService_DeleteVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) ParkVehicle(ctx context.Context, in *ParkVehicleRequest, opts ...grpc.CallOption) (*ParkingHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingHistory)
	err := c.cc.Invoke(ctx, ParkingService_ParkVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) LeaveParking(ctx context.Context, in *LeaveParkingRequest, opts ...grpc.CallOption) (*ParkingHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingHistory)
	err := c.cc.Invoke(ctx, ParkingService_LeaveParking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) GetParkingHistory(ctx context.Context, in *GetParkingHistoryRequest, opts ...grpc.CallOption) (*ParkingHistory, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ParkingHistory)
	err := c.cc.Invoke(ctx, ParkingService_GetParkingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) SearchParkingHistory(ctx context.Context, in *SearchParkingHistoryRequest, opts ...grpc.CallOption) (*SearchParkingHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchParkingHistoryResponse)
	err := c.cc.Invoke(ctx, ParkingService_SearchParkingHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *parkingServiceClient) GetOccupancyReport(ctx context.Context, in *GetOccupancyReportRequest, opts ...grpc.CallOption) (*OccupancyReport, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OccupancyReport)
	err := c.cc.Invoke(ctx, ParkingService_GetOccupancyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParkingServiceServer is the server API for ParkingService service.
// All implementations must embed UnimplementedParkingServiceServer
// for forward compatibility.
type ParkingServiceServer interface {
	GetSpot(context.Context, *GetSpotRequest) (*ParkingSpot, error)
	ListSpots(context.Context, *ListSpotsRequest) (*ListSpotsResponse, error)
	CreateSpot(context.Context, *CreateSpotRequest) (*ParkingSpot, error)
	UpdateSpot(context.Context, *UpdateSpotRequest) (*ParkingSpot, error)
	DeleteSpot(context.Context, *DeleteSpotRequest) (*emptypb.Empty, error)
	GetVehicle(context.Context, *GetVehicleRequest) (*Vehicle, error)
	ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesResponse, error)
	CreateVehicle(context.Context, *CreateVehicleRequest) (*Vehicle, error)
	UpdateVehicle(context.Context, *UpdateVehicleRequest) (*Vehicle, error)
	DeleteVehicle(context.Context, *DeleteVehicleRequest) (*emptypb.Empty, error)
	ParkVehicle(context.Context, *ParkVehicleRequest) (*ParkingHistory, error)
	LeaveParking(context.Context, *LeaveParkingRequest) (*ParkingHistory, error)
	GetParkingHistory(context.Context, *GetParkingHistoryRequest) (*ParkingHistory, error)
	SearchParkingHistory(context.Context, *SearchParkingHistoryRequest) (*SearchParkingHistoryResponse, error)
	GetOccupancyReport(context.Context, *GetOccupancyReportRequest) (*OccupancyReport, error)
	mustEmbedUnimplementedParkingServiceServer()
}

// UnimplementedParkingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedParkingServiceServer struct{}

func (UnimplementedParkingServiceServer) GetSpot(context.Context, *GetSpotRequest) (*ParkingSpot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpot not implemented")
}
func (UnimplementedParkingServiceServer) ListSpots(context.Context, *ListSpotsRequest) (*ListSpotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpots not implemented")
}
func (UnimplementedParkingServiceServer) CreateSpot(context.Context, *CreateSpotRequest) (*ParkingSpot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpot not implemented")
}
func (UnimplementedParkingServiceServer) UpdateSpot(context.Context, *UpdateSpotRequest) (*ParkingSpot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpot not implemented")
}
func (UnimplementedParkingServiceServer) DeleteSpot(context.Context, *DeleteSpotRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpot not implemented")
}
func (UnimplementedParkingServiceServer) GetVehicle(context.Context, *GetVehicleRequest) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicle not implemented")
}
func (UnimplementedParkingServiceServer) ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVehicles not implemented")
}
func (UnimplementedParkingServiceServer) CreateVehicle(context.Context, *CreateVehicleRequest) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVehicle not implemented")
}
func (UnimplementedParkingServiceServer) UpdateVehicle(context.Context, *UpdateVehicleRequest) (*Vehicle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicle not implemented")
}
func (UnimplementedParkingServiceServer) DeleteVehicle(context.Context, *DeleteVehicleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVehicle not implemented")
}
func (UnimplementedParkingServiceServer) ParkVehicle(context.Context, *ParkVehicleRequest) (*ParkingHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParkVehicle not implemented")
}
func (UnimplementedParkingServiceServer) LeaveParking(context.Context, *LeaveParkingRequest) (*ParkingHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveParking not implemented")
}
func (UnimplementedParkingServiceServer) GetParkingHistory(context.Context, *GetParkingHistoryRequest) (*ParkingHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParkingHistory not implemented")
}
func (UnimplementedParkingServiceServer) SearchParkingHistory(context.Context, *SearchParkingHistoryRequest) (*SearchParkingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchParkingHistory not implemented")
}
func (UnimplementedParkingServiceServer) GetOccupancyReport(context.Context, *GetOccupancyReportRequest) (*OccupancyReport, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOccupancyReport not implemented")
}
func (UnimplementedParkingServiceServer) mustEmbedUnimplementedParkingServiceServer() {}
func (UnimplementedParkingServiceServer) testEmbeddedByValue()                        {}

// UnsafeParkingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParkingServiceServer will
// result in compilation errors.
type UnsafeParkingServiceServer interface {
	mustEmbedUnimplementedParkingServiceServer()
}

func RegisterParkingServiceServer(s grpc.ServiceRegistrar, srv ParkingServiceServer) {
	// If the following call pancis, it indicates UnimplementedParkingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ParkingService_ServiceDesc, srv)
}

func _ParkingService_GetSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_GetSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetSpot(ctx, req.(*GetSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_ListSpots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).ListSpots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_ListSpots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).ListSpots(ctx, req.(*ListSpotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_CreateSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).CreateSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_CreateSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).CreateSpot(ctx, req.(*CreateSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_UpdateSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).UpdateSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_UpdateSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).UpdateSpot(ctx, req.(*UpdateSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_DeleteSpot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).DeleteSpot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_DeleteSpot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).DeleteSpot(ctx, req.(*DeleteSpotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_GetVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_GetVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetVehicle(ctx, req.(*GetVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_ListVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVehiclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).ListVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_ListVehicles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).ListVehicles(ctx, req.(*ListVehiclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_CreateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).CreateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_CreateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).CreateVehicle(ctx, req.(*CreateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_UpdateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).UpdateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_UpdateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).UpdateVehicle(ctx, req.(*UpdateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_DeleteVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).DeleteVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_DeleteVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).DeleteVehicle(ctx, req.(*DeleteVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_ParkVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParkVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).ParkVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_ParkVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).ParkVehicle(ctx, req.(*ParkVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_LeaveParking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveParkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).LeaveParking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_LeaveParking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).LeaveParking(ctx, req.(*LeaveParkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_GetParkingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetParkingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetParkingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_GetParkingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetParkingHistory(ctx, req.(*GetParkingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_SearchParkingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParkingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).SearchParkingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_SearchParkingHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).SearchParkingHistory(ctx, req.(*SearchParkingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ParkingService_GetOccupancyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOccupancyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParkingServiceServer).GetOccupancyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ParkingService_GetOccupancyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParkingServiceServer).GetOccupancyReport(ctx, req.(*GetOccupancyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ParkingService_ServiceDesc is the grpc.ServiceDesc for ParkingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParkingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "parking.ParkingService",
	HandlerType: (*ParkingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpot",
			Handler:    _ParkingService_GetSpot_Handler,
		},
		{
			MethodName: "ListSpots",
			Handler:    _ParkingService_ListSpots_Handler,
		},
		{
			MethodName: "CreateSpot",
			Handler:    _ParkingService_CreateSpot_Handler,
		},
		{
			MethodName: "UpdateSpot",
			Handler:    _ParkingService_UpdateSpot_Handler,
		},
		{
			MethodName: "DeleteSpot",
			Handler:    _ParkingService_DeleteSpot_Handler,
		},
		{
			MethodName: "GetVehicle",
			Handler:    _ParkingService_GetVehicle_Handler,
		},
		{
			MethodName: "ListVehicles",
			Handler:    _ParkingService_ListVehicles_Handler,
		},
		{
			MethodName: "CreateVehicle",
			Handler:    _ParkingService_CreateVehicle_Handler,
		},
		{
			MethodName: "UpdateVehicle",
			Handler:    _ParkingService_UpdateVehicle_Handler,
		},
		{
			MethodName: "DeleteVehicle",
			Handler:    _ParkingService_DeleteVehicle_Handler,
		},
		{
			MethodName: "ParkVehicle",
			Handler:    _ParkingService_ParkVehicle_Handler,
		},
		{
			MethodName: "LeaveParking",
			Handler:    _ParkingService_LeaveParking_Handler,
		},
		{
			MethodName: "GetParkingHistory",
			Handler:    _ParkingService_GetParkingHistory_Handler,
		},
		{
			MethodName: "SearchParkingHistory",
			Handler:    _ParkingService_SearchParkingHistory_Handler,
		},
		{
			MethodName: "GetOccupancyReport",
			Handler:    _ParkingService_GetOccupancyReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parking-lot-service/service.proto",
}
