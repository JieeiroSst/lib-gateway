// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: car-rental-servcie/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VehicleRentalService_RegisterUser_FullMethodName            = "/vehicle_rental.VehicleRentalService/RegisterUser"
	VehicleRentalService_GetUser_FullMethodName                 = "/vehicle_rental.VehicleRentalService/GetUser"
	VehicleRentalService_UpdateUser_FullMethodName              = "/vehicle_rental.VehicleRentalService/UpdateUser"
	VehicleRentalService_CreateVehicle_FullMethodName           = "/vehicle_rental.VehicleRentalService/CreateVehicle"
	VehicleRentalService_GetVehicle_FullMethodName              = "/vehicle_rental.VehicleRentalService/GetVehicle"
	VehicleRentalService_UpdateVehicle_FullMethodName           = "/vehicle_rental.VehicleRentalService/UpdateVehicle"
	VehicleRentalService_ListVehicles_FullMethodName            = "/vehicle_rental.VehicleRentalService/ListVehicles"
	VehicleRentalService_SearchAvailableVehicles_FullMethodName = "/vehicle_rental.VehicleRentalService/SearchAvailableVehicles"
	VehicleRentalService_CreateReservation_FullMethodName       = "/vehicle_rental.VehicleRentalService/CreateReservation"
	VehicleRentalService_GetReservation_FullMethodName          = "/vehicle_rental.VehicleRentalService/GetReservation"
	VehicleRentalService_UpdateReservation_FullMethodName       = "/vehicle_rental.VehicleRentalService/UpdateReservation"
	VehicleRentalService_CancelReservation_FullMethodName       = "/vehicle_rental.VehicleRentalService/CancelReservation"
	VehicleRentalService_ListUserReservations_FullMethodName    = "/vehicle_rental.VehicleRentalService/ListUserReservations"
	VehicleRentalService_StartRental_FullMethodName             = "/vehicle_rental.VehicleRentalService/StartRental"
	VehicleRentalService_CompleteRental_FullMethodName          = "/vehicle_rental.VehicleRentalService/CompleteRental"
	VehicleRentalService_GetRental_FullMethodName               = "/vehicle_rental.VehicleRentalService/GetRental"
	VehicleRentalService_ListUserRentals_FullMethodName         = "/vehicle_rental.VehicleRentalService/ListUserRentals"
	VehicleRentalService_ProcessPayment_FullMethodName          = "/vehicle_rental.VehicleRentalService/ProcessPayment"
	VehicleRentalService_SubmitReview_FullMethodName            = "/vehicle_rental.VehicleRentalService/SubmitReview"
	VehicleRentalService_ListVehicleReviews_FullMethodName      = "/vehicle_rental.VehicleRentalService/ListVehicleReviews"
	VehicleRentalService_ListLocations_FullMethodName           = "/vehicle_rental.VehicleRentalService/ListLocations"
)

// VehicleRentalServiceClient is the client API for VehicleRentalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VehicleRentalServiceClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*VehicleResponse, error)
	GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*VehicleResponse, error)
	UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*VehicleResponse, error)
	ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error)
	SearchAvailableVehicles(ctx context.Context, in *SearchVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error)
	// Reservation management
	CreateReservation(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error)
	GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error)
	UpdateReservation(ctx context.Context, in *UpdateReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error)
	CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error)
	ListUserReservations(ctx context.Context, in *ListUserReservationsRequest, opts ...grpc.CallOption) (*ListReservationsResponse, error)
	// Rental operations
	StartRental(ctx context.Context, in *StartRentalRequest, opts ...grpc.CallOption) (*RentalResponse, error)
	CompleteRental(ctx context.Context, in *CompleteRentalRequest, opts ...grpc.CallOption) (*RentalResponse, error)
	GetRental(ctx context.Context, in *GetRentalRequest, opts ...grpc.CallOption) (*RentalResponse, error)
	ListUserRentals(ctx context.Context, in *ListUserRentalsRequest, opts ...grpc.CallOption) (*ListRentalsResponse, error)
	// Payment processing
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	// Reviews
	SubmitReview(ctx context.Context, in *SubmitReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error)
	ListVehicleReviews(ctx context.Context, in *ListVehicleReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error)
	ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error)
}

type vehicleRentalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVehicleRentalServiceClient(cc grpc.ClientConnInterface) VehicleRentalServiceClient {
	return &vehicleRentalServiceClient{cc}
}

func (c *vehicleRentalServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) CreateVehicle(ctx context.Context, in *CreateVehicleRequest, opts ...grpc.CallOption) (*VehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VehicleResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_CreateVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) GetVehicle(ctx context.Context, in *GetVehicleRequest, opts ...grpc.CallOption) (*VehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VehicleResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_GetVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) UpdateVehicle(ctx context.Context, in *UpdateVehicleRequest, opts ...grpc.CallOption) (*VehicleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VehicleResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_UpdateVehicle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) ListVehicles(ctx context.Context, in *ListVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVehiclesResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_ListVehicles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) SearchAvailableVehicles(ctx context.Context, in *SearchVehiclesRequest, opts ...grpc.CallOption) (*ListVehiclesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVehiclesResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_SearchAvailableVehicles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) CreateReservation(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_CreateReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_GetReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) UpdateReservation(ctx context.Context, in *UpdateReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_UpdateReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*ReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReservationResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_CancelReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) ListUserReservations(ctx context.Context, in *ListUserReservationsRequest, opts ...grpc.CallOption) (*ListReservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReservationsResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_ListUserReservations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) StartRental(ctx context.Context, in *StartRentalRequest, opts ...grpc.CallOption) (*RentalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RentalResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_StartRental_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) CompleteRental(ctx context.Context, in *CompleteRentalRequest, opts ...grpc.CallOption) (*RentalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RentalResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_CompleteRental_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) GetRental(ctx context.Context, in *GetRentalRequest, opts ...grpc.CallOption) (*RentalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RentalResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_GetRental_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) ListUserRentals(ctx context.Context, in *ListUserRentalsRequest, opts ...grpc.CallOption) (*ListRentalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRentalsResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_ListUserRentals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_ProcessPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) SubmitReview(ctx context.Context, in *SubmitReviewRequest, opts ...grpc.CallOption) (*ReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_SubmitReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) ListVehicleReviews(ctx context.Context, in *ListVehicleReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReviewsResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_ListVehicleReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vehicleRentalServiceClient) ListLocations(ctx context.Context, in *ListLocationsRequest, opts ...grpc.CallOption) (*ListLocationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLocationsResponse)
	err := c.cc.Invoke(ctx, VehicleRentalService_ListLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VehicleRentalServiceServer is the server API for VehicleRentalService service.
// All implementations must embed UnimplementedVehicleRentalServiceServer
// for forward compatibility.
type VehicleRentalServiceServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*UserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error)
	CreateVehicle(context.Context, *CreateVehicleRequest) (*VehicleResponse, error)
	GetVehicle(context.Context, *GetVehicleRequest) (*VehicleResponse, error)
	UpdateVehicle(context.Context, *UpdateVehicleRequest) (*VehicleResponse, error)
	ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesResponse, error)
	SearchAvailableVehicles(context.Context, *SearchVehiclesRequest) (*ListVehiclesResponse, error)
	// Reservation management
	CreateReservation(context.Context, *CreateReservationRequest) (*ReservationResponse, error)
	GetReservation(context.Context, *GetReservationRequest) (*ReservationResponse, error)
	UpdateReservation(context.Context, *UpdateReservationRequest) (*ReservationResponse, error)
	CancelReservation(context.Context, *CancelReservationRequest) (*ReservationResponse, error)
	ListUserReservations(context.Context, *ListUserReservationsRequest) (*ListReservationsResponse, error)
	// Rental operations
	StartRental(context.Context, *StartRentalRequest) (*RentalResponse, error)
	CompleteRental(context.Context, *CompleteRentalRequest) (*RentalResponse, error)
	GetRental(context.Context, *GetRentalRequest) (*RentalResponse, error)
	ListUserRentals(context.Context, *ListUserRentalsRequest) (*ListRentalsResponse, error)
	// Payment processing
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*PaymentResponse, error)
	// Reviews
	SubmitReview(context.Context, *SubmitReviewRequest) (*ReviewResponse, error)
	ListVehicleReviews(context.Context, *ListVehicleReviewsRequest) (*ListReviewsResponse, error)
	ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error)
	mustEmbedUnimplementedVehicleRentalServiceServer()
}

// UnimplementedVehicleRentalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVehicleRentalServiceServer struct{}

func (UnimplementedVehicleRentalServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedVehicleRentalServiceServer) GetUser(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedVehicleRentalServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedVehicleRentalServiceServer) CreateVehicle(context.Context, *CreateVehicleRequest) (*VehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVehicle not implemented")
}
func (UnimplementedVehicleRentalServiceServer) GetVehicle(context.Context, *GetVehicleRequest) (*VehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVehicle not implemented")
}
func (UnimplementedVehicleRentalServiceServer) UpdateVehicle(context.Context, *UpdateVehicleRequest) (*VehicleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVehicle not implemented")
}
func (UnimplementedVehicleRentalServiceServer) ListVehicles(context.Context, *ListVehiclesRequest) (*ListVehiclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVehicles not implemented")
}
func (UnimplementedVehicleRentalServiceServer) SearchAvailableVehicles(context.Context, *SearchVehiclesRequest) (*ListVehiclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAvailableVehicles not implemented")
}
func (UnimplementedVehicleRentalServiceServer) CreateReservation(context.Context, *CreateReservationRequest) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation not implemented")
}
func (UnimplementedVehicleRentalServiceServer) GetReservation(context.Context, *GetReservationRequest) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation not implemented")
}
func (UnimplementedVehicleRentalServiceServer) UpdateReservation(context.Context, *UpdateReservationRequest) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReservation not implemented")
}
func (UnimplementedVehicleRentalServiceServer) CancelReservation(context.Context, *CancelReservationRequest) (*ReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (UnimplementedVehicleRentalServiceServer) ListUserReservations(context.Context, *ListUserReservationsRequest) (*ListReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserReservations not implemented")
}
func (UnimplementedVehicleRentalServiceServer) StartRental(context.Context, *StartRentalRequest) (*RentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRental not implemented")
}
func (UnimplementedVehicleRentalServiceServer) CompleteRental(context.Context, *CompleteRentalRequest) (*RentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteRental not implemented")
}
func (UnimplementedVehicleRentalServiceServer) GetRental(context.Context, *GetRentalRequest) (*RentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRental not implemented")
}
func (UnimplementedVehicleRentalServiceServer) ListUserRentals(context.Context, *ListUserRentalsRequest) (*ListRentalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserRentals not implemented")
}
func (UnimplementedVehicleRentalServiceServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedVehicleRentalServiceServer) SubmitReview(context.Context, *SubmitReviewRequest) (*ReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitReview not implemented")
}
func (UnimplementedVehicleRentalServiceServer) ListVehicleReviews(context.Context, *ListVehicleReviewsRequest) (*ListReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVehicleReviews not implemented")
}
func (UnimplementedVehicleRentalServiceServer) ListLocations(context.Context, *ListLocationsRequest) (*ListLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (UnimplementedVehicleRentalServiceServer) mustEmbedUnimplementedVehicleRentalServiceServer() {}
func (UnimplementedVehicleRentalServiceServer) testEmbeddedByValue()                              {}

// UnsafeVehicleRentalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VehicleRentalServiceServer will
// result in compilation errors.
type UnsafeVehicleRentalServiceServer interface {
	mustEmbedUnimplementedVehicleRentalServiceServer()
}

func RegisterVehicleRentalServiceServer(s grpc.ServiceRegistrar, srv VehicleRentalServiceServer) {
	// If the following call pancis, it indicates UnimplementedVehicleRentalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VehicleRentalService_ServiceDesc, srv)
}

func _VehicleRentalService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_CreateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).CreateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_CreateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).CreateVehicle(ctx, req.(*CreateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_GetVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).GetVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_GetVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).GetVehicle(ctx, req.(*GetVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_UpdateVehicle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVehicleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).UpdateVehicle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_UpdateVehicle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).UpdateVehicle(ctx, req.(*UpdateVehicleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_ListVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVehiclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).ListVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_ListVehicles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).ListVehicles(ctx, req.(*ListVehiclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_SearchAvailableVehicles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVehiclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).SearchAvailableVehicles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_SearchAvailableVehicles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).SearchAvailableVehicles(ctx, req.(*SearchVehiclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_CreateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).CreateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_CreateReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).CreateReservation(ctx, req.(*CreateReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_GetReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).GetReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_GetReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).GetReservation(ctx, req.(*GetReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_UpdateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).UpdateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_UpdateReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).UpdateReservation(ctx, req.(*UpdateReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_CancelReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).CancelReservation(ctx, req.(*CancelReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_ListUserReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).ListUserReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_ListUserReservations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).ListUserReservations(ctx, req.(*ListUserReservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_StartRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).StartRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_StartRental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).StartRental(ctx, req.(*StartRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_CompleteRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).CompleteRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_CompleteRental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).CompleteRental(ctx, req.(*CompleteRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_GetRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).GetRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_GetRental_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).GetRental(ctx, req.(*GetRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_ListUserRentals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRentalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).ListUserRentals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_ListUserRentals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).ListUserRentals(ctx, req.(*ListUserRentalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_SubmitReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).SubmitReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_SubmitReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).SubmitReview(ctx, req.(*SubmitReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_ListVehicleReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVehicleReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).ListVehicleReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_ListVehicleReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).ListVehicleReviews(ctx, req.(*ListVehicleReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VehicleRentalService_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VehicleRentalServiceServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VehicleRentalService_ListLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VehicleRentalServiceServer).ListLocations(ctx, req.(*ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VehicleRentalService_ServiceDesc is the grpc.ServiceDesc for VehicleRentalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VehicleRentalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vehicle_rental.VehicleRentalService",
	HandlerType: (*VehicleRentalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _VehicleRentalService_RegisterUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _VehicleRentalService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _VehicleRentalService_UpdateUser_Handler,
		},
		{
			MethodName: "CreateVehicle",
			Handler:    _VehicleRentalService_CreateVehicle_Handler,
		},
		{
			MethodName: "GetVehicle",
			Handler:    _VehicleRentalService_GetVehicle_Handler,
		},
		{
			MethodName: "UpdateVehicle",
			Handler:    _VehicleRentalService_UpdateVehicle_Handler,
		},
		{
			MethodName: "ListVehicles",
			Handler:    _VehicleRentalService_ListVehicles_Handler,
		},
		{
			MethodName: "SearchAvailableVehicles",
			Handler:    _VehicleRentalService_SearchAvailableVehicles_Handler,
		},
		{
			MethodName: "CreateReservation",
			Handler:    _VehicleRentalService_CreateReservation_Handler,
		},
		{
			MethodName: "GetReservation",
			Handler:    _VehicleRentalService_GetReservation_Handler,
		},
		{
			MethodName: "UpdateReservation",
			Handler:    _VehicleRentalService_UpdateReservation_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _VehicleRentalService_CancelReservation_Handler,
		},
		{
			MethodName: "ListUserReservations",
			Handler:    _VehicleRentalService_ListUserReservations_Handler,
		},
		{
			MethodName: "StartRental",
			Handler:    _VehicleRentalService_StartRental_Handler,
		},
		{
			MethodName: "CompleteRental",
			Handler:    _VehicleRentalService_CompleteRental_Handler,
		},
		{
			MethodName: "GetRental",
			Handler:    _VehicleRentalService_GetRental_Handler,
		},
		{
			MethodName: "ListUserRentals",
			Handler:    _VehicleRentalService_ListUserRentals_Handler,
		},
		{
			MethodName: "ProcessPayment",
			Handler:    _VehicleRentalService_ProcessPayment_Handler,
		},
		{
			MethodName: "SubmitReview",
			Handler:    _VehicleRentalService_SubmitReview_Handler,
		},
		{
			MethodName: "ListVehicleReviews",
			Handler:    _VehicleRentalService_ListVehicleReviews_Handler,
		},
		{
			MethodName: "ListLocations",
			Handler:    _VehicleRentalService_ListLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "car-rental-servcie/service.proto",
}
