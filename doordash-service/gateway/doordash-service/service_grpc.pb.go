// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: doordash-service/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FoodDeliveryGateway_RegisterUser_FullMethodName                 = "/fooddelivery.FoodDeliveryGateway/RegisterUser"
	FoodDeliveryGateway_LoginUser_FullMethodName                    = "/fooddelivery.FoodDeliveryGateway/LoginUser"
	FoodDeliveryGateway_GetUserProfile_FullMethodName               = "/fooddelivery.FoodDeliveryGateway/GetUserProfile"
	FoodDeliveryGateway_UpdateUserProfile_FullMethodName            = "/fooddelivery.FoodDeliveryGateway/UpdateUserProfile"
	FoodDeliveryGateway_SearchRestaurants_FullMethodName            = "/fooddelivery.FoodDeliveryGateway/SearchRestaurants"
	FoodDeliveryGateway_GetRestaurantDetails_FullMethodName         = "/fooddelivery.FoodDeliveryGateway/GetRestaurantDetails"
	FoodDeliveryGateway_GetRestaurantMenu_FullMethodName            = "/fooddelivery.FoodDeliveryGateway/GetRestaurantMenu"
	FoodDeliveryGateway_CreateOrder_FullMethodName                  = "/fooddelivery.FoodDeliveryGateway/CreateOrder"
	FoodDeliveryGateway_GetOrderStatus_FullMethodName               = "/fooddelivery.FoodDeliveryGateway/GetOrderStatus"
	FoodDeliveryGateway_UpdateOrderStatus_FullMethodName            = "/fooddelivery.FoodDeliveryGateway/UpdateOrderStatus"
	FoodDeliveryGateway_GetOrderHistory_FullMethodName              = "/fooddelivery.FoodDeliveryGateway/GetOrderHistory"
	FoodDeliveryGateway_CancelOrder_FullMethodName                  = "/fooddelivery.FoodDeliveryGateway/CancelOrder"
	FoodDeliveryGateway_UpdateDriverLocation_FullMethodName         = "/fooddelivery.FoodDeliveryGateway/UpdateDriverLocation"
	FoodDeliveryGateway_GetAvailableOrders_FullMethodName           = "/fooddelivery.FoodDeliveryGateway/GetAvailableOrders"
	FoodDeliveryGateway_AcceptOrder_FullMethodName                  = "/fooddelivery.FoodDeliveryGateway/AcceptOrder"
	FoodDeliveryGateway_CompleteDelivery_FullMethodName             = "/fooddelivery.FoodDeliveryGateway/CompleteDelivery"
	FoodDeliveryGateway_ProcessPayment_FullMethodName               = "/fooddelivery.FoodDeliveryGateway/ProcessPayment"
	FoodDeliveryGateway_RefundPayment_FullMethodName                = "/fooddelivery.FoodDeliveryGateway/RefundPayment"
	FoodDeliveryGateway_ApplyPromotion_FullMethodName               = "/fooddelivery.FoodDeliveryGateway/ApplyPromotion"
	FoodDeliveryGateway_GetAvailablePromotions_FullMethodName       = "/fooddelivery.FoodDeliveryGateway/GetAvailablePromotions"
	FoodDeliveryGateway_CreateSupportTicket_FullMethodName          = "/fooddelivery.FoodDeliveryGateway/CreateSupportTicket"
	FoodDeliveryGateway_GetTicketStatus_FullMethodName              = "/fooddelivery.FoodDeliveryGateway/GetTicketStatus"
	FoodDeliveryGateway_AddTicketMessage_FullMethodName             = "/fooddelivery.FoodDeliveryGateway/AddTicketMessage"
	FoodDeliveryGateway_GetUserNotifications_FullMethodName         = "/fooddelivery.FoodDeliveryGateway/GetUserNotifications"
	FoodDeliveryGateway_MarkNotificationAsRead_FullMethodName       = "/fooddelivery.FoodDeliveryGateway/MarkNotificationAsRead"
	FoodDeliveryGateway_SubscribeToOrderUpdates_FullMethodName      = "/fooddelivery.FoodDeliveryGateway/SubscribeToOrderUpdates"
	FoodDeliveryGateway_SubscribeToDriverLocation_FullMethodName    = "/fooddelivery.FoodDeliveryGateway/SubscribeToDriverLocation"
	FoodDeliveryGateway_SubscribeToNotifications_FullMethodName     = "/fooddelivery.FoodDeliveryGateway/SubscribeToNotifications"
	FoodDeliveryGateway_SubscribeToNewOrders_FullMethodName         = "/fooddelivery.FoodDeliveryGateway/SubscribeToNewOrders"
	FoodDeliveryGateway_GetSystemStats_FullMethodName               = "/fooddelivery.FoodDeliveryGateway/GetSystemStats"
	FoodDeliveryGateway_GetActiveDrivers_FullMethodName             = "/fooddelivery.FoodDeliveryGateway/GetActiveDrivers"
	FoodDeliveryGateway_CreatePromotion_FullMethodName              = "/fooddelivery.FoodDeliveryGateway/CreatePromotion"
	FoodDeliveryGateway_UpdatePromotion_FullMethodName              = "/fooddelivery.FoodDeliveryGateway/UpdatePromotion"
	FoodDeliveryGateway_ManageUser_FullMethodName                   = "/fooddelivery.FoodDeliveryGateway/ManageUser"
	FoodDeliveryGateway_GetSupportTickets_FullMethodName            = "/fooddelivery.FoodDeliveryGateway/GetSupportTickets"
	FoodDeliveryGateway_AssignTicket_FullMethodName                 = "/fooddelivery.FoodDeliveryGateway/AssignTicket"
	FoodDeliveryGateway_CreateRestaurant_FullMethodName             = "/fooddelivery.FoodDeliveryGateway/CreateRestaurant"
	FoodDeliveryGateway_UpdateRestaurant_FullMethodName             = "/fooddelivery.FoodDeliveryGateway/UpdateRestaurant"
	FoodDeliveryGateway_CreateMenuItem_FullMethodName               = "/fooddelivery.FoodDeliveryGateway/CreateMenuItem"
	FoodDeliveryGateway_UpdateMenuItem_FullMethodName               = "/fooddelivery.FoodDeliveryGateway/UpdateMenuItem"
	FoodDeliveryGateway_DeleteMenuItem_FullMethodName               = "/fooddelivery.FoodDeliveryGateway/DeleteMenuItem"
	FoodDeliveryGateway_GetPendingOrders_FullMethodName             = "/fooddelivery.FoodDeliveryGateway/GetPendingOrders"
	FoodDeliveryGateway_UpdateOrderPreparationStatus_FullMethodName = "/fooddelivery.FoodDeliveryGateway/UpdateOrderPreparationStatus"
	FoodDeliveryGateway_GetRestaurantAnalytics_FullMethodName       = "/fooddelivery.FoodDeliveryGateway/GetRestaurantAnalytics"
)

// FoodDeliveryGatewayClient is the client API for FoodDeliveryGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FoodDeliveryGatewayClient interface {
	// User service methods
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthResponse, error)
	GetUserProfile(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error)
	// Restaurant service methods
	SearchRestaurants(ctx context.Context, in *SearchRestaurantsRequest, opts ...grpc.CallOption) (*RestaurantsResponse, error)
	GetRestaurantDetails(ctx context.Context, in *RestaurantRequest, opts ...grpc.CallOption) (*RestaurantResponse, error)
	GetRestaurantMenu(ctx context.Context, in *RestaurantRequest, opts ...grpc.CallOption) (*MenuResponse, error)
	// Order service methods
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	GetOrderStatus(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error)
	UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error)
	GetOrderHistory(ctx context.Context, in *OrderHistoryRequest, opts ...grpc.CallOption) (*OrderHistoryResponse, error)
	CancelOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error)
	// Driver service methods
	UpdateDriverLocation(ctx context.Context, in *UpdateDriverLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAvailableOrders(ctx context.Context, in *DriverRequest, opts ...grpc.CallOption) (*AvailableOrdersResponse, error)
	AcceptOrder(ctx context.Context, in *AcceptOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	CompleteDelivery(ctx context.Context, in *CompleteDeliveryRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	// Payment service methods
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	RefundPayment(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*PaymentResponse, error)
	// Promotion service methods
	ApplyPromotion(ctx context.Context, in *ApplyPromotionRequest, opts ...grpc.CallOption) (*PromotionResponse, error)
	GetAvailablePromotions(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*PromotionsResponse, error)
	// Support service methods
	CreateSupportTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	GetTicketStatus(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	AddTicketMessage(ctx context.Context, in *AddTicketMessageRequest, opts ...grpc.CallOption) (*TicketMessageResponse, error)
	// Notification service methods
	GetUserNotifications(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*NotificationsResponse, error)
	MarkNotificationAsRead(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubscribeToOrderUpdates(ctx context.Context, in *OrderSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderStatusUpdate], error)
	SubscribeToDriverLocation(ctx context.Context, in *DriverLocationSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DriverLocationUpdate], error)
	SubscribeToNotifications(ctx context.Context, in *NotificationSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotificationEvent], error)
	SubscribeToNewOrders(ctx context.Context, in *RestaurantSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NewOrderEvent], error)
	// AdminService
	GetSystemStats(ctx context.Context, in *SystemStatsRequest, opts ...grpc.CallOption) (*SystemStatsResponse, error)
	GetActiveDrivers(ctx context.Context, in *DriverLocationRequest, opts ...grpc.CallOption) (*ActiveDriversResponse, error)
	CreatePromotion(ctx context.Context, in *CreatePromotionRequest, opts ...grpc.CallOption) (*PromotionInfo, error)
	UpdatePromotion(ctx context.Context, in *UpdatePromotionRequest, opts ...grpc.CallOption) (*PromotionInfo, error)
	ManageUser(ctx context.Context, in *ManageUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetSupportTickets(ctx context.Context, in *SupportTicketsRequest, opts ...grpc.CallOption) (*SupportTicketsResponse, error)
	AssignTicket(ctx context.Context, in *AssignTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error)
	// RestaurantManagement
	CreateRestaurant(ctx context.Context, in *CreateRestaurantRequest, opts ...grpc.CallOption) (*RestaurantResponse, error)
	UpdateRestaurant(ctx context.Context, in *UpdateRestaurantRequest, opts ...grpc.CallOption) (*RestaurantResponse, error)
	CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItemResponse, error)
	UpdateMenuItem(ctx context.Context, in *UpdateMenuItemRequest, opts ...grpc.CallOption) (*MenuItemResponse, error)
	DeleteMenuItem(ctx context.Context, in *MenuItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetPendingOrders(ctx context.Context, in *RestaurantRequest, opts ...grpc.CallOption) (*RestaurantOrdersResponse, error)
	UpdateOrderPreparationStatus(ctx context.Context, in *UpdatePreparationStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error)
	GetRestaurantAnalytics(ctx context.Context, in *RestaurantAnalyticsRequest, opts ...grpc.CallOption) (*RestaurantAnalyticsResponse, error)
}

type foodDeliveryGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewFoodDeliveryGatewayClient(cc grpc.ClientConnInterface) FoodDeliveryGatewayClient {
	return &foodDeliveryGatewayClient{cc}
}

func (c *foodDeliveryGatewayClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) LoginUser(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_LoginUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetUserProfile(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) UpdateUserProfile(ctx context.Context, in *UpdateUserProfileRequest, opts ...grpc.CallOption) (*UserProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProfileResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_UpdateUserProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) SearchRestaurants(ctx context.Context, in *SearchRestaurantsRequest, opts ...grpc.CallOption) (*RestaurantsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantsResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_SearchRestaurants_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetRestaurantDetails(ctx context.Context, in *RestaurantRequest, opts ...grpc.CallOption) (*RestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetRestaurantDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetRestaurantMenu(ctx context.Context, in *RestaurantRequest, opts ...grpc.CallOption) (*MenuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetRestaurantMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetOrderStatus(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderStatusResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) UpdateOrderStatus(ctx context.Context, in *UpdateOrderStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderStatusResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_UpdateOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetOrderHistory(ctx context.Context, in *OrderHistoryRequest, opts ...grpc.CallOption) (*OrderHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderHistoryResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetOrderHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) CancelOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderStatusResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_CancelOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) UpdateDriverLocation(ctx context.Context, in *UpdateDriverLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_UpdateDriverLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetAvailableOrders(ctx context.Context, in *DriverRequest, opts ...grpc.CallOption) (*AvailableOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AvailableOrdersResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetAvailableOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) AcceptOrder(ctx context.Context, in *AcceptOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_AcceptOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) CompleteDelivery(ctx context.Context, in *CompleteDeliveryRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_CompleteDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_ProcessPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) RefundPayment(ctx context.Context, in *RefundRequest, opts ...grpc.CallOption) (*PaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_RefundPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) ApplyPromotion(ctx context.Context, in *ApplyPromotionRequest, opts ...grpc.CallOption) (*PromotionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromotionResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_ApplyPromotion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetAvailablePromotions(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*PromotionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromotionsResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetAvailablePromotions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) CreateSupportTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_CreateSupportTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetTicketStatus(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetTicketStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) AddTicketMessage(ctx context.Context, in *AddTicketMessageRequest, opts ...grpc.CallOption) (*TicketMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketMessageResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_AddTicketMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetUserNotifications(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*NotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotificationsResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetUserNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) MarkNotificationAsRead(ctx context.Context, in *NotificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_MarkNotificationAsRead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) SubscribeToOrderUpdates(ctx context.Context, in *OrderSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[OrderStatusUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FoodDeliveryGateway_ServiceDesc.Streams[0], FoodDeliveryGateway_SubscribeToOrderUpdates_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OrderSubscriptionRequest, OrderStatusUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodDeliveryGateway_SubscribeToOrderUpdatesClient = grpc.ServerStreamingClient[OrderStatusUpdate]

func (c *foodDeliveryGatewayClient) SubscribeToDriverLocation(ctx context.Context, in *DriverLocationSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DriverLocationUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FoodDeliveryGateway_ServiceDesc.Streams[1], FoodDeliveryGateway_SubscribeToDriverLocation_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DriverLocationSubscriptionRequest, DriverLocationUpdate]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodDeliveryGateway_SubscribeToDriverLocationClient = grpc.ServerStreamingClient[DriverLocationUpdate]

func (c *foodDeliveryGatewayClient) SubscribeToNotifications(ctx context.Context, in *NotificationSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NotificationEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FoodDeliveryGateway_ServiceDesc.Streams[2], FoodDeliveryGateway_SubscribeToNotifications_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NotificationSubscriptionRequest, NotificationEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodDeliveryGateway_SubscribeToNotificationsClient = grpc.ServerStreamingClient[NotificationEvent]

func (c *foodDeliveryGatewayClient) SubscribeToNewOrders(ctx context.Context, in *RestaurantSubscriptionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[NewOrderEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FoodDeliveryGateway_ServiceDesc.Streams[3], FoodDeliveryGateway_SubscribeToNewOrders_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RestaurantSubscriptionRequest, NewOrderEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodDeliveryGateway_SubscribeToNewOrdersClient = grpc.ServerStreamingClient[NewOrderEvent]

func (c *foodDeliveryGatewayClient) GetSystemStats(ctx context.Context, in *SystemStatsRequest, opts ...grpc.CallOption) (*SystemStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemStatsResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetSystemStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetActiveDrivers(ctx context.Context, in *DriverLocationRequest, opts ...grpc.CallOption) (*ActiveDriversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActiveDriversResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetActiveDrivers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) CreatePromotion(ctx context.Context, in *CreatePromotionRequest, opts ...grpc.CallOption) (*PromotionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromotionInfo)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_CreatePromotion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) UpdatePromotion(ctx context.Context, in *UpdatePromotionRequest, opts ...grpc.CallOption) (*PromotionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PromotionInfo)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_UpdatePromotion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) ManageUser(ctx context.Context, in *ManageUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_ManageUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetSupportTickets(ctx context.Context, in *SupportTicketsRequest, opts ...grpc.CallOption) (*SupportTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupportTicketsResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetSupportTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) AssignTicket(ctx context.Context, in *AssignTicketRequest, opts ...grpc.CallOption) (*TicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TicketResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_AssignTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) CreateRestaurant(ctx context.Context, in *CreateRestaurantRequest, opts ...grpc.CallOption) (*RestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_CreateRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) UpdateRestaurant(ctx context.Context, in *UpdateRestaurantRequest, opts ...grpc.CallOption) (*RestaurantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_UpdateRestaurant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) CreateMenuItem(ctx context.Context, in *CreateMenuItemRequest, opts ...grpc.CallOption) (*MenuItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuItemResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_CreateMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) UpdateMenuItem(ctx context.Context, in *UpdateMenuItemRequest, opts ...grpc.CallOption) (*MenuItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuItemResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_UpdateMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) DeleteMenuItem(ctx context.Context, in *MenuItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_DeleteMenuItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetPendingOrders(ctx context.Context, in *RestaurantRequest, opts ...grpc.CallOption) (*RestaurantOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantOrdersResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetPendingOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) UpdateOrderPreparationStatus(ctx context.Context, in *UpdatePreparationStatusRequest, opts ...grpc.CallOption) (*OrderStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderStatusResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_UpdateOrderPreparationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *foodDeliveryGatewayClient) GetRestaurantAnalytics(ctx context.Context, in *RestaurantAnalyticsRequest, opts ...grpc.CallOption) (*RestaurantAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestaurantAnalyticsResponse)
	err := c.cc.Invoke(ctx, FoodDeliveryGateway_GetRestaurantAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FoodDeliveryGatewayServer is the server API for FoodDeliveryGateway service.
// All implementations must embed UnimplementedFoodDeliveryGatewayServer
// for forward compatibility.
type FoodDeliveryGatewayServer interface {
	// User service methods
	RegisterUser(context.Context, *RegisterUserRequest) (*UserResponse, error)
	LoginUser(context.Context, *LoginRequest) (*AuthResponse, error)
	GetUserProfile(context.Context, *UserRequest) (*UserProfileResponse, error)
	UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UserProfileResponse, error)
	// Restaurant service methods
	SearchRestaurants(context.Context, *SearchRestaurantsRequest) (*RestaurantsResponse, error)
	GetRestaurantDetails(context.Context, *RestaurantRequest) (*RestaurantResponse, error)
	GetRestaurantMenu(context.Context, *RestaurantRequest) (*MenuResponse, error)
	// Order service methods
	CreateOrder(context.Context, *CreateOrderRequest) (*OrderResponse, error)
	GetOrderStatus(context.Context, *OrderRequest) (*OrderStatusResponse, error)
	UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*OrderStatusResponse, error)
	GetOrderHistory(context.Context, *OrderHistoryRequest) (*OrderHistoryResponse, error)
	CancelOrder(context.Context, *OrderRequest) (*OrderStatusResponse, error)
	// Driver service methods
	UpdateDriverLocation(context.Context, *UpdateDriverLocationRequest) (*emptypb.Empty, error)
	GetAvailableOrders(context.Context, *DriverRequest) (*AvailableOrdersResponse, error)
	AcceptOrder(context.Context, *AcceptOrderRequest) (*OrderResponse, error)
	CompleteDelivery(context.Context, *CompleteDeliveryRequest) (*OrderResponse, error)
	// Payment service methods
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*PaymentResponse, error)
	RefundPayment(context.Context, *RefundRequest) (*PaymentResponse, error)
	// Promotion service methods
	ApplyPromotion(context.Context, *ApplyPromotionRequest) (*PromotionResponse, error)
	GetAvailablePromotions(context.Context, *UserRequest) (*PromotionsResponse, error)
	// Support service methods
	CreateSupportTicket(context.Context, *CreateTicketRequest) (*TicketResponse, error)
	GetTicketStatus(context.Context, *TicketRequest) (*TicketResponse, error)
	AddTicketMessage(context.Context, *AddTicketMessageRequest) (*TicketMessageResponse, error)
	// Notification service methods
	GetUserNotifications(context.Context, *UserRequest) (*NotificationsResponse, error)
	MarkNotificationAsRead(context.Context, *NotificationRequest) (*emptypb.Empty, error)
	SubscribeToOrderUpdates(*OrderSubscriptionRequest, grpc.ServerStreamingServer[OrderStatusUpdate]) error
	SubscribeToDriverLocation(*DriverLocationSubscriptionRequest, grpc.ServerStreamingServer[DriverLocationUpdate]) error
	SubscribeToNotifications(*NotificationSubscriptionRequest, grpc.ServerStreamingServer[NotificationEvent]) error
	SubscribeToNewOrders(*RestaurantSubscriptionRequest, grpc.ServerStreamingServer[NewOrderEvent]) error
	// AdminService
	GetSystemStats(context.Context, *SystemStatsRequest) (*SystemStatsResponse, error)
	GetActiveDrivers(context.Context, *DriverLocationRequest) (*ActiveDriversResponse, error)
	CreatePromotion(context.Context, *CreatePromotionRequest) (*PromotionInfo, error)
	UpdatePromotion(context.Context, *UpdatePromotionRequest) (*PromotionInfo, error)
	ManageUser(context.Context, *ManageUserRequest) (*UserResponse, error)
	GetSupportTickets(context.Context, *SupportTicketsRequest) (*SupportTicketsResponse, error)
	AssignTicket(context.Context, *AssignTicketRequest) (*TicketResponse, error)
	// RestaurantManagement
	CreateRestaurant(context.Context, *CreateRestaurantRequest) (*RestaurantResponse, error)
	UpdateRestaurant(context.Context, *UpdateRestaurantRequest) (*RestaurantResponse, error)
	CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItemResponse, error)
	UpdateMenuItem(context.Context, *UpdateMenuItemRequest) (*MenuItemResponse, error)
	DeleteMenuItem(context.Context, *MenuItemRequest) (*emptypb.Empty, error)
	GetPendingOrders(context.Context, *RestaurantRequest) (*RestaurantOrdersResponse, error)
	UpdateOrderPreparationStatus(context.Context, *UpdatePreparationStatusRequest) (*OrderStatusResponse, error)
	GetRestaurantAnalytics(context.Context, *RestaurantAnalyticsRequest) (*RestaurantAnalyticsResponse, error)
	mustEmbedUnimplementedFoodDeliveryGatewayServer()
}

// UnimplementedFoodDeliveryGatewayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFoodDeliveryGatewayServer struct{}

func (UnimplementedFoodDeliveryGatewayServer) RegisterUser(context.Context, *RegisterUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) LoginUser(context.Context, *LoginRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetUserProfile(context.Context, *UserRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProfile not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) UpdateUserProfile(context.Context, *UpdateUserProfileRequest) (*UserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) SearchRestaurants(context.Context, *SearchRestaurantsRequest) (*RestaurantsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchRestaurants not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetRestaurantDetails(context.Context, *RestaurantRequest) (*RestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantDetails not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetRestaurantMenu(context.Context, *RestaurantRequest) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantMenu not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) CreateOrder(context.Context, *CreateOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetOrderStatus(context.Context, *OrderRequest) (*OrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatus not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) UpdateOrderStatus(context.Context, *UpdateOrderStatusRequest) (*OrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetOrderHistory(context.Context, *OrderHistoryRequest) (*OrderHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderHistory not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) CancelOrder(context.Context, *OrderRequest) (*OrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) UpdateDriverLocation(context.Context, *UpdateDriverLocationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDriverLocation not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetAvailableOrders(context.Context, *DriverRequest) (*AvailableOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableOrders not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) AcceptOrder(context.Context, *AcceptOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrder not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) CompleteDelivery(context.Context, *CompleteDeliveryRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteDelivery not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) RefundPayment(context.Context, *RefundRequest) (*PaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundPayment not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) ApplyPromotion(context.Context, *ApplyPromotionRequest) (*PromotionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyPromotion not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetAvailablePromotions(context.Context, *UserRequest) (*PromotionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailablePromotions not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) CreateSupportTicket(context.Context, *CreateTicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupportTicket not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetTicketStatus(context.Context, *TicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicketStatus not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) AddTicketMessage(context.Context, *AddTicketMessageRequest) (*TicketMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTicketMessage not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetUserNotifications(context.Context, *UserRequest) (*NotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotifications not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) MarkNotificationAsRead(context.Context, *NotificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationAsRead not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) SubscribeToOrderUpdates(*OrderSubscriptionRequest, grpc.ServerStreamingServer[OrderStatusUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToOrderUpdates not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) SubscribeToDriverLocation(*DriverLocationSubscriptionRequest, grpc.ServerStreamingServer[DriverLocationUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToDriverLocation not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) SubscribeToNotifications(*NotificationSubscriptionRequest, grpc.ServerStreamingServer[NotificationEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToNotifications not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) SubscribeToNewOrders(*RestaurantSubscriptionRequest, grpc.ServerStreamingServer[NewOrderEvent]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToNewOrders not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetSystemStats(context.Context, *SystemStatsRequest) (*SystemStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemStats not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetActiveDrivers(context.Context, *DriverLocationRequest) (*ActiveDriversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveDrivers not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) CreatePromotion(context.Context, *CreatePromotionRequest) (*PromotionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePromotion not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) UpdatePromotion(context.Context, *UpdatePromotionRequest) (*PromotionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePromotion not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) ManageUser(context.Context, *ManageUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageUser not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetSupportTickets(context.Context, *SupportTicketsRequest) (*SupportTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupportTickets not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) AssignTicket(context.Context, *AssignTicketRequest) (*TicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignTicket not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) CreateRestaurant(context.Context, *CreateRestaurantRequest) (*RestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRestaurant not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) UpdateRestaurant(context.Context, *UpdateRestaurantRequest) (*RestaurantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRestaurant not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) CreateMenuItem(context.Context, *CreateMenuItemRequest) (*MenuItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMenuItem not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) UpdateMenuItem(context.Context, *UpdateMenuItemRequest) (*MenuItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMenuItem not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) DeleteMenuItem(context.Context, *MenuItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMenuItem not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetPendingOrders(context.Context, *RestaurantRequest) (*RestaurantOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingOrders not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) UpdateOrderPreparationStatus(context.Context, *UpdatePreparationStatusRequest) (*OrderStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderPreparationStatus not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) GetRestaurantAnalytics(context.Context, *RestaurantAnalyticsRequest) (*RestaurantAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRestaurantAnalytics not implemented")
}
func (UnimplementedFoodDeliveryGatewayServer) mustEmbedUnimplementedFoodDeliveryGatewayServer() {}
func (UnimplementedFoodDeliveryGatewayServer) testEmbeddedByValue()                             {}

// UnsafeFoodDeliveryGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FoodDeliveryGatewayServer will
// result in compilation errors.
type UnsafeFoodDeliveryGatewayServer interface {
	mustEmbedUnimplementedFoodDeliveryGatewayServer()
}

func RegisterFoodDeliveryGatewayServer(s grpc.ServiceRegistrar, srv FoodDeliveryGatewayServer) {
	// If the following call pancis, it indicates UnimplementedFoodDeliveryGatewayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FoodDeliveryGateway_ServiceDesc, srv)
}

func _FoodDeliveryGateway_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).LoginUser(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetUserProfile(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_UpdateUserProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).UpdateUserProfile(ctx, req.(*UpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_SearchRestaurants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRestaurantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).SearchRestaurants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_SearchRestaurants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).SearchRestaurants(ctx, req.(*SearchRestaurantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetRestaurantDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetRestaurantDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetRestaurantDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetRestaurantDetails(ctx, req.(*RestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetRestaurantMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetRestaurantMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetRestaurantMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetRestaurantMenu(ctx, req.(*RestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetOrderStatus(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_UpdateOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).UpdateOrderStatus(ctx, req.(*UpdateOrderStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetOrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetOrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetOrderHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetOrderHistory(ctx, req.(*OrderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_CancelOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).CancelOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_UpdateDriverLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDriverLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).UpdateDriverLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_UpdateDriverLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).UpdateDriverLocation(ctx, req.(*UpdateDriverLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetAvailableOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetAvailableOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetAvailableOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetAvailableOrders(ctx, req.(*DriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_AcceptOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).AcceptOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_AcceptOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).AcceptOrder(ctx, req.(*AcceptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_CompleteDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).CompleteDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_CompleteDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).CompleteDelivery(ctx, req.(*CompleteDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_RefundPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).RefundPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_RefundPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).RefundPayment(ctx, req.(*RefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_ApplyPromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyPromotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).ApplyPromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_ApplyPromotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).ApplyPromotion(ctx, req.(*ApplyPromotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetAvailablePromotions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetAvailablePromotions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetAvailablePromotions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetAvailablePromotions(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_CreateSupportTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).CreateSupportTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_CreateSupportTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).CreateSupportTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetTicketStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetTicketStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetTicketStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetTicketStatus(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_AddTicketMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTicketMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).AddTicketMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_AddTicketMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).AddTicketMessage(ctx, req.(*AddTicketMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetUserNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetUserNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetUserNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetUserNotifications(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_MarkNotificationAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).MarkNotificationAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_MarkNotificationAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).MarkNotificationAsRead(ctx, req.(*NotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_SubscribeToOrderUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrderSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoodDeliveryGatewayServer).SubscribeToOrderUpdates(m, &grpc.GenericServerStream[OrderSubscriptionRequest, OrderStatusUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodDeliveryGateway_SubscribeToOrderUpdatesServer = grpc.ServerStreamingServer[OrderStatusUpdate]

func _FoodDeliveryGateway_SubscribeToDriverLocation_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DriverLocationSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoodDeliveryGatewayServer).SubscribeToDriverLocation(m, &grpc.GenericServerStream[DriverLocationSubscriptionRequest, DriverLocationUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodDeliveryGateway_SubscribeToDriverLocationServer = grpc.ServerStreamingServer[DriverLocationUpdate]

func _FoodDeliveryGateway_SubscribeToNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NotificationSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoodDeliveryGatewayServer).SubscribeToNotifications(m, &grpc.GenericServerStream[NotificationSubscriptionRequest, NotificationEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodDeliveryGateway_SubscribeToNotificationsServer = grpc.ServerStreamingServer[NotificationEvent]

func _FoodDeliveryGateway_SubscribeToNewOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RestaurantSubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FoodDeliveryGatewayServer).SubscribeToNewOrders(m, &grpc.GenericServerStream[RestaurantSubscriptionRequest, NewOrderEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FoodDeliveryGateway_SubscribeToNewOrdersServer = grpc.ServerStreamingServer[NewOrderEvent]

func _FoodDeliveryGateway_GetSystemStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetSystemStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetSystemStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetSystemStats(ctx, req.(*SystemStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetActiveDrivers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetActiveDrivers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetActiveDrivers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetActiveDrivers(ctx, req.(*DriverLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_CreatePromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePromotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).CreatePromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_CreatePromotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).CreatePromotion(ctx, req.(*CreatePromotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_UpdatePromotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePromotionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).UpdatePromotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_UpdatePromotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).UpdatePromotion(ctx, req.(*UpdatePromotionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_ManageUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).ManageUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_ManageUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).ManageUser(ctx, req.(*ManageUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetSupportTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportTicketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetSupportTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetSupportTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetSupportTickets(ctx, req.(*SupportTicketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_AssignTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).AssignTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_AssignTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).AssignTicket(ctx, req.(*AssignTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_CreateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).CreateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_CreateRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).CreateRestaurant(ctx, req.(*CreateRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_UpdateRestaurant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).UpdateRestaurant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_UpdateRestaurant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).UpdateRestaurant(ctx, req.(*UpdateRestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_CreateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).CreateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_CreateMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).CreateMenuItem(ctx, req.(*CreateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_UpdateMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).UpdateMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_UpdateMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).UpdateMenuItem(ctx, req.(*UpdateMenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_DeleteMenuItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).DeleteMenuItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_DeleteMenuItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).DeleteMenuItem(ctx, req.(*MenuItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetPendingOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetPendingOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetPendingOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetPendingOrders(ctx, req.(*RestaurantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_UpdateOrderPreparationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePreparationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).UpdateOrderPreparationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_UpdateOrderPreparationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).UpdateOrderPreparationStatus(ctx, req.(*UpdatePreparationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FoodDeliveryGateway_GetRestaurantAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestaurantAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FoodDeliveryGatewayServer).GetRestaurantAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FoodDeliveryGateway_GetRestaurantAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FoodDeliveryGatewayServer).GetRestaurantAnalytics(ctx, req.(*RestaurantAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FoodDeliveryGateway_ServiceDesc is the grpc.ServiceDesc for FoodDeliveryGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FoodDeliveryGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fooddelivery.FoodDeliveryGateway",
	HandlerType: (*FoodDeliveryGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _FoodDeliveryGateway_RegisterUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _FoodDeliveryGateway_LoginUser_Handler,
		},
		{
			MethodName: "GetUserProfile",
			Handler:    _FoodDeliveryGateway_GetUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _FoodDeliveryGateway_UpdateUserProfile_Handler,
		},
		{
			MethodName: "SearchRestaurants",
			Handler:    _FoodDeliveryGateway_SearchRestaurants_Handler,
		},
		{
			MethodName: "GetRestaurantDetails",
			Handler:    _FoodDeliveryGateway_GetRestaurantDetails_Handler,
		},
		{
			MethodName: "GetRestaurantMenu",
			Handler:    _FoodDeliveryGateway_GetRestaurantMenu_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _FoodDeliveryGateway_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrderStatus",
			Handler:    _FoodDeliveryGateway_GetOrderStatus_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _FoodDeliveryGateway_UpdateOrderStatus_Handler,
		},
		{
			MethodName: "GetOrderHistory",
			Handler:    _FoodDeliveryGateway_GetOrderHistory_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _FoodDeliveryGateway_CancelOrder_Handler,
		},
		{
			MethodName: "UpdateDriverLocation",
			Handler:    _FoodDeliveryGateway_UpdateDriverLocation_Handler,
		},
		{
			MethodName: "GetAvailableOrders",
			Handler:    _FoodDeliveryGateway_GetAvailableOrders_Handler,
		},
		{
			MethodName: "AcceptOrder",
			Handler:    _FoodDeliveryGateway_AcceptOrder_Handler,
		},
		{
			MethodName: "CompleteDelivery",
			Handler:    _FoodDeliveryGateway_CompleteDelivery_Handler,
		},
		{
			MethodName: "ProcessPayment",
			Handler:    _FoodDeliveryGateway_ProcessPayment_Handler,
		},
		{
			MethodName: "RefundPayment",
			Handler:    _FoodDeliveryGateway_RefundPayment_Handler,
		},
		{
			MethodName: "ApplyPromotion",
			Handler:    _FoodDeliveryGateway_ApplyPromotion_Handler,
		},
		{
			MethodName: "GetAvailablePromotions",
			Handler:    _FoodDeliveryGateway_GetAvailablePromotions_Handler,
		},
		{
			MethodName: "CreateSupportTicket",
			Handler:    _FoodDeliveryGateway_CreateSupportTicket_Handler,
		},
		{
			MethodName: "GetTicketStatus",
			Handler:    _FoodDeliveryGateway_GetTicketStatus_Handler,
		},
		{
			MethodName: "AddTicketMessage",
			Handler:    _FoodDeliveryGateway_AddTicketMessage_Handler,
		},
		{
			MethodName: "GetUserNotifications",
			Handler:    _FoodDeliveryGateway_GetUserNotifications_Handler,
		},
		{
			MethodName: "MarkNotificationAsRead",
			Handler:    _FoodDeliveryGateway_MarkNotificationAsRead_Handler,
		},
		{
			MethodName: "GetSystemStats",
			Handler:    _FoodDeliveryGateway_GetSystemStats_Handler,
		},
		{
			MethodName: "GetActiveDrivers",
			Handler:    _FoodDeliveryGateway_GetActiveDrivers_Handler,
		},
		{
			MethodName: "CreatePromotion",
			Handler:    _FoodDeliveryGateway_CreatePromotion_Handler,
		},
		{
			MethodName: "UpdatePromotion",
			Handler:    _FoodDeliveryGateway_UpdatePromotion_Handler,
		},
		{
			MethodName: "ManageUser",
			Handler:    _FoodDeliveryGateway_ManageUser_Handler,
		},
		{
			MethodName: "GetSupportTickets",
			Handler:    _FoodDeliveryGateway_GetSupportTickets_Handler,
		},
		{
			MethodName: "AssignTicket",
			Handler:    _FoodDeliveryGateway_AssignTicket_Handler,
		},
		{
			MethodName: "CreateRestaurant",
			Handler:    _FoodDeliveryGateway_CreateRestaurant_Handler,
		},
		{
			MethodName: "UpdateRestaurant",
			Handler:    _FoodDeliveryGateway_UpdateRestaurant_Handler,
		},
		{
			MethodName: "CreateMenuItem",
			Handler:    _FoodDeliveryGateway_CreateMenuItem_Handler,
		},
		{
			MethodName: "UpdateMenuItem",
			Handler:    _FoodDeliveryGateway_UpdateMenuItem_Handler,
		},
		{
			MethodName: "DeleteMenuItem",
			Handler:    _FoodDeliveryGateway_DeleteMenuItem_Handler,
		},
		{
			MethodName: "GetPendingOrders",
			Handler:    _FoodDeliveryGateway_GetPendingOrders_Handler,
		},
		{
			MethodName: "UpdateOrderPreparationStatus",
			Handler:    _FoodDeliveryGateway_UpdateOrderPreparationStatus_Handler,
		},
		{
			MethodName: "GetRestaurantAnalytics",
			Handler:    _FoodDeliveryGateway_GetRestaurantAnalytics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToOrderUpdates",
			Handler:       _FoodDeliveryGateway_SubscribeToOrderUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToDriverLocation",
			Handler:       _FoodDeliveryGateway_SubscribeToDriverLocation_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToNotifications",
			Handler:       _FoodDeliveryGateway_SubscribeToNotifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeToNewOrders",
			Handler:       _FoodDeliveryGateway_SubscribeToNewOrders_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "doordash-service/service.proto",
}
