// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: ticket-service/service.proto

package pd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicketManagementService_CreateTicket_FullMethodName      = "/ticketmanagement.TicketManagementService/CreateTicket"
	TicketManagementService_GetTicket_FullMethodName         = "/ticketmanagement.TicketManagementService/GetTicket"
	TicketManagementService_GetTickets_FullMethodName        = "/ticketmanagement.TicketManagementService/GetTickets"
	TicketManagementService_UpdateTicket_FullMethodName      = "/ticketmanagement.TicketManagementService/UpdateTicket"
	TicketManagementService_DeleteTicket_FullMethodName      = "/ticketmanagement.TicketManagementService/DeleteTicket"
	TicketManagementService_CreateCustomer_FullMethodName    = "/ticketmanagement.TicketManagementService/CreateCustomer"
	TicketManagementService_GetCustomer_FullMethodName       = "/ticketmanagement.TicketManagementService/GetCustomer"
	TicketManagementService_GetCustomers_FullMethodName      = "/ticketmanagement.TicketManagementService/GetCustomers"
	TicketManagementService_UpdateCustomer_FullMethodName    = "/ticketmanagement.TicketManagementService/UpdateCustomer"
	TicketManagementService_DeleteCustomer_FullMethodName    = "/ticketmanagement.TicketManagementService/DeleteCustomer"
	TicketManagementService_BuyTicket_FullMethodName         = "/ticketmanagement.TicketManagementService/BuyTicket"
	TicketManagementService_GetInvoice_FullMethodName        = "/ticketmanagement.TicketManagementService/GetInvoice"
	TicketManagementService_GetInvoices_FullMethodName       = "/ticketmanagement.TicketManagementService/GetInvoices"
	TicketManagementService_GetInvoiceDetails_FullMethodName = "/ticketmanagement.TicketManagementService/GetInvoiceDetails"
)

// TicketManagementServiceClient is the client API for TicketManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketManagementServiceClient interface {
	CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error)
	GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	GetTickets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTicketsResponse, error)
	UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*Ticket, error)
	DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error)
	GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	GetCustomers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCustomersResponse, error)
	UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*Customer, error)
	DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BuyTicket(ctx context.Context, in *BuyTicketRequest, opts ...grpc.CallOption) (*BuyTicketResponse, error)
	GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error)
	GetInvoices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInvoicesResponse, error)
	GetInvoiceDetails(ctx context.Context, in *GetInvoiceDetailsRequest, opts ...grpc.CallOption) (*GetInvoiceDetailsResponse, error)
}

type ticketManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketManagementServiceClient(cc grpc.ClientConnInterface) TicketManagementServiceClient {
	return &ticketManagementServiceClient{cc}
}

func (c *ticketManagementServiceClient) CreateTicket(ctx context.Context, in *CreateTicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, TicketManagementService_CreateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) GetTicket(ctx context.Context, in *GetTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ticket)
	err := c.cc.Invoke(ctx, TicketManagementService_GetTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) GetTickets(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTicketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTicketsResponse)
	err := c.cc.Invoke(ctx, TicketManagementService_GetTickets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) UpdateTicket(ctx context.Context, in *UpdateTicketRequest, opts ...grpc.CallOption) (*Ticket, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ticket)
	err := c.cc.Invoke(ctx, TicketManagementService_UpdateTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) DeleteTicket(ctx context.Context, in *DeleteTicketRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TicketManagementService_DeleteTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) CreateCustomer(ctx context.Context, in *CreateCustomerRequest, opts ...grpc.CallOption) (*CreateCustomerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCustomerResponse)
	err := c.cc.Invoke(ctx, TicketManagementService_CreateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) GetCustomer(ctx context.Context, in *GetCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Customer)
	err := c.cc.Invoke(ctx, TicketManagementService_GetCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) GetCustomers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCustomersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomersResponse)
	err := c.cc.Invoke(ctx, TicketManagementService_GetCustomers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) UpdateCustomer(ctx context.Context, in *UpdateCustomerRequest, opts ...grpc.CallOption) (*Customer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Customer)
	err := c.cc.Invoke(ctx, TicketManagementService_UpdateCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) DeleteCustomer(ctx context.Context, in *DeleteCustomerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TicketManagementService_DeleteCustomer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) BuyTicket(ctx context.Context, in *BuyTicketRequest, opts ...grpc.CallOption) (*BuyTicketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BuyTicketResponse)
	err := c.cc.Invoke(ctx, TicketManagementService_BuyTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*Invoice, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Invoice)
	err := c.cc.Invoke(ctx, TicketManagementService_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) GetInvoices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetInvoicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoicesResponse)
	err := c.cc.Invoke(ctx, TicketManagementService_GetInvoices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketManagementServiceClient) GetInvoiceDetails(ctx context.Context, in *GetInvoiceDetailsRequest, opts ...grpc.CallOption) (*GetInvoiceDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInvoiceDetailsResponse)
	err := c.cc.Invoke(ctx, TicketManagementService_GetInvoiceDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketManagementServiceServer is the server API for TicketManagementService service.
// All implementations must embed UnimplementedTicketManagementServiceServer
// for forward compatibility.
type TicketManagementServiceServer interface {
	CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error)
	GetTicket(context.Context, *GetTicketRequest) (*Ticket, error)
	GetTickets(context.Context, *emptypb.Empty) (*GetTicketsResponse, error)
	UpdateTicket(context.Context, *UpdateTicketRequest) (*Ticket, error)
	DeleteTicket(context.Context, *DeleteTicketRequest) (*emptypb.Empty, error)
	CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error)
	GetCustomer(context.Context, *GetCustomerRequest) (*Customer, error)
	GetCustomers(context.Context, *emptypb.Empty) (*GetCustomersResponse, error)
	UpdateCustomer(context.Context, *UpdateCustomerRequest) (*Customer, error)
	DeleteCustomer(context.Context, *DeleteCustomerRequest) (*emptypb.Empty, error)
	BuyTicket(context.Context, *BuyTicketRequest) (*BuyTicketResponse, error)
	GetInvoice(context.Context, *GetInvoiceRequest) (*Invoice, error)
	GetInvoices(context.Context, *emptypb.Empty) (*GetInvoicesResponse, error)
	GetInvoiceDetails(context.Context, *GetInvoiceDetailsRequest) (*GetInvoiceDetailsResponse, error)
	mustEmbedUnimplementedTicketManagementServiceServer()
}

// UnimplementedTicketManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketManagementServiceServer struct{}

func (UnimplementedTicketManagementServiceServer) CreateTicket(context.Context, *CreateTicketRequest) (*CreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedTicketManagementServiceServer) GetTicket(context.Context, *GetTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTicket not implemented")
}
func (UnimplementedTicketManagementServiceServer) GetTickets(context.Context, *emptypb.Empty) (*GetTicketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickets not implemented")
}
func (UnimplementedTicketManagementServiceServer) UpdateTicket(context.Context, *UpdateTicketRequest) (*Ticket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTicket not implemented")
}
func (UnimplementedTicketManagementServiceServer) DeleteTicket(context.Context, *DeleteTicketRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicket not implemented")
}
func (UnimplementedTicketManagementServiceServer) CreateCustomer(context.Context, *CreateCustomerRequest) (*CreateCustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedTicketManagementServiceServer) GetCustomer(context.Context, *GetCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomer not implemented")
}
func (UnimplementedTicketManagementServiceServer) GetCustomers(context.Context, *emptypb.Empty) (*GetCustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomers not implemented")
}
func (UnimplementedTicketManagementServiceServer) UpdateCustomer(context.Context, *UpdateCustomerRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomer not implemented")
}
func (UnimplementedTicketManagementServiceServer) DeleteCustomer(context.Context, *DeleteCustomerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomer not implemented")
}
func (UnimplementedTicketManagementServiceServer) BuyTicket(context.Context, *BuyTicketRequest) (*BuyTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyTicket not implemented")
}
func (UnimplementedTicketManagementServiceServer) GetInvoice(context.Context, *GetInvoiceRequest) (*Invoice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedTicketManagementServiceServer) GetInvoices(context.Context, *emptypb.Empty) (*GetInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoices not implemented")
}
func (UnimplementedTicketManagementServiceServer) GetInvoiceDetails(context.Context, *GetInvoiceDetailsRequest) (*GetInvoiceDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceDetails not implemented")
}
func (UnimplementedTicketManagementServiceServer) mustEmbedUnimplementedTicketManagementServiceServer() {
}
func (UnimplementedTicketManagementServiceServer) testEmbeddedByValue() {}

// UnsafeTicketManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketManagementServiceServer will
// result in compilation errors.
type UnsafeTicketManagementServiceServer interface {
	mustEmbedUnimplementedTicketManagementServiceServer()
}

func RegisterTicketManagementServiceServer(s grpc.ServiceRegistrar, srv TicketManagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicketManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicketManagementService_ServiceDesc, srv)
}

func _TicketManagementService_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_CreateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).CreateTicket(ctx, req.(*CreateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_GetTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).GetTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_GetTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).GetTicket(ctx, req.(*GetTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_GetTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).GetTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_GetTickets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).GetTickets(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_UpdateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).UpdateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_UpdateTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).UpdateTicket(ctx, req.(*UpdateTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_DeleteTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).DeleteTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_DeleteTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).DeleteTicket(ctx, req.(*DeleteTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_CreateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).CreateCustomer(ctx, req.(*CreateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_GetCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).GetCustomer(ctx, req.(*GetCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_GetCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).GetCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_GetCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).GetCustomers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_UpdateCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).UpdateCustomer(ctx, req.(*UpdateCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_DeleteCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).DeleteCustomer(ctx, req.(*DeleteCustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_BuyTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuyTicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).BuyTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_BuyTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).BuyTicket(ctx, req.(*BuyTicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).GetInvoice(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_GetInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).GetInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_GetInvoices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).GetInvoices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketManagementService_GetInvoiceDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketManagementServiceServer).GetInvoiceDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketManagementService_GetInvoiceDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketManagementServiceServer).GetInvoiceDetails(ctx, req.(*GetInvoiceDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketManagementService_ServiceDesc is the grpc.ServiceDesc for TicketManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketmanagement.TicketManagementService",
	HandlerType: (*TicketManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _TicketManagementService_CreateTicket_Handler,
		},
		{
			MethodName: "GetTicket",
			Handler:    _TicketManagementService_GetTicket_Handler,
		},
		{
			MethodName: "GetTickets",
			Handler:    _TicketManagementService_GetTickets_Handler,
		},
		{
			MethodName: "UpdateTicket",
			Handler:    _TicketManagementService_UpdateTicket_Handler,
		},
		{
			MethodName: "DeleteTicket",
			Handler:    _TicketManagementService_DeleteTicket_Handler,
		},
		{
			MethodName: "CreateCustomer",
			Handler:    _TicketManagementService_CreateCustomer_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _TicketManagementService_GetCustomer_Handler,
		},
		{
			MethodName: "GetCustomers",
			Handler:    _TicketManagementService_GetCustomers_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _TicketManagementService_UpdateCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _TicketManagementService_DeleteCustomer_Handler,
		},
		{
			MethodName: "BuyTicket",
			Handler:    _TicketManagementService_BuyTicket_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _TicketManagementService_GetInvoice_Handler,
		},
		{
			MethodName: "GetInvoices",
			Handler:    _TicketManagementService_GetInvoices_Handler,
		},
		{
			MethodName: "GetInvoiceDetails",
			Handler:    _TicketManagementService_GetInvoiceDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticket-service/service.proto",
}
