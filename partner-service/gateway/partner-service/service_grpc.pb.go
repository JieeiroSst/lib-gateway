// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: partner-service/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PartnershipService_CreatePartner_FullMethodName                 = "/partnership.PartnershipService/CreatePartner"
	PartnershipService_GetPartner_FullMethodName                    = "/partnership.PartnershipService/GetPartner"
	PartnershipService_ListPartners_FullMethodName                  = "/partnership.PartnershipService/ListPartners"
	PartnershipService_UpdatePartner_FullMethodName                 = "/partnership.PartnershipService/UpdatePartner"
	PartnershipService_DeletePartner_FullMethodName                 = "/partnership.PartnershipService/DeletePartner"
	PartnershipService_CreatePartnership_FullMethodName             = "/partnership.PartnershipService/CreatePartnership"
	PartnershipService_GetPartnership_FullMethodName                = "/partnership.PartnershipService/GetPartnership"
	PartnershipService_ListPartnerships_FullMethodName              = "/partnership.PartnershipService/ListPartnerships"
	PartnershipService_UpdatePartnership_FullMethodName             = "/partnership.PartnershipService/UpdatePartnership"
	PartnershipService_DeletePartnership_FullMethodName             = "/partnership.PartnershipService/DeletePartnership"
	PartnershipService_GetProject_FullMethodName                    = "/partnership.PartnershipService/GetProject"
	PartnershipService_ListProjects_FullMethodName                  = "/partnership.PartnershipService/ListProjects"
	PartnershipService_AddPartnerToPartnership_FullMethodName       = "/partnership.PartnershipService/AddPartnerToPartnership"
	PartnershipService_RemovePartnerFromPartnership_FullMethodName  = "/partnership.PartnershipService/RemovePartnerFromPartnership"
	PartnershipService_ListPartnershipParticipations_FullMethodName = "/partnership.PartnershipService/ListPartnershipParticipations"
)

// PartnershipServiceClient is the client API for PartnershipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartnershipServiceClient interface {
	CreatePartner(ctx context.Context, in *CreatePartnerRequest, opts ...grpc.CallOption) (*Partner, error)
	GetPartner(ctx context.Context, in *GetPartnerRequest, opts ...grpc.CallOption) (*Partner, error)
	ListPartners(ctx context.Context, in *ListPartnersRequest, opts ...grpc.CallOption) (*ListPartnersResponse, error)
	UpdatePartner(ctx context.Context, in *UpdatePartnerRequest, opts ...grpc.CallOption) (*Partner, error)
	DeletePartner(ctx context.Context, in *DeletePartnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreatePartnership(ctx context.Context, in *CreatePartnershipRequest, opts ...grpc.CallOption) (*Partnership, error)
	GetPartnership(ctx context.Context, in *GetPartnershipRequest, opts ...grpc.CallOption) (*Partnership, error)
	ListPartnerships(ctx context.Context, in *ListPartnershipsRequest, opts ...grpc.CallOption) (*ListPartnershipsResponse, error)
	UpdatePartnership(ctx context.Context, in *UpdatePartnershipRequest, opts ...grpc.CallOption) (*Partnership, error)
	DeletePartnership(ctx context.Context, in *DeletePartnershipRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	AddPartnerToPartnership(ctx context.Context, in *AddPartnerToPartnershipRequest, opts ...grpc.CallOption) (*PartnershipParticipation, error)
	RemovePartnerFromPartnership(ctx context.Context, in *RemovePartnerFromPartnershipRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPartnershipParticipations(ctx context.Context, in *ListPartnershipParticipationsRequest, opts ...grpc.CallOption) (*ListPartnershipParticipationsResponse, error)
}

type partnershipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartnershipServiceClient(cc grpc.ClientConnInterface) PartnershipServiceClient {
	return &partnershipServiceClient{cc}
}

func (c *partnershipServiceClient) CreatePartner(ctx context.Context, in *CreatePartnerRequest, opts ...grpc.CallOption) (*Partner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Partner)
	err := c.cc.Invoke(ctx, PartnershipService_CreatePartner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) GetPartner(ctx context.Context, in *GetPartnerRequest, opts ...grpc.CallOption) (*Partner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Partner)
	err := c.cc.Invoke(ctx, PartnershipService_GetPartner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) ListPartners(ctx context.Context, in *ListPartnersRequest, opts ...grpc.CallOption) (*ListPartnersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPartnersResponse)
	err := c.cc.Invoke(ctx, PartnershipService_ListPartners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) UpdatePartner(ctx context.Context, in *UpdatePartnerRequest, opts ...grpc.CallOption) (*Partner, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Partner)
	err := c.cc.Invoke(ctx, PartnershipService_UpdatePartner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) DeletePartner(ctx context.Context, in *DeletePartnerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartnershipService_DeletePartner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) CreatePartnership(ctx context.Context, in *CreatePartnershipRequest, opts ...grpc.CallOption) (*Partnership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Partnership)
	err := c.cc.Invoke(ctx, PartnershipService_CreatePartnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) GetPartnership(ctx context.Context, in *GetPartnershipRequest, opts ...grpc.CallOption) (*Partnership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Partnership)
	err := c.cc.Invoke(ctx, PartnershipService_GetPartnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) ListPartnerships(ctx context.Context, in *ListPartnershipsRequest, opts ...grpc.CallOption) (*ListPartnershipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPartnershipsResponse)
	err := c.cc.Invoke(ctx, PartnershipService_ListPartnerships_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) UpdatePartnership(ctx context.Context, in *UpdatePartnershipRequest, opts ...grpc.CallOption) (*Partnership, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Partnership)
	err := c.cc.Invoke(ctx, PartnershipService_UpdatePartnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) DeletePartnership(ctx context.Context, in *DeletePartnershipRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartnershipService_DeletePartnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Project)
	err := c.cc.Invoke(ctx, PartnershipService_GetProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, PartnershipService_ListProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) AddPartnerToPartnership(ctx context.Context, in *AddPartnerToPartnershipRequest, opts ...grpc.CallOption) (*PartnershipParticipation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PartnershipParticipation)
	err := c.cc.Invoke(ctx, PartnershipService_AddPartnerToPartnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) RemovePartnerFromPartnership(ctx context.Context, in *RemovePartnerFromPartnershipRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PartnershipService_RemovePartnerFromPartnership_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnershipServiceClient) ListPartnershipParticipations(ctx context.Context, in *ListPartnershipParticipationsRequest, opts ...grpc.CallOption) (*ListPartnershipParticipationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPartnershipParticipationsResponse)
	err := c.cc.Invoke(ctx, PartnershipService_ListPartnershipParticipations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnershipServiceServer is the server API for PartnershipService service.
// All implementations must embed UnimplementedPartnershipServiceServer
// for forward compatibility.
type PartnershipServiceServer interface {
	CreatePartner(context.Context, *CreatePartnerRequest) (*Partner, error)
	GetPartner(context.Context, *GetPartnerRequest) (*Partner, error)
	ListPartners(context.Context, *ListPartnersRequest) (*ListPartnersResponse, error)
	UpdatePartner(context.Context, *UpdatePartnerRequest) (*Partner, error)
	DeletePartner(context.Context, *DeletePartnerRequest) (*emptypb.Empty, error)
	CreatePartnership(context.Context, *CreatePartnershipRequest) (*Partnership, error)
	GetPartnership(context.Context, *GetPartnershipRequest) (*Partnership, error)
	ListPartnerships(context.Context, *ListPartnershipsRequest) (*ListPartnershipsResponse, error)
	UpdatePartnership(context.Context, *UpdatePartnershipRequest) (*Partnership, error)
	DeletePartnership(context.Context, *DeletePartnershipRequest) (*emptypb.Empty, error)
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	AddPartnerToPartnership(context.Context, *AddPartnerToPartnershipRequest) (*PartnershipParticipation, error)
	RemovePartnerFromPartnership(context.Context, *RemovePartnerFromPartnershipRequest) (*emptypb.Empty, error)
	ListPartnershipParticipations(context.Context, *ListPartnershipParticipationsRequest) (*ListPartnershipParticipationsResponse, error)
	mustEmbedUnimplementedPartnershipServiceServer()
}

// UnimplementedPartnershipServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPartnershipServiceServer struct{}

func (UnimplementedPartnershipServiceServer) CreatePartner(context.Context, *CreatePartnerRequest) (*Partner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartner not implemented")
}
func (UnimplementedPartnershipServiceServer) GetPartner(context.Context, *GetPartnerRequest) (*Partner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartner not implemented")
}
func (UnimplementedPartnershipServiceServer) ListPartners(context.Context, *ListPartnersRequest) (*ListPartnersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartners not implemented")
}
func (UnimplementedPartnershipServiceServer) UpdatePartner(context.Context, *UpdatePartnerRequest) (*Partner, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartner not implemented")
}
func (UnimplementedPartnershipServiceServer) DeletePartner(context.Context, *DeletePartnerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartner not implemented")
}
func (UnimplementedPartnershipServiceServer) CreatePartnership(context.Context, *CreatePartnershipRequest) (*Partnership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartnership not implemented")
}
func (UnimplementedPartnershipServiceServer) GetPartnership(context.Context, *GetPartnershipRequest) (*Partnership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartnership not implemented")
}
func (UnimplementedPartnershipServiceServer) ListPartnerships(context.Context, *ListPartnershipsRequest) (*ListPartnershipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartnerships not implemented")
}
func (UnimplementedPartnershipServiceServer) UpdatePartnership(context.Context, *UpdatePartnershipRequest) (*Partnership, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartnership not implemented")
}
func (UnimplementedPartnershipServiceServer) DeletePartnership(context.Context, *DeletePartnershipRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartnership not implemented")
}
func (UnimplementedPartnershipServiceServer) GetProject(context.Context, *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedPartnershipServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedPartnershipServiceServer) AddPartnerToPartnership(context.Context, *AddPartnerToPartnershipRequest) (*PartnershipParticipation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPartnerToPartnership not implemented")
}
func (UnimplementedPartnershipServiceServer) RemovePartnerFromPartnership(context.Context, *RemovePartnerFromPartnershipRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePartnerFromPartnership not implemented")
}
func (UnimplementedPartnershipServiceServer) ListPartnershipParticipations(context.Context, *ListPartnershipParticipationsRequest) (*ListPartnershipParticipationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPartnershipParticipations not implemented")
}
func (UnimplementedPartnershipServiceServer) mustEmbedUnimplementedPartnershipServiceServer() {}
func (UnimplementedPartnershipServiceServer) testEmbeddedByValue()                            {}

// UnsafePartnershipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartnershipServiceServer will
// result in compilation errors.
type UnsafePartnershipServiceServer interface {
	mustEmbedUnimplementedPartnershipServiceServer()
}

func RegisterPartnershipServiceServer(s grpc.ServiceRegistrar, srv PartnershipServiceServer) {
	// If the following call pancis, it indicates UnimplementedPartnershipServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PartnershipService_ServiceDesc, srv)
}

func _PartnershipService_CreatePartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).CreatePartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_CreatePartner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).CreatePartner(ctx, req.(*CreatePartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_GetPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).GetPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_GetPartner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).GetPartner(ctx, req.(*GetPartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_ListPartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartnersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).ListPartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_ListPartners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).ListPartners(ctx, req.(*ListPartnersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_UpdatePartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).UpdatePartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_UpdatePartner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).UpdatePartner(ctx, req.(*UpdatePartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_DeletePartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).DeletePartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_DeletePartner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).DeletePartner(ctx, req.(*DeletePartnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_CreatePartnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).CreatePartnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_CreatePartnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).CreatePartnership(ctx, req.(*CreatePartnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_GetPartnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).GetPartnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_GetPartnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).GetPartnership(ctx, req.(*GetPartnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_ListPartnerships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartnershipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).ListPartnerships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_ListPartnerships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).ListPartnerships(ctx, req.(*ListPartnershipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_UpdatePartnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).UpdatePartnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_UpdatePartnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).UpdatePartnership(ctx, req.(*UpdatePartnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_DeletePartnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).DeletePartnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_DeletePartnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).DeletePartnership(ctx, req.(*DeletePartnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_AddPartnerToPartnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPartnerToPartnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).AddPartnerToPartnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_AddPartnerToPartnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).AddPartnerToPartnership(ctx, req.(*AddPartnerToPartnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_RemovePartnerFromPartnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePartnerFromPartnershipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).RemovePartnerFromPartnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_RemovePartnerFromPartnership_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).RemovePartnerFromPartnership(ctx, req.(*RemovePartnerFromPartnershipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnershipService_ListPartnershipParticipations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPartnershipParticipationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnershipServiceServer).ListPartnershipParticipations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PartnershipService_ListPartnershipParticipations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnershipServiceServer).ListPartnershipParticipations(ctx, req.(*ListPartnershipParticipationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PartnershipService_ServiceDesc is the grpc.ServiceDesc for PartnershipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartnershipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "partnership.PartnershipService",
	HandlerType: (*PartnershipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePartner",
			Handler:    _PartnershipService_CreatePartner_Handler,
		},
		{
			MethodName: "GetPartner",
			Handler:    _PartnershipService_GetPartner_Handler,
		},
		{
			MethodName: "ListPartners",
			Handler:    _PartnershipService_ListPartners_Handler,
		},
		{
			MethodName: "UpdatePartner",
			Handler:    _PartnershipService_UpdatePartner_Handler,
		},
		{
			MethodName: "DeletePartner",
			Handler:    _PartnershipService_DeletePartner_Handler,
		},
		{
			MethodName: "CreatePartnership",
			Handler:    _PartnershipService_CreatePartnership_Handler,
		},
		{
			MethodName: "GetPartnership",
			Handler:    _PartnershipService_GetPartnership_Handler,
		},
		{
			MethodName: "ListPartnerships",
			Handler:    _PartnershipService_ListPartnerships_Handler,
		},
		{
			MethodName: "UpdatePartnership",
			Handler:    _PartnershipService_UpdatePartnership_Handler,
		},
		{
			MethodName: "DeletePartnership",
			Handler:    _PartnershipService_DeletePartnership_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _PartnershipService_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _PartnershipService_ListProjects_Handler,
		},
		{
			MethodName: "AddPartnerToPartnership",
			Handler:    _PartnershipService_AddPartnerToPartnership_Handler,
		},
		{
			MethodName: "RemovePartnerFromPartnership",
			Handler:    _PartnershipService_RemovePartnerFromPartnership_Handler,
		},
		{
			MethodName: "ListPartnershipParticipations",
			Handler:    _PartnershipService_ListPartnershipParticipations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "partner-service/service.proto",
}
