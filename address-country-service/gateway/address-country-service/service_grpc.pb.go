// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: address-country-service/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AddressService_CreateCountry_FullMethodName          = "/address_country.AddressService/CreateCountry"
	AddressService_GetCountry_FullMethodName             = "/address_country.AddressService/GetCountry"
	AddressService_ListCountries_FullMethodName          = "/address_country.AddressService/ListCountries"
	AddressService_UpdateCountry_FullMethodName          = "/address_country.AddressService/UpdateCountry"
	AddressService_DeleteCountry_FullMethodName          = "/address_country.AddressService/DeleteCountry"
	AddressService_CreateProvince_FullMethodName         = "/address_country.AddressService/CreateProvince"
	AddressService_GetProvince_FullMethodName            = "/address_country.AddressService/GetProvince"
	AddressService_ListProvincesByCountry_FullMethodName = "/address_country.AddressService/ListProvincesByCountry"
	AddressService_UpdateProvince_FullMethodName         = "/address_country.AddressService/UpdateProvince"
	AddressService_DeleteProvince_FullMethodName         = "/address_country.AddressService/DeleteProvince"
	AddressService_CreateCity_FullMethodName             = "/address_country.AddressService/CreateCity"
	AddressService_GetCity_FullMethodName                = "/address_country.AddressService/GetCity"
	AddressService_ListCitiesByProvince_FullMethodName   = "/address_country.AddressService/ListCitiesByProvince"
	AddressService_UpdateCity_FullMethodName             = "/address_country.AddressService/UpdateCity"
	AddressService_DeleteCity_FullMethodName             = "/address_country.AddressService/DeleteCity"
	AddressService_CreateDistrict_FullMethodName         = "/address_country.AddressService/CreateDistrict"
	AddressService_GetDistrict_FullMethodName            = "/address_country.AddressService/GetDistrict"
	AddressService_ListDistrictsByCity_FullMethodName    = "/address_country.AddressService/ListDistrictsByCity"
	AddressService_UpdateDistrict_FullMethodName         = "/address_country.AddressService/UpdateDistrict"
	AddressService_DeleteDistrict_FullMethodName         = "/address_country.AddressService/DeleteDistrict"
	AddressService_CreateVillage_FullMethodName          = "/address_country.AddressService/CreateVillage"
	AddressService_GetVillage_FullMethodName             = "/address_country.AddressService/GetVillage"
	AddressService_ListVillagesByDistrict_FullMethodName = "/address_country.AddressService/ListVillagesByDistrict"
	AddressService_UpdateVillage_FullMethodName          = "/address_country.AddressService/UpdateVillage"
	AddressService_DeleteVillage_FullMethodName          = "/address_country.AddressService/DeleteVillage"
	AddressService_CreateAddress_FullMethodName          = "/address_country.AddressService/CreateAddress"
	AddressService_GetAddress_FullMethodName             = "/address_country.AddressService/GetAddress"
	AddressService_ListAddresses_FullMethodName          = "/address_country.AddressService/ListAddresses"
	AddressService_UpdateAddress_FullMethodName          = "/address_country.AddressService/UpdateAddress"
	AddressService_DeleteAddress_FullMethodName          = "/address_country.AddressService/DeleteAddress"
)

// AddressServiceClient is the client API for AddressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Address service definition
type AddressServiceClient interface {
	// Country operations
	CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error)
	GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error)
	ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error)
	UpdateCountry(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error)
	DeleteCountry(ctx context.Context, in *DeleteCountryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Province/State operations
	CreateProvince(ctx context.Context, in *CreateProvinceRequest, opts ...grpc.CallOption) (*ProvinceResponse, error)
	GetProvince(ctx context.Context, in *GetProvinceRequest, opts ...grpc.CallOption) (*ProvinceResponse, error)
	ListProvincesByCountry(ctx context.Context, in *ListProvincesByCountryRequest, opts ...grpc.CallOption) (*ListProvincesResponse, error)
	UpdateProvince(ctx context.Context, in *UpdateProvinceRequest, opts ...grpc.CallOption) (*ProvinceResponse, error)
	DeleteProvince(ctx context.Context, in *DeleteProvinceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// City operations
	CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CityResponse, error)
	GetCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*CityResponse, error)
	ListCitiesByProvince(ctx context.Context, in *ListCitiesByProvinceRequest, opts ...grpc.CallOption) (*ListCitiesResponse, error)
	UpdateCity(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*CityResponse, error)
	DeleteCity(ctx context.Context, in *DeleteCityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// District operations
	CreateDistrict(ctx context.Context, in *CreateDistrictRequest, opts ...grpc.CallOption) (*DistrictResponse, error)
	GetDistrict(ctx context.Context, in *GetDistrictRequest, opts ...grpc.CallOption) (*DistrictResponse, error)
	ListDistrictsByCity(ctx context.Context, in *ListDistrictsByCityRequest, opts ...grpc.CallOption) (*ListDistrictsResponse, error)
	UpdateDistrict(ctx context.Context, in *UpdateDistrictRequest, opts ...grpc.CallOption) (*DistrictResponse, error)
	DeleteDistrict(ctx context.Context, in *DeleteDistrictRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Village/Ward operations
	CreateVillage(ctx context.Context, in *CreateVillageRequest, opts ...grpc.CallOption) (*VillageResponse, error)
	GetVillage(ctx context.Context, in *GetVillageRequest, opts ...grpc.CallOption) (*VillageResponse, error)
	ListVillagesByDistrict(ctx context.Context, in *ListVillagesByDistrictRequest, opts ...grpc.CallOption) (*ListVillagesResponse, error)
	UpdateVillage(ctx context.Context, in *UpdateVillageRequest, opts ...grpc.CallOption) (*VillageResponse, error)
	DeleteVillage(ctx context.Context, in *DeleteVillageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Address operations
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type addressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAddressServiceClient(cc grpc.ClientConnInterface) AddressServiceClient {
	return &addressServiceClient{cc}
}

func (c *addressServiceClient) CreateCountry(ctx context.Context, in *CreateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountryResponse)
	err := c.cc.Invoke(ctx, AddressService_CreateCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetCountry(ctx context.Context, in *GetCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountryResponse)
	err := c.cc.Invoke(ctx, AddressService_GetCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) ListCountries(ctx context.Context, in *ListCountriesRequest, opts ...grpc.CallOption) (*ListCountriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCountriesResponse)
	err := c.cc.Invoke(ctx, AddressService_ListCountries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) UpdateCountry(ctx context.Context, in *UpdateCountryRequest, opts ...grpc.CallOption) (*CountryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountryResponse)
	err := c.cc.Invoke(ctx, AddressService_UpdateCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) DeleteCountry(ctx context.Context, in *DeleteCountryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AddressService_DeleteCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CreateProvince(ctx context.Context, in *CreateProvinceRequest, opts ...grpc.CallOption) (*ProvinceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvinceResponse)
	err := c.cc.Invoke(ctx, AddressService_CreateProvince_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetProvince(ctx context.Context, in *GetProvinceRequest, opts ...grpc.CallOption) (*ProvinceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvinceResponse)
	err := c.cc.Invoke(ctx, AddressService_GetProvince_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) ListProvincesByCountry(ctx context.Context, in *ListProvincesByCountryRequest, opts ...grpc.CallOption) (*ListProvincesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProvincesResponse)
	err := c.cc.Invoke(ctx, AddressService_ListProvincesByCountry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) UpdateProvince(ctx context.Context, in *UpdateProvinceRequest, opts ...grpc.CallOption) (*ProvinceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProvinceResponse)
	err := c.cc.Invoke(ctx, AddressService_UpdateProvince_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) DeleteProvince(ctx context.Context, in *DeleteProvinceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AddressService_DeleteProvince_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*CityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityResponse)
	err := c.cc.Invoke(ctx, AddressService_CreateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetCity(ctx context.Context, in *GetCityRequest, opts ...grpc.CallOption) (*CityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityResponse)
	err := c.cc.Invoke(ctx, AddressService_GetCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) ListCitiesByProvince(ctx context.Context, in *ListCitiesByProvinceRequest, opts ...grpc.CallOption) (*ListCitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCitiesResponse)
	err := c.cc.Invoke(ctx, AddressService_ListCitiesByProvince_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) UpdateCity(ctx context.Context, in *UpdateCityRequest, opts ...grpc.CallOption) (*CityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CityResponse)
	err := c.cc.Invoke(ctx, AddressService_UpdateCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) DeleteCity(ctx context.Context, in *DeleteCityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AddressService_DeleteCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CreateDistrict(ctx context.Context, in *CreateDistrictRequest, opts ...grpc.CallOption) (*DistrictResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistrictResponse)
	err := c.cc.Invoke(ctx, AddressService_CreateDistrict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetDistrict(ctx context.Context, in *GetDistrictRequest, opts ...grpc.CallOption) (*DistrictResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistrictResponse)
	err := c.cc.Invoke(ctx, AddressService_GetDistrict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) ListDistrictsByCity(ctx context.Context, in *ListDistrictsByCityRequest, opts ...grpc.CallOption) (*ListDistrictsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDistrictsResponse)
	err := c.cc.Invoke(ctx, AddressService_ListDistrictsByCity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) UpdateDistrict(ctx context.Context, in *UpdateDistrictRequest, opts ...grpc.CallOption) (*DistrictResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DistrictResponse)
	err := c.cc.Invoke(ctx, AddressService_UpdateDistrict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) DeleteDistrict(ctx context.Context, in *DeleteDistrictRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AddressService_DeleteDistrict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CreateVillage(ctx context.Context, in *CreateVillageRequest, opts ...grpc.CallOption) (*VillageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VillageResponse)
	err := c.cc.Invoke(ctx, AddressService_CreateVillage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetVillage(ctx context.Context, in *GetVillageRequest, opts ...grpc.CallOption) (*VillageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VillageResponse)
	err := c.cc.Invoke(ctx, AddressService_GetVillage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) ListVillagesByDistrict(ctx context.Context, in *ListVillagesByDistrictRequest, opts ...grpc.CallOption) (*ListVillagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVillagesResponse)
	err := c.cc.Invoke(ctx, AddressService_ListVillagesByDistrict_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) UpdateVillage(ctx context.Context, in *UpdateVillageRequest, opts ...grpc.CallOption) (*VillageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VillageResponse)
	err := c.cc.Invoke(ctx, AddressService_UpdateVillage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) DeleteVillage(ctx context.Context, in *DeleteVillageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AddressService_DeleteVillage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, AddressService_CreateAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, AddressService_GetAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) ListAddresses(ctx context.Context, in *ListAddressesRequest, opts ...grpc.CallOption) (*ListAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAddressesResponse)
	err := c.cc.Invoke(ctx, AddressService_ListAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, AddressService_UpdateAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *addressServiceClient) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AddressService_DeleteAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddressServiceServer is the server API for AddressService service.
// All implementations must embed UnimplementedAddressServiceServer
// for forward compatibility.
//
// Address service definition
type AddressServiceServer interface {
	// Country operations
	CreateCountry(context.Context, *CreateCountryRequest) (*CountryResponse, error)
	GetCountry(context.Context, *GetCountryRequest) (*CountryResponse, error)
	ListCountries(context.Context, *ListCountriesRequest) (*ListCountriesResponse, error)
	UpdateCountry(context.Context, *UpdateCountryRequest) (*CountryResponse, error)
	DeleteCountry(context.Context, *DeleteCountryRequest) (*emptypb.Empty, error)
	// Province/State operations
	CreateProvince(context.Context, *CreateProvinceRequest) (*ProvinceResponse, error)
	GetProvince(context.Context, *GetProvinceRequest) (*ProvinceResponse, error)
	ListProvincesByCountry(context.Context, *ListProvincesByCountryRequest) (*ListProvincesResponse, error)
	UpdateProvince(context.Context, *UpdateProvinceRequest) (*ProvinceResponse, error)
	DeleteProvince(context.Context, *DeleteProvinceRequest) (*emptypb.Empty, error)
	// City operations
	CreateCity(context.Context, *CreateCityRequest) (*CityResponse, error)
	GetCity(context.Context, *GetCityRequest) (*CityResponse, error)
	ListCitiesByProvince(context.Context, *ListCitiesByProvinceRequest) (*ListCitiesResponse, error)
	UpdateCity(context.Context, *UpdateCityRequest) (*CityResponse, error)
	DeleteCity(context.Context, *DeleteCityRequest) (*emptypb.Empty, error)
	// District operations
	CreateDistrict(context.Context, *CreateDistrictRequest) (*DistrictResponse, error)
	GetDistrict(context.Context, *GetDistrictRequest) (*DistrictResponse, error)
	ListDistrictsByCity(context.Context, *ListDistrictsByCityRequest) (*ListDistrictsResponse, error)
	UpdateDistrict(context.Context, *UpdateDistrictRequest) (*DistrictResponse, error)
	DeleteDistrict(context.Context, *DeleteDistrictRequest) (*emptypb.Empty, error)
	// Village/Ward operations
	CreateVillage(context.Context, *CreateVillageRequest) (*VillageResponse, error)
	GetVillage(context.Context, *GetVillageRequest) (*VillageResponse, error)
	ListVillagesByDistrict(context.Context, *ListVillagesByDistrictRequest) (*ListVillagesResponse, error)
	UpdateVillage(context.Context, *UpdateVillageRequest) (*VillageResponse, error)
	DeleteVillage(context.Context, *DeleteVillageRequest) (*emptypb.Empty, error)
	// Address operations
	CreateAddress(context.Context, *CreateAddressRequest) (*AddressResponse, error)
	GetAddress(context.Context, *GetAddressRequest) (*AddressResponse, error)
	ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error)
	UpdateAddress(context.Context, *UpdateAddressRequest) (*AddressResponse, error)
	DeleteAddress(context.Context, *DeleteAddressRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedAddressServiceServer()
}

// UnimplementedAddressServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAddressServiceServer struct{}

func (UnimplementedAddressServiceServer) CreateCountry(context.Context, *CreateCountryRequest) (*CountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCountry not implemented")
}
func (UnimplementedAddressServiceServer) GetCountry(context.Context, *GetCountryRequest) (*CountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountry not implemented")
}
func (UnimplementedAddressServiceServer) ListCountries(context.Context, *ListCountriesRequest) (*ListCountriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCountries not implemented")
}
func (UnimplementedAddressServiceServer) UpdateCountry(context.Context, *UpdateCountryRequest) (*CountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCountry not implemented")
}
func (UnimplementedAddressServiceServer) DeleteCountry(context.Context, *DeleteCountryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCountry not implemented")
}
func (UnimplementedAddressServiceServer) CreateProvince(context.Context, *CreateProvinceRequest) (*ProvinceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProvince not implemented")
}
func (UnimplementedAddressServiceServer) GetProvince(context.Context, *GetProvinceRequest) (*ProvinceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvince not implemented")
}
func (UnimplementedAddressServiceServer) ListProvincesByCountry(context.Context, *ListProvincesByCountryRequest) (*ListProvincesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProvincesByCountry not implemented")
}
func (UnimplementedAddressServiceServer) UpdateProvince(context.Context, *UpdateProvinceRequest) (*ProvinceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProvince not implemented")
}
func (UnimplementedAddressServiceServer) DeleteProvince(context.Context, *DeleteProvinceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProvince not implemented")
}
func (UnimplementedAddressServiceServer) CreateCity(context.Context, *CreateCityRequest) (*CityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCity not implemented")
}
func (UnimplementedAddressServiceServer) GetCity(context.Context, *GetCityRequest) (*CityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCity not implemented")
}
func (UnimplementedAddressServiceServer) ListCitiesByProvince(context.Context, *ListCitiesByProvinceRequest) (*ListCitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCitiesByProvince not implemented")
}
func (UnimplementedAddressServiceServer) UpdateCity(context.Context, *UpdateCityRequest) (*CityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCity not implemented")
}
func (UnimplementedAddressServiceServer) DeleteCity(context.Context, *DeleteCityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedAddressServiceServer) CreateDistrict(context.Context, *CreateDistrictRequest) (*DistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDistrict not implemented")
}
func (UnimplementedAddressServiceServer) GetDistrict(context.Context, *GetDistrictRequest) (*DistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDistrict not implemented")
}
func (UnimplementedAddressServiceServer) ListDistrictsByCity(context.Context, *ListDistrictsByCityRequest) (*ListDistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDistrictsByCity not implemented")
}
func (UnimplementedAddressServiceServer) UpdateDistrict(context.Context, *UpdateDistrictRequest) (*DistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDistrict not implemented")
}
func (UnimplementedAddressServiceServer) DeleteDistrict(context.Context, *DeleteDistrictRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDistrict not implemented")
}
func (UnimplementedAddressServiceServer) CreateVillage(context.Context, *CreateVillageRequest) (*VillageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVillage not implemented")
}
func (UnimplementedAddressServiceServer) GetVillage(context.Context, *GetVillageRequest) (*VillageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVillage not implemented")
}
func (UnimplementedAddressServiceServer) ListVillagesByDistrict(context.Context, *ListVillagesByDistrictRequest) (*ListVillagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVillagesByDistrict not implemented")
}
func (UnimplementedAddressServiceServer) UpdateVillage(context.Context, *UpdateVillageRequest) (*VillageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVillage not implemented")
}
func (UnimplementedAddressServiceServer) DeleteVillage(context.Context, *DeleteVillageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVillage not implemented")
}
func (UnimplementedAddressServiceServer) CreateAddress(context.Context, *CreateAddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedAddressServiceServer) GetAddress(context.Context, *GetAddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedAddressServiceServer) ListAddresses(context.Context, *ListAddressesRequest) (*ListAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddresses not implemented")
}
func (UnimplementedAddressServiceServer) UpdateAddress(context.Context, *UpdateAddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedAddressServiceServer) DeleteAddress(context.Context, *DeleteAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (UnimplementedAddressServiceServer) mustEmbedUnimplementedAddressServiceServer() {}
func (UnimplementedAddressServiceServer) testEmbeddedByValue()                        {}

// UnsafeAddressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddressServiceServer will
// result in compilation errors.
type UnsafeAddressServiceServer interface {
	mustEmbedUnimplementedAddressServiceServer()
}

func RegisterAddressServiceServer(s grpc.ServiceRegistrar, srv AddressServiceServer) {
	// If the following call pancis, it indicates UnimplementedAddressServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AddressService_ServiceDesc, srv)
}

func _AddressService_CreateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateCountry(ctx, req.(*CreateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetCountry(ctx, req.(*GetCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_ListCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCountriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).ListCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_ListCountries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).ListCountries(ctx, req.(*ListCountriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_UpdateCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).UpdateCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_UpdateCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).UpdateCountry(ctx, req.(*UpdateCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_DeleteCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).DeleteCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_DeleteCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).DeleteCountry(ctx, req.(*DeleteCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CreateProvince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProvinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateProvince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateProvince_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateProvince(ctx, req.(*CreateProvinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetProvince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetProvince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetProvince_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetProvince(ctx, req.(*GetProvinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_ListProvincesByCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvincesByCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).ListProvincesByCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_ListProvincesByCountry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).ListProvincesByCountry(ctx, req.(*ListProvincesByCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_UpdateProvince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProvinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).UpdateProvince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_UpdateProvince_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).UpdateProvince(ctx, req.(*UpdateProvinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_DeleteProvince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProvinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).DeleteProvince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_DeleteProvince_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).DeleteProvince(ctx, req.(*DeleteProvinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateCity(ctx, req.(*CreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetCity(ctx, req.(*GetCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_ListCitiesByProvince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCitiesByProvinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).ListCitiesByProvince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_ListCitiesByProvince_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).ListCitiesByProvince(ctx, req.(*ListCitiesByProvinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_UpdateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).UpdateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_UpdateCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).UpdateCity(ctx, req.(*UpdateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_DeleteCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).DeleteCity(ctx, req.(*DeleteCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CreateDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateDistrict(ctx, req.(*CreateDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetDistrict(ctx, req.(*GetDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_ListDistrictsByCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDistrictsByCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).ListDistrictsByCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_ListDistrictsByCity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).ListDistrictsByCity(ctx, req.(*ListDistrictsByCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_UpdateDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).UpdateDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_UpdateDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).UpdateDistrict(ctx, req.(*UpdateDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_DeleteDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).DeleteDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_DeleteDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).DeleteDistrict(ctx, req.(*DeleteDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CreateVillage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVillageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateVillage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateVillage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateVillage(ctx, req.(*CreateVillageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetVillage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVillageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetVillage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetVillage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetVillage(ctx, req.(*GetVillageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_ListVillagesByDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVillagesByDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).ListVillagesByDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_ListVillagesByDistrict_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).ListVillagesByDistrict(ctx, req.(*ListVillagesByDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_UpdateVillage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVillageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).UpdateVillage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_UpdateVillage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).UpdateVillage(ctx, req.(*UpdateVillageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_DeleteVillage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVillageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).DeleteVillage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_DeleteVillage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).DeleteVillage(ctx, req.(*DeleteVillageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_CreateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).CreateAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_ListAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).ListAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_ListAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).ListAddresses(ctx, req.(*ListAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_UpdateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).UpdateAddress(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AddressService_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddressServiceServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddressService_DeleteAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddressServiceServer).DeleteAddress(ctx, req.(*DeleteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddressService_ServiceDesc is the grpc.ServiceDesc for AddressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "address_country.AddressService",
	HandlerType: (*AddressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCountry",
			Handler:    _AddressService_CreateCountry_Handler,
		},
		{
			MethodName: "GetCountry",
			Handler:    _AddressService_GetCountry_Handler,
		},
		{
			MethodName: "ListCountries",
			Handler:    _AddressService_ListCountries_Handler,
		},
		{
			MethodName: "UpdateCountry",
			Handler:    _AddressService_UpdateCountry_Handler,
		},
		{
			MethodName: "DeleteCountry",
			Handler:    _AddressService_DeleteCountry_Handler,
		},
		{
			MethodName: "CreateProvince",
			Handler:    _AddressService_CreateProvince_Handler,
		},
		{
			MethodName: "GetProvince",
			Handler:    _AddressService_GetProvince_Handler,
		},
		{
			MethodName: "ListProvincesByCountry",
			Handler:    _AddressService_ListProvincesByCountry_Handler,
		},
		{
			MethodName: "UpdateProvince",
			Handler:    _AddressService_UpdateProvince_Handler,
		},
		{
			MethodName: "DeleteProvince",
			Handler:    _AddressService_DeleteProvince_Handler,
		},
		{
			MethodName: "CreateCity",
			Handler:    _AddressService_CreateCity_Handler,
		},
		{
			MethodName: "GetCity",
			Handler:    _AddressService_GetCity_Handler,
		},
		{
			MethodName: "ListCitiesByProvince",
			Handler:    _AddressService_ListCitiesByProvince_Handler,
		},
		{
			MethodName: "UpdateCity",
			Handler:    _AddressService_UpdateCity_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _AddressService_DeleteCity_Handler,
		},
		{
			MethodName: "CreateDistrict",
			Handler:    _AddressService_CreateDistrict_Handler,
		},
		{
			MethodName: "GetDistrict",
			Handler:    _AddressService_GetDistrict_Handler,
		},
		{
			MethodName: "ListDistrictsByCity",
			Handler:    _AddressService_ListDistrictsByCity_Handler,
		},
		{
			MethodName: "UpdateDistrict",
			Handler:    _AddressService_UpdateDistrict_Handler,
		},
		{
			MethodName: "DeleteDistrict",
			Handler:    _AddressService_DeleteDistrict_Handler,
		},
		{
			MethodName: "CreateVillage",
			Handler:    _AddressService_CreateVillage_Handler,
		},
		{
			MethodName: "GetVillage",
			Handler:    _AddressService_GetVillage_Handler,
		},
		{
			MethodName: "ListVillagesByDistrict",
			Handler:    _AddressService_ListVillagesByDistrict_Handler,
		},
		{
			MethodName: "UpdateVillage",
			Handler:    _AddressService_UpdateVillage_Handler,
		},
		{
			MethodName: "DeleteVillage",
			Handler:    _AddressService_DeleteVillage_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _AddressService_CreateAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _AddressService_GetAddress_Handler,
		},
		{
			MethodName: "ListAddresses",
			Handler:    _AddressService_ListAddresses_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _AddressService_UpdateAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _AddressService_DeleteAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "address-country-service/service.proto",
}
