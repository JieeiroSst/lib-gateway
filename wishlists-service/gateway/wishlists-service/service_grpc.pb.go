// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: wishlists-service/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WishlistService_CreateWishlist_FullMethodName     = "/wishlist.WishlistService/CreateWishlist"
	WishlistService_GetWishlist_FullMethodName        = "/wishlist.WishlistService/GetWishlist"
	WishlistService_UpdateWishlist_FullMethodName     = "/wishlist.WishlistService/UpdateWishlist"
	WishlistService_DeleteWishlist_FullMethodName     = "/wishlist.WishlistService/DeleteWishlist"
	WishlistService_ListWishlists_FullMethodName      = "/wishlist.WishlistService/ListWishlists"
	WishlistService_AddWishlistItem_FullMethodName    = "/wishlist.WishlistService/AddWishlistItem"
	WishlistService_GetWishlistItem_FullMethodName    = "/wishlist.WishlistService/GetWishlistItem"
	WishlistService_UpdateWishlistItem_FullMethodName = "/wishlist.WishlistService/UpdateWishlistItem"
	WishlistService_DeleteWishlistItem_FullMethodName = "/wishlist.WishlistService/DeleteWishlistItem"
	WishlistService_ListWishlistItems_FullMethodName  = "/wishlist.WishlistService/ListWishlistItems"
)

// WishlistServiceClient is the client API for WishlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WishlistServiceClient interface {
	CreateWishlist(ctx context.Context, in *CreateWishlistRequest, opts ...grpc.CallOption) (*Wishlist, error)
	GetWishlist(ctx context.Context, in *GetWishlistRequest, opts ...grpc.CallOption) (*Wishlist, error)
	UpdateWishlist(ctx context.Context, in *UpdateWishlistRequest, opts ...grpc.CallOption) (*Wishlist, error)
	DeleteWishlist(ctx context.Context, in *DeleteWishlistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListWishlists(ctx context.Context, in *ListWishlistsRequest, opts ...grpc.CallOption) (*ListWishlistsResponse, error)
	// Wishlist item operations
	AddWishlistItem(ctx context.Context, in *AddWishlistItemRequest, opts ...grpc.CallOption) (*WishlistItem, error)
	GetWishlistItem(ctx context.Context, in *GetWishlistItemRequest, opts ...grpc.CallOption) (*WishlistItem, error)
	UpdateWishlistItem(ctx context.Context, in *UpdateWishlistItemRequest, opts ...grpc.CallOption) (*WishlistItem, error)
	DeleteWishlistItem(ctx context.Context, in *DeleteWishlistItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListWishlistItems(ctx context.Context, in *ListWishlistItemsRequest, opts ...grpc.CallOption) (*ListWishlistItemsResponse, error)
}

type wishlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishlistServiceClient(cc grpc.ClientConnInterface) WishlistServiceClient {
	return &wishlistServiceClient{cc}
}

func (c *wishlistServiceClient) CreateWishlist(ctx context.Context, in *CreateWishlistRequest, opts ...grpc.CallOption) (*Wishlist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wishlist)
	err := c.cc.Invoke(ctx, WishlistService_CreateWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) GetWishlist(ctx context.Context, in *GetWishlistRequest, opts ...grpc.CallOption) (*Wishlist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wishlist)
	err := c.cc.Invoke(ctx, WishlistService_GetWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) UpdateWishlist(ctx context.Context, in *UpdateWishlistRequest, opts ...grpc.CallOption) (*Wishlist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Wishlist)
	err := c.cc.Invoke(ctx, WishlistService_UpdateWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) DeleteWishlist(ctx context.Context, in *DeleteWishlistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WishlistService_DeleteWishlist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) ListWishlists(ctx context.Context, in *ListWishlistsRequest, opts ...grpc.CallOption) (*ListWishlistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWishlistsResponse)
	err := c.cc.Invoke(ctx, WishlistService_ListWishlists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) AddWishlistItem(ctx context.Context, in *AddWishlistItemRequest, opts ...grpc.CallOption) (*WishlistItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WishlistItem)
	err := c.cc.Invoke(ctx, WishlistService_AddWishlistItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) GetWishlistItem(ctx context.Context, in *GetWishlistItemRequest, opts ...grpc.CallOption) (*WishlistItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WishlistItem)
	err := c.cc.Invoke(ctx, WishlistService_GetWishlistItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) UpdateWishlistItem(ctx context.Context, in *UpdateWishlistItemRequest, opts ...grpc.CallOption) (*WishlistItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WishlistItem)
	err := c.cc.Invoke(ctx, WishlistService_UpdateWishlistItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) DeleteWishlistItem(ctx context.Context, in *DeleteWishlistItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WishlistService_DeleteWishlistItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) ListWishlistItems(ctx context.Context, in *ListWishlistItemsRequest, opts ...grpc.CallOption) (*ListWishlistItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWishlistItemsResponse)
	err := c.cc.Invoke(ctx, WishlistService_ListWishlistItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishlistServiceServer is the server API for WishlistService service.
// All implementations must embed UnimplementedWishlistServiceServer
// for forward compatibility.
type WishlistServiceServer interface {
	CreateWishlist(context.Context, *CreateWishlistRequest) (*Wishlist, error)
	GetWishlist(context.Context, *GetWishlistRequest) (*Wishlist, error)
	UpdateWishlist(context.Context, *UpdateWishlistRequest) (*Wishlist, error)
	DeleteWishlist(context.Context, *DeleteWishlistRequest) (*emptypb.Empty, error)
	ListWishlists(context.Context, *ListWishlistsRequest) (*ListWishlistsResponse, error)
	// Wishlist item operations
	AddWishlistItem(context.Context, *AddWishlistItemRequest) (*WishlistItem, error)
	GetWishlistItem(context.Context, *GetWishlistItemRequest) (*WishlistItem, error)
	UpdateWishlistItem(context.Context, *UpdateWishlistItemRequest) (*WishlistItem, error)
	DeleteWishlistItem(context.Context, *DeleteWishlistItemRequest) (*emptypb.Empty, error)
	ListWishlistItems(context.Context, *ListWishlistItemsRequest) (*ListWishlistItemsResponse, error)
	mustEmbedUnimplementedWishlistServiceServer()
}

// UnimplementedWishlistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWishlistServiceServer struct{}

func (UnimplementedWishlistServiceServer) CreateWishlist(context.Context, *CreateWishlistRequest) (*Wishlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) GetWishlist(context.Context, *GetWishlistRequest) (*Wishlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) UpdateWishlist(context.Context, *UpdateWishlistRequest) (*Wishlist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) DeleteWishlist(context.Context, *DeleteWishlistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) ListWishlists(context.Context, *ListWishlistsRequest) (*ListWishlistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWishlists not implemented")
}
func (UnimplementedWishlistServiceServer) AddWishlistItem(context.Context, *AddWishlistItemRequest) (*WishlistItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWishlistItem not implemented")
}
func (UnimplementedWishlistServiceServer) GetWishlistItem(context.Context, *GetWishlistItemRequest) (*WishlistItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWishlistItem not implemented")
}
func (UnimplementedWishlistServiceServer) UpdateWishlistItem(context.Context, *UpdateWishlistItemRequest) (*WishlistItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWishlistItem not implemented")
}
func (UnimplementedWishlistServiceServer) DeleteWishlistItem(context.Context, *DeleteWishlistItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWishlistItem not implemented")
}
func (UnimplementedWishlistServiceServer) ListWishlistItems(context.Context, *ListWishlistItemsRequest) (*ListWishlistItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWishlistItems not implemented")
}
func (UnimplementedWishlistServiceServer) mustEmbedUnimplementedWishlistServiceServer() {}
func (UnimplementedWishlistServiceServer) testEmbeddedByValue()                         {}

// UnsafeWishlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WishlistServiceServer will
// result in compilation errors.
type UnsafeWishlistServiceServer interface {
	mustEmbedUnimplementedWishlistServiceServer()
}

func RegisterWishlistServiceServer(s grpc.ServiceRegistrar, srv WishlistServiceServer) {
	// If the following call pancis, it indicates UnimplementedWishlistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WishlistService_ServiceDesc, srv)
}

func _WishlistService_CreateWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_CreateWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, req.(*CreateWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_GetWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).GetWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_GetWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).GetWishlist(ctx, req.(*GetWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_UpdateWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).UpdateWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_UpdateWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).UpdateWishlist(ctx, req.(*UpdateWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_DeleteWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWishlistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).DeleteWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_DeleteWishlist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).DeleteWishlist(ctx, req.(*DeleteWishlistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_ListWishlists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWishlistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).ListWishlists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_ListWishlists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).ListWishlists(ctx, req.(*ListWishlistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_AddWishlistItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWishlistItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).AddWishlistItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_AddWishlistItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).AddWishlistItem(ctx, req.(*AddWishlistItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_GetWishlistItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWishlistItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).GetWishlistItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_GetWishlistItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).GetWishlistItem(ctx, req.(*GetWishlistItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_UpdateWishlistItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWishlistItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).UpdateWishlistItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_UpdateWishlistItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).UpdateWishlistItem(ctx, req.(*UpdateWishlistItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_DeleteWishlistItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWishlistItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).DeleteWishlistItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_DeleteWishlistItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).DeleteWishlistItem(ctx, req.(*DeleteWishlistItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_ListWishlistItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWishlistItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).ListWishlistItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WishlistService_ListWishlistItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).ListWishlistItems(ctx, req.(*ListWishlistItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WishlistService_ServiceDesc is the grpc.ServiceDesc for WishlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WishlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wishlist.WishlistService",
	HandlerType: (*WishlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWishlist",
			Handler:    _WishlistService_CreateWishlist_Handler,
		},
		{
			MethodName: "GetWishlist",
			Handler:    _WishlistService_GetWishlist_Handler,
		},
		{
			MethodName: "UpdateWishlist",
			Handler:    _WishlistService_UpdateWishlist_Handler,
		},
		{
			MethodName: "DeleteWishlist",
			Handler:    _WishlistService_DeleteWishlist_Handler,
		},
		{
			MethodName: "ListWishlists",
			Handler:    _WishlistService_ListWishlists_Handler,
		},
		{
			MethodName: "AddWishlistItem",
			Handler:    _WishlistService_AddWishlistItem_Handler,
		},
		{
			MethodName: "GetWishlistItem",
			Handler:    _WishlistService_GetWishlistItem_Handler,
		},
		{
			MethodName: "UpdateWishlistItem",
			Handler:    _WishlistService_UpdateWishlistItem_Handler,
		},
		{
			MethodName: "DeleteWishlistItem",
			Handler:    _WishlistService_DeleteWishlistItem_Handler,
		},
		{
			MethodName: "ListWishlistItems",
			Handler:    _WishlistService_ListWishlistItems_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wishlists-service/service.proto",
}
