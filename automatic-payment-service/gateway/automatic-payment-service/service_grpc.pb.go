// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: automatic-payment-service/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentGatewayService_CreateSubscription_FullMethodName            = "/payment.PaymentGatewayService/CreateSubscription"
	PaymentGatewayService_GetSubscription_FullMethodName               = "/payment.PaymentGatewayService/GetSubscription"
	PaymentGatewayService_UpdateSubscriptionPlan_FullMethodName        = "/payment.PaymentGatewayService/UpdateSubscriptionPlan"
	PaymentGatewayService_CancelSubscription_FullMethodName            = "/payment.PaymentGatewayService/CancelSubscription"
	PaymentGatewayService_ReactivateSubscription_FullMethodName        = "/payment.PaymentGatewayService/ReactivateSubscription"
	PaymentGatewayService_AddPaymentMethod_FullMethodName              = "/payment.PaymentGatewayService/AddPaymentMethod"
	PaymentGatewayService_GetPaymentMethods_FullMethodName             = "/payment.PaymentGatewayService/GetPaymentMethods"
	PaymentGatewayService_UpdatePaymentMethod_FullMethodName           = "/payment.PaymentGatewayService/UpdatePaymentMethod"
	PaymentGatewayService_DeletePaymentMethod_FullMethodName           = "/payment.PaymentGatewayService/DeletePaymentMethod"
	PaymentGatewayService_SetDefaultPaymentMethod_FullMethodName       = "/payment.PaymentGatewayService/SetDefaultPaymentMethod"
	PaymentGatewayService_ProcessPayment_FullMethodName                = "/payment.PaymentGatewayService/ProcessPayment"
	PaymentGatewayService_GetTransactionHistory_FullMethodName         = "/payment.PaymentGatewayService/GetTransactionHistory"
	PaymentGatewayService_GetTransactionDetails_FullMethodName         = "/payment.PaymentGatewayService/GetTransactionDetails"
	PaymentGatewayService_RefundTransaction_FullMethodName             = "/payment.PaymentGatewayService/RefundTransaction"
	PaymentGatewayService_GetInvoice_FullMethodName                    = "/payment.PaymentGatewayService/GetInvoice"
	PaymentGatewayService_GetInvoiceList_FullMethodName                = "/payment.PaymentGatewayService/GetInvoiceList"
	PaymentGatewayService_GenerateInvoicePdf_FullMethodName            = "/payment.PaymentGatewayService/GenerateInvoicePdf"
	PaymentGatewayService_GetSubscriptionPlans_FullMethodName          = "/payment.PaymentGatewayService/GetSubscriptionPlans"
	PaymentGatewayService_ProcessAutoRenewals_FullMethodName           = "/payment.PaymentGatewayService/ProcessAutoRenewals"
	PaymentGatewayService_SendSubscriptionNotifications_FullMethodName = "/payment.PaymentGatewayService/SendSubscriptionNotifications"
)

// PaymentGatewayServiceClient is the client API for PaymentGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentGatewayServiceClient interface {
	CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	UpdateSubscriptionPlan(ctx context.Context, in *UpdateSubscriptionPlanRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	ReactivateSubscription(ctx context.Context, in *ReactivateSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error)
	AddPaymentMethod(ctx context.Context, in *AddPaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethodResponse, error)
	GetPaymentMethods(ctx context.Context, in *GetPaymentMethodsRequest, opts ...grpc.CallOption) (*PaymentMethodsListResponse, error)
	UpdatePaymentMethod(ctx context.Context, in *UpdatePaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethodResponse, error)
	DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethodResponse, error)
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*TransactionListResponse, error)
	GetTransactionDetails(ctx context.Context, in *GetTransactionDetailsRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	RefundTransaction(ctx context.Context, in *RefundTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error)
	GetInvoiceList(ctx context.Context, in *GetInvoiceListRequest, opts ...grpc.CallOption) (*InvoiceListResponse, error)
	GenerateInvoicePdf(ctx context.Context, in *GenerateInvoicePdfRequest, opts ...grpc.CallOption) (*InvoicePdfResponse, error)
	GetSubscriptionPlans(ctx context.Context, in *GetSubscriptionPlansRequest, opts ...grpc.CallOption) (*SubscriptionPlansResponse, error)
	ProcessAutoRenewals(ctx context.Context, in *ProcessAutoRenewalsRequest, opts ...grpc.CallOption) (*BatchProcessResponse, error)
	SendSubscriptionNotifications(ctx context.Context, in *SendSubscriptionNotificationsRequest, opts ...grpc.CallOption) (*BatchProcessResponse, error)
}

type paymentGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentGatewayServiceClient(cc grpc.ClientConnInterface) PaymentGatewayServiceClient {
	return &paymentGatewayServiceClient{cc}
}

func (c *paymentGatewayServiceClient) CreateSubscription(ctx context.Context, in *CreateSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_CreateSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) GetSubscription(ctx context.Context, in *GetSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_GetSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) UpdateSubscriptionPlan(ctx context.Context, in *UpdateSubscriptionPlanRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_UpdateSubscriptionPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) CancelSubscription(ctx context.Context, in *CancelSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_CancelSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) ReactivateSubscription(ctx context.Context, in *ReactivateSubscriptionRequest, opts ...grpc.CallOption) (*SubscriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_ReactivateSubscription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) AddPaymentMethod(ctx context.Context, in *AddPaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentMethodResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_AddPaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) GetPaymentMethods(ctx context.Context, in *GetPaymentMethodsRequest, opts ...grpc.CallOption) (*PaymentMethodsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentMethodsListResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_GetPaymentMethods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) UpdatePaymentMethod(ctx context.Context, in *UpdatePaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentMethodResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_UpdatePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) DeletePaymentMethod(ctx context.Context, in *DeletePaymentMethodRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PaymentGatewayService_DeletePaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) SetDefaultPaymentMethod(ctx context.Context, in *SetDefaultPaymentMethodRequest, opts ...grpc.CallOption) (*PaymentMethodResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PaymentMethodResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_SetDefaultPaymentMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_ProcessPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) GetTransactionHistory(ctx context.Context, in *GetTransactionHistoryRequest, opts ...grpc.CallOption) (*TransactionListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionListResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_GetTransactionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) GetTransactionDetails(ctx context.Context, in *GetTransactionDetailsRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_GetTransactionDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) RefundTransaction(ctx context.Context, in *RefundTransactionRequest, opts ...grpc.CallOption) (*TransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_RefundTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) GetInvoice(ctx context.Context, in *GetInvoiceRequest, opts ...grpc.CallOption) (*InvoiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_GetInvoice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) GetInvoiceList(ctx context.Context, in *GetInvoiceListRequest, opts ...grpc.CallOption) (*InvoiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoiceListResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_GetInvoiceList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) GenerateInvoicePdf(ctx context.Context, in *GenerateInvoicePdfRequest, opts ...grpc.CallOption) (*InvoicePdfResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InvoicePdfResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_GenerateInvoicePdf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) GetSubscriptionPlans(ctx context.Context, in *GetSubscriptionPlansRequest, opts ...grpc.CallOption) (*SubscriptionPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscriptionPlansResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_GetSubscriptionPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) ProcessAutoRenewals(ctx context.Context, in *ProcessAutoRenewalsRequest, opts ...grpc.CallOption) (*BatchProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchProcessResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_ProcessAutoRenewals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) SendSubscriptionNotifications(ctx context.Context, in *SendSubscriptionNotificationsRequest, opts ...grpc.CallOption) (*BatchProcessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchProcessResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_SendSubscriptionNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentGatewayServiceServer is the server API for PaymentGatewayService service.
// All implementations must embed UnimplementedPaymentGatewayServiceServer
// for forward compatibility.
type PaymentGatewayServiceServer interface {
	CreateSubscription(context.Context, *CreateSubscriptionRequest) (*SubscriptionResponse, error)
	GetSubscription(context.Context, *GetSubscriptionRequest) (*SubscriptionResponse, error)
	UpdateSubscriptionPlan(context.Context, *UpdateSubscriptionPlanRequest) (*SubscriptionResponse, error)
	CancelSubscription(context.Context, *CancelSubscriptionRequest) (*SubscriptionResponse, error)
	ReactivateSubscription(context.Context, *ReactivateSubscriptionRequest) (*SubscriptionResponse, error)
	AddPaymentMethod(context.Context, *AddPaymentMethodRequest) (*PaymentMethodResponse, error)
	GetPaymentMethods(context.Context, *GetPaymentMethodsRequest) (*PaymentMethodsListResponse, error)
	UpdatePaymentMethod(context.Context, *UpdatePaymentMethodRequest) (*PaymentMethodResponse, error)
	DeletePaymentMethod(context.Context, *DeletePaymentMethodRequest) (*emptypb.Empty, error)
	SetDefaultPaymentMethod(context.Context, *SetDefaultPaymentMethodRequest) (*PaymentMethodResponse, error)
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*TransactionResponse, error)
	GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*TransactionListResponse, error)
	GetTransactionDetails(context.Context, *GetTransactionDetailsRequest) (*TransactionResponse, error)
	RefundTransaction(context.Context, *RefundTransactionRequest) (*TransactionResponse, error)
	GetInvoice(context.Context, *GetInvoiceRequest) (*InvoiceResponse, error)
	GetInvoiceList(context.Context, *GetInvoiceListRequest) (*InvoiceListResponse, error)
	GenerateInvoicePdf(context.Context, *GenerateInvoicePdfRequest) (*InvoicePdfResponse, error)
	GetSubscriptionPlans(context.Context, *GetSubscriptionPlansRequest) (*SubscriptionPlansResponse, error)
	ProcessAutoRenewals(context.Context, *ProcessAutoRenewalsRequest) (*BatchProcessResponse, error)
	SendSubscriptionNotifications(context.Context, *SendSubscriptionNotificationsRequest) (*BatchProcessResponse, error)
	mustEmbedUnimplementedPaymentGatewayServiceServer()
}

// UnimplementedPaymentGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentGatewayServiceServer struct{}

func (UnimplementedPaymentGatewayServiceServer) CreateSubscription(context.Context, *CreateSubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscription not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) GetSubscription(context.Context, *GetSubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscription not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) UpdateSubscriptionPlan(context.Context, *UpdateSubscriptionPlanRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubscriptionPlan not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) CancelSubscription(context.Context, *CancelSubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscription not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) ReactivateSubscription(context.Context, *ReactivateSubscriptionRequest) (*SubscriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReactivateSubscription not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) AddPaymentMethod(context.Context, *AddPaymentMethodRequest) (*PaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPaymentMethod not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) GetPaymentMethods(context.Context, *GetPaymentMethodsRequest) (*PaymentMethodsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentMethods not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) UpdatePaymentMethod(context.Context, *UpdatePaymentMethodRequest) (*PaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentMethod not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) DeletePaymentMethod(context.Context, *DeletePaymentMethodRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePaymentMethod not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) SetDefaultPaymentMethod(context.Context, *SetDefaultPaymentMethodRequest) (*PaymentMethodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPaymentMethod not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) GetTransactionHistory(context.Context, *GetTransactionHistoryRequest) (*TransactionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionHistory not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) GetTransactionDetails(context.Context, *GetTransactionDetailsRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionDetails not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) RefundTransaction(context.Context, *RefundTransactionRequest) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundTransaction not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) GetInvoice(context.Context, *GetInvoiceRequest) (*InvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoice not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) GetInvoiceList(context.Context, *GetInvoiceListRequest) (*InvoiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceList not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) GenerateInvoicePdf(context.Context, *GenerateInvoicePdfRequest) (*InvoicePdfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateInvoicePdf not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) GetSubscriptionPlans(context.Context, *GetSubscriptionPlansRequest) (*SubscriptionPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionPlans not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) ProcessAutoRenewals(context.Context, *ProcessAutoRenewalsRequest) (*BatchProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessAutoRenewals not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) SendSubscriptionNotifications(context.Context, *SendSubscriptionNotificationsRequest) (*BatchProcessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSubscriptionNotifications not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) mustEmbedUnimplementedPaymentGatewayServiceServer() {}
func (UnimplementedPaymentGatewayServiceServer) testEmbeddedByValue()                               {}

// UnsafePaymentGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentGatewayServiceServer will
// result in compilation errors.
type UnsafePaymentGatewayServiceServer interface {
	mustEmbedUnimplementedPaymentGatewayServiceServer()
}

func RegisterPaymentGatewayServiceServer(s grpc.ServiceRegistrar, srv PaymentGatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentGatewayService_ServiceDesc, srv)
}

func _PaymentGatewayService_CreateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).CreateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_CreateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).CreateSubscription(ctx, req.(*CreateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_GetSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_UpdateSubscriptionPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubscriptionPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).UpdateSubscriptionPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_UpdateSubscriptionPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).UpdateSubscriptionPlan(ctx, req.(*UpdateSubscriptionPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_CancelSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).CancelSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_CancelSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).CancelSubscription(ctx, req.(*CancelSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_ReactivateSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReactivateSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).ReactivateSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_ReactivateSubscription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).ReactivateSubscription(ctx, req.(*ReactivateSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_AddPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).AddPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_AddPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).AddPaymentMethod(ctx, req.(*AddPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_GetPaymentMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentMethodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).GetPaymentMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_GetPaymentMethods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).GetPaymentMethods(ctx, req.(*GetPaymentMethodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_UpdatePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).UpdatePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_UpdatePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).UpdatePaymentMethod(ctx, req.(*UpdatePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_DeletePaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).DeletePaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_DeletePaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).DeletePaymentMethod(ctx, req.(*DeletePaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_SetDefaultPaymentMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultPaymentMethodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).SetDefaultPaymentMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_SetDefaultPaymentMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).SetDefaultPaymentMethod(ctx, req.(*SetDefaultPaymentMethodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_GetTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).GetTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_GetTransactionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).GetTransactionHistory(ctx, req.(*GetTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_GetTransactionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).GetTransactionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_GetTransactionDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).GetTransactionDetails(ctx, req.(*GetTransactionDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_RefundTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).RefundTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_RefundTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).RefundTransaction(ctx, req.(*RefundTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_GetInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).GetInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_GetInvoice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).GetInvoice(ctx, req.(*GetInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_GetInvoiceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).GetInvoiceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_GetInvoiceList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).GetInvoiceList(ctx, req.(*GetInvoiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_GenerateInvoicePdf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateInvoicePdfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).GenerateInvoicePdf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_GenerateInvoicePdf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).GenerateInvoicePdf(ctx, req.(*GenerateInvoicePdfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_GetSubscriptionPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).GetSubscriptionPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_GetSubscriptionPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).GetSubscriptionPlans(ctx, req.(*GetSubscriptionPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_ProcessAutoRenewals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessAutoRenewalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).ProcessAutoRenewals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_ProcessAutoRenewals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).ProcessAutoRenewals(ctx, req.(*ProcessAutoRenewalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_SendSubscriptionNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSubscriptionNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).SendSubscriptionNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_SendSubscriptionNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).SendSubscriptionNotifications(ctx, req.(*SendSubscriptionNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentGatewayService_ServiceDesc is the grpc.ServiceDesc for PaymentGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payment.PaymentGatewayService",
	HandlerType: (*PaymentGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscription",
			Handler:    _PaymentGatewayService_CreateSubscription_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _PaymentGatewayService_GetSubscription_Handler,
		},
		{
			MethodName: "UpdateSubscriptionPlan",
			Handler:    _PaymentGatewayService_UpdateSubscriptionPlan_Handler,
		},
		{
			MethodName: "CancelSubscription",
			Handler:    _PaymentGatewayService_CancelSubscription_Handler,
		},
		{
			MethodName: "ReactivateSubscription",
			Handler:    _PaymentGatewayService_ReactivateSubscription_Handler,
		},
		{
			MethodName: "AddPaymentMethod",
			Handler:    _PaymentGatewayService_AddPaymentMethod_Handler,
		},
		{
			MethodName: "GetPaymentMethods",
			Handler:    _PaymentGatewayService_GetPaymentMethods_Handler,
		},
		{
			MethodName: "UpdatePaymentMethod",
			Handler:    _PaymentGatewayService_UpdatePaymentMethod_Handler,
		},
		{
			MethodName: "DeletePaymentMethod",
			Handler:    _PaymentGatewayService_DeletePaymentMethod_Handler,
		},
		{
			MethodName: "SetDefaultPaymentMethod",
			Handler:    _PaymentGatewayService_SetDefaultPaymentMethod_Handler,
		},
		{
			MethodName: "ProcessPayment",
			Handler:    _PaymentGatewayService_ProcessPayment_Handler,
		},
		{
			MethodName: "GetTransactionHistory",
			Handler:    _PaymentGatewayService_GetTransactionHistory_Handler,
		},
		{
			MethodName: "GetTransactionDetails",
			Handler:    _PaymentGatewayService_GetTransactionDetails_Handler,
		},
		{
			MethodName: "RefundTransaction",
			Handler:    _PaymentGatewayService_RefundTransaction_Handler,
		},
		{
			MethodName: "GetInvoice",
			Handler:    _PaymentGatewayService_GetInvoice_Handler,
		},
		{
			MethodName: "GetInvoiceList",
			Handler:    _PaymentGatewayService_GetInvoiceList_Handler,
		},
		{
			MethodName: "GenerateInvoicePdf",
			Handler:    _PaymentGatewayService_GenerateInvoicePdf_Handler,
		},
		{
			MethodName: "GetSubscriptionPlans",
			Handler:    _PaymentGatewayService_GetSubscriptionPlans_Handler,
		},
		{
			MethodName: "ProcessAutoRenewals",
			Handler:    _PaymentGatewayService_ProcessAutoRenewals_Handler,
		},
		{
			MethodName: "SendSubscriptionNotifications",
			Handler:    _PaymentGatewayService_SendSubscriptionNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "automatic-payment-service/service.proto",
}
