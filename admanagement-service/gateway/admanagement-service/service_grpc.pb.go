// =============================================
// GRPC PROTO DEFINITION FOR AD MANAGEMENT SYSTEM
// =============================================

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: admanagement-service/service.proto

package admanagement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdmanagementService_CreateCampaign_FullMethodName       = "/admanagement.v1.AdmanagementService/CreateCampaign"
	AdmanagementService_GetCampaigns_FullMethodName         = "/admanagement.v1.AdmanagementService/GetCampaigns"
	AdmanagementService_GetCampaign_FullMethodName          = "/admanagement.v1.AdmanagementService/GetCampaign"
	AdmanagementService_UpdateCampaign_FullMethodName       = "/admanagement.v1.AdmanagementService/UpdateCampaign"
	AdmanagementService_DeleteCampaign_FullMethodName       = "/admanagement.v1.AdmanagementService/DeleteCampaign"
	AdmanagementService_CreateAd_FullMethodName             = "/admanagement.v1.AdmanagementService/CreateAd"
	AdmanagementService_GetAds_FullMethodName               = "/admanagement.v1.AdmanagementService/GetAds"
	AdmanagementService_GetAd_FullMethodName                = "/admanagement.v1.AdmanagementService/GetAd"
	AdmanagementService_UpdateAd_FullMethodName             = "/admanagement.v1.AdmanagementService/UpdateAd"
	AdmanagementService_DeleteAd_FullMethodName             = "/admanagement.v1.AdmanagementService/DeleteAd"
	AdmanagementService_UploadFile_FullMethodName           = "/admanagement.v1.AdmanagementService/UploadFile"
	AdmanagementService_TrackImpression_FullMethodName      = "/admanagement.v1.AdmanagementService/TrackImpression"
	AdmanagementService_TrackClick_FullMethodName           = "/admanagement.v1.AdmanagementService/TrackClick"
	AdmanagementService_ServeAd_FullMethodName              = "/admanagement.v1.AdmanagementService/ServeAd"
	AdmanagementService_GetAdAnalytics_FullMethodName       = "/admanagement.v1.AdmanagementService/GetAdAnalytics"
	AdmanagementService_GetCampaignAnalytics_FullMethodName = "/admanagement.v1.AdmanagementService/GetCampaignAnalytics"
	AdmanagementService_GetCategories_FullMethodName        = "/admanagement.v1.AdmanagementService/GetCategories"
	AdmanagementService_GetPositions_FullMethodName         = "/admanagement.v1.AdmanagementService/GetPositions"
)

// AdmanagementServiceClient is the client API for AdmanagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdmanagementServiceClient interface {
	// Campaign Management Service
	CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*Campaign, error)
	GetCampaigns(ctx context.Context, in *GetCampaignsRequest, opts ...grpc.CallOption) (*GetCampaignsResponse, error)
	GetCampaign(ctx context.Context, in *GetAdRequest, opts ...grpc.CallOption) (*Campaign, error)
	UpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...grpc.CallOption) (*Campaign, error)
	DeleteCampaign(ctx context.Context, in *DeleteAdRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	// Ad Management Service
	CreateAd(ctx context.Context, in *CreateAdRequest, opts ...grpc.CallOption) (*Ad, error)
	GetAds(ctx context.Context, in *GetAdsRequest, opts ...grpc.CallOption) (*GetAdsResponse, error)
	GetAd(ctx context.Context, in *GetAdRequest, opts ...grpc.CallOption) (*Ad, error)
	UpdateAd(ctx context.Context, in *UpdateAdRequest, opts ...grpc.CallOption) (*Ad, error)
	DeleteAd(ctx context.Context, in *DeleteAdRequest, opts ...grpc.CallOption) (*StandardResponse, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	// Ad Serving Service
	TrackImpression(ctx context.Context, in *TrackImpressionRequest, opts ...grpc.CallOption) (*TrackingResponse, error)
	TrackClick(ctx context.Context, in *TrackClickRequest, opts ...grpc.CallOption) (*TrackingResponse, error)
	// Ad Serving Service
	ServeAd(ctx context.Context, in *ServeAdRequest, opts ...grpc.CallOption) (*ServeAdResponse, error)
	// Analytics Service
	GetAdAnalytics(ctx context.Context, in *GetAdAnalyticsRequest, opts ...grpc.CallOption) (*GetAdAnalyticsResponse, error)
	GetCampaignAnalytics(ctx context.Context, in *GetCampaignAnalyticsRequest, opts ...grpc.CallOption) (*CampaignAnalyticsData, error)
	// Metadata Service
	GetCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCategoriesResponse, error)
	GetPositions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPositionsResponse, error)
}

type admanagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdmanagementServiceClient(cc grpc.ClientConnInterface) AdmanagementServiceClient {
	return &admanagementServiceClient{cc}
}

func (c *admanagementServiceClient) CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*Campaign, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Campaign)
	err := c.cc.Invoke(ctx, AdmanagementService_CreateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) GetCampaigns(ctx context.Context, in *GetCampaignsRequest, opts ...grpc.CallOption) (*GetCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCampaignsResponse)
	err := c.cc.Invoke(ctx, AdmanagementService_GetCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) GetCampaign(ctx context.Context, in *GetAdRequest, opts ...grpc.CallOption) (*Campaign, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Campaign)
	err := c.cc.Invoke(ctx, AdmanagementService_GetCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) UpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...grpc.CallOption) (*Campaign, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Campaign)
	err := c.cc.Invoke(ctx, AdmanagementService_UpdateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) DeleteCampaign(ctx context.Context, in *DeleteAdRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, AdmanagementService_DeleteCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) CreateAd(ctx context.Context, in *CreateAdRequest, opts ...grpc.CallOption) (*Ad, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ad)
	err := c.cc.Invoke(ctx, AdmanagementService_CreateAd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) GetAds(ctx context.Context, in *GetAdsRequest, opts ...grpc.CallOption) (*GetAdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdsResponse)
	err := c.cc.Invoke(ctx, AdmanagementService_GetAds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) GetAd(ctx context.Context, in *GetAdRequest, opts ...grpc.CallOption) (*Ad, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ad)
	err := c.cc.Invoke(ctx, AdmanagementService_GetAd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) UpdateAd(ctx context.Context, in *UpdateAdRequest, opts ...grpc.CallOption) (*Ad, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ad)
	err := c.cc.Invoke(ctx, AdmanagementService_UpdateAd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) DeleteAd(ctx context.Context, in *DeleteAdRequest, opts ...grpc.CallOption) (*StandardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, AdmanagementService_DeleteAd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, AdmanagementService_UploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) TrackImpression(ctx context.Context, in *TrackImpressionRequest, opts ...grpc.CallOption) (*TrackingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackingResponse)
	err := c.cc.Invoke(ctx, AdmanagementService_TrackImpression_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) TrackClick(ctx context.Context, in *TrackClickRequest, opts ...grpc.CallOption) (*TrackingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackingResponse)
	err := c.cc.Invoke(ctx, AdmanagementService_TrackClick_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) ServeAd(ctx context.Context, in *ServeAdRequest, opts ...grpc.CallOption) (*ServeAdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServeAdResponse)
	err := c.cc.Invoke(ctx, AdmanagementService_ServeAd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) GetAdAnalytics(ctx context.Context, in *GetAdAnalyticsRequest, opts ...grpc.CallOption) (*GetAdAnalyticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAdAnalyticsResponse)
	err := c.cc.Invoke(ctx, AdmanagementService_GetAdAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) GetCampaignAnalytics(ctx context.Context, in *GetCampaignAnalyticsRequest, opts ...grpc.CallOption) (*CampaignAnalyticsData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CampaignAnalyticsData)
	err := c.cc.Invoke(ctx, AdmanagementService_GetCampaignAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) GetCategories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCategoriesResponse)
	err := c.cc.Invoke(ctx, AdmanagementService_GetCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *admanagementServiceClient) GetPositions(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPositionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPositionsResponse)
	err := c.cc.Invoke(ctx, AdmanagementService_GetPositions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdmanagementServiceServer is the server API for AdmanagementService service.
// All implementations must embed UnimplementedAdmanagementServiceServer
// for forward compatibility.
type AdmanagementServiceServer interface {
	// Campaign Management Service
	CreateCampaign(context.Context, *CreateCampaignRequest) (*Campaign, error)
	GetCampaigns(context.Context, *GetCampaignsRequest) (*GetCampaignsResponse, error)
	GetCampaign(context.Context, *GetAdRequest) (*Campaign, error)
	UpdateCampaign(context.Context, *UpdateCampaignRequest) (*Campaign, error)
	DeleteCampaign(context.Context, *DeleteAdRequest) (*StandardResponse, error)
	// Ad Management Service
	CreateAd(context.Context, *CreateAdRequest) (*Ad, error)
	GetAds(context.Context, *GetAdsRequest) (*GetAdsResponse, error)
	GetAd(context.Context, *GetAdRequest) (*Ad, error)
	UpdateAd(context.Context, *UpdateAdRequest) (*Ad, error)
	DeleteAd(context.Context, *DeleteAdRequest) (*StandardResponse, error)
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	// Ad Serving Service
	TrackImpression(context.Context, *TrackImpressionRequest) (*TrackingResponse, error)
	TrackClick(context.Context, *TrackClickRequest) (*TrackingResponse, error)
	// Ad Serving Service
	ServeAd(context.Context, *ServeAdRequest) (*ServeAdResponse, error)
	// Analytics Service
	GetAdAnalytics(context.Context, *GetAdAnalyticsRequest) (*GetAdAnalyticsResponse, error)
	GetCampaignAnalytics(context.Context, *GetCampaignAnalyticsRequest) (*CampaignAnalyticsData, error)
	// Metadata Service
	GetCategories(context.Context, *emptypb.Empty) (*GetCategoriesResponse, error)
	GetPositions(context.Context, *emptypb.Empty) (*GetPositionsResponse, error)
	mustEmbedUnimplementedAdmanagementServiceServer()
}

// UnimplementedAdmanagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdmanagementServiceServer struct{}

func (UnimplementedAdmanagementServiceServer) CreateCampaign(context.Context, *CreateCampaignRequest) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (UnimplementedAdmanagementServiceServer) GetCampaigns(context.Context, *GetCampaignsRequest) (*GetCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaigns not implemented")
}
func (UnimplementedAdmanagementServiceServer) GetCampaign(context.Context, *GetAdRequest) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaign not implemented")
}
func (UnimplementedAdmanagementServiceServer) UpdateCampaign(context.Context, *UpdateCampaignRequest) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaign not implemented")
}
func (UnimplementedAdmanagementServiceServer) DeleteCampaign(context.Context, *DeleteAdRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaign not implemented")
}
func (UnimplementedAdmanagementServiceServer) CreateAd(context.Context, *CreateAdRequest) (*Ad, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAd not implemented")
}
func (UnimplementedAdmanagementServiceServer) GetAds(context.Context, *GetAdsRequest) (*GetAdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAds not implemented")
}
func (UnimplementedAdmanagementServiceServer) GetAd(context.Context, *GetAdRequest) (*Ad, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAd not implemented")
}
func (UnimplementedAdmanagementServiceServer) UpdateAd(context.Context, *UpdateAdRequest) (*Ad, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAd not implemented")
}
func (UnimplementedAdmanagementServiceServer) DeleteAd(context.Context, *DeleteAdRequest) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAd not implemented")
}
func (UnimplementedAdmanagementServiceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedAdmanagementServiceServer) TrackImpression(context.Context, *TrackImpressionRequest) (*TrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackImpression not implemented")
}
func (UnimplementedAdmanagementServiceServer) TrackClick(context.Context, *TrackClickRequest) (*TrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackClick not implemented")
}
func (UnimplementedAdmanagementServiceServer) ServeAd(context.Context, *ServeAdRequest) (*ServeAdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServeAd not implemented")
}
func (UnimplementedAdmanagementServiceServer) GetAdAnalytics(context.Context, *GetAdAnalyticsRequest) (*GetAdAnalyticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdAnalytics not implemented")
}
func (UnimplementedAdmanagementServiceServer) GetCampaignAnalytics(context.Context, *GetCampaignAnalyticsRequest) (*CampaignAnalyticsData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignAnalytics not implemented")
}
func (UnimplementedAdmanagementServiceServer) GetCategories(context.Context, *emptypb.Empty) (*GetCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategories not implemented")
}
func (UnimplementedAdmanagementServiceServer) GetPositions(context.Context, *emptypb.Empty) (*GetPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositions not implemented")
}
func (UnimplementedAdmanagementServiceServer) mustEmbedUnimplementedAdmanagementServiceServer() {}
func (UnimplementedAdmanagementServiceServer) testEmbeddedByValue()                             {}

// UnsafeAdmanagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdmanagementServiceServer will
// result in compilation errors.
type UnsafeAdmanagementServiceServer interface {
	mustEmbedUnimplementedAdmanagementServiceServer()
}

func RegisterAdmanagementServiceServer(s grpc.ServiceRegistrar, srv AdmanagementServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdmanagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdmanagementService_ServiceDesc, srv)
}

func _AdmanagementService_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_CreateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).CreateCampaign(ctx, req.(*CreateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_GetCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).GetCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_GetCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).GetCampaigns(ctx, req.(*GetCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_GetCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).GetCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_GetCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).GetCampaign(ctx, req.(*GetAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_UpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).UpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_UpdateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).UpdateCampaign(ctx, req.(*UpdateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_DeleteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).DeleteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_DeleteCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).DeleteCampaign(ctx, req.(*DeleteAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_CreateAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).CreateAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_CreateAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).CreateAd(ctx, req.(*CreateAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_GetAds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).GetAds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_GetAds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).GetAds(ctx, req.(*GetAdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_GetAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).GetAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_GetAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).GetAd(ctx, req.(*GetAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_UpdateAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).UpdateAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_UpdateAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).UpdateAd(ctx, req.(*UpdateAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_DeleteAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).DeleteAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_DeleteAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).DeleteAd(ctx, req.(*DeleteAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_TrackImpression_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackImpressionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).TrackImpression(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_TrackImpression_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).TrackImpression(ctx, req.(*TrackImpressionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_TrackClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).TrackClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_TrackClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).TrackClick(ctx, req.(*TrackClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_ServeAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServeAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).ServeAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_ServeAd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).ServeAd(ctx, req.(*ServeAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_GetAdAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).GetAdAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_GetAdAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).GetAdAnalytics(ctx, req.(*GetAdAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_GetCampaignAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).GetCampaignAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_GetCampaignAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).GetCampaignAnalytics(ctx, req.(*GetCampaignAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_GetCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).GetCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_GetCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).GetCategories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdmanagementService_GetPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdmanagementServiceServer).GetPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdmanagementService_GetPositions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdmanagementServiceServer).GetPositions(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// AdmanagementService_ServiceDesc is the grpc.ServiceDesc for AdmanagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdmanagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admanagement.v1.AdmanagementService",
	HandlerType: (*AdmanagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCampaign",
			Handler:    _AdmanagementService_CreateCampaign_Handler,
		},
		{
			MethodName: "GetCampaigns",
			Handler:    _AdmanagementService_GetCampaigns_Handler,
		},
		{
			MethodName: "GetCampaign",
			Handler:    _AdmanagementService_GetCampaign_Handler,
		},
		{
			MethodName: "UpdateCampaign",
			Handler:    _AdmanagementService_UpdateCampaign_Handler,
		},
		{
			MethodName: "DeleteCampaign",
			Handler:    _AdmanagementService_DeleteCampaign_Handler,
		},
		{
			MethodName: "CreateAd",
			Handler:    _AdmanagementService_CreateAd_Handler,
		},
		{
			MethodName: "GetAds",
			Handler:    _AdmanagementService_GetAds_Handler,
		},
		{
			MethodName: "GetAd",
			Handler:    _AdmanagementService_GetAd_Handler,
		},
		{
			MethodName: "UpdateAd",
			Handler:    _AdmanagementService_UpdateAd_Handler,
		},
		{
			MethodName: "DeleteAd",
			Handler:    _AdmanagementService_DeleteAd_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _AdmanagementService_UploadFile_Handler,
		},
		{
			MethodName: "TrackImpression",
			Handler:    _AdmanagementService_TrackImpression_Handler,
		},
		{
			MethodName: "TrackClick",
			Handler:    _AdmanagementService_TrackClick_Handler,
		},
		{
			MethodName: "ServeAd",
			Handler:    _AdmanagementService_ServeAd_Handler,
		},
		{
			MethodName: "GetAdAnalytics",
			Handler:    _AdmanagementService_GetAdAnalytics_Handler,
		},
		{
			MethodName: "GetCampaignAnalytics",
			Handler:    _AdmanagementService_GetCampaignAnalytics_Handler,
		},
		{
			MethodName: "GetCategories",
			Handler:    _AdmanagementService_GetCategories_Handler,
		},
		{
			MethodName: "GetPositions",
			Handler:    _AdmanagementService_GetPositions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admanagement-service/service.proto",
}
