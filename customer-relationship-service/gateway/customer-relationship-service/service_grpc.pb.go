// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: customer-relationship-service/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CRMService_CreateCampaign_FullMethodName               = "/crm.CRMService/CreateCampaign"
	CRMService_GetCampaign_FullMethodName                  = "/crm.CRMService/GetCampaign"
	CRMService_ListCampaigns_FullMethodName                = "/crm.CRMService/ListCampaigns"
	CRMService_UpdateCampaign_FullMethodName               = "/crm.CRMService/UpdateCampaign"
	CRMService_DeleteCampaign_FullMethodName               = "/crm.CRMService/DeleteCampaign"
	CRMService_AddCampaignMember_FullMethodName            = "/crm.CRMService/AddCampaignMember"
	CRMService_RemoveCampaignMember_FullMethodName         = "/crm.CRMService/RemoveCampaignMember"
	CRMService_ListCampaignMembers_FullMethodName          = "/crm.CRMService/ListCampaignMembers"
	CRMService_CreateLead_FullMethodName                   = "/crm.CRMService/CreateLead"
	CRMService_GetLead_FullMethodName                      = "/crm.CRMService/GetLead"
	CRMService_ListLeads_FullMethodName                    = "/crm.CRMService/ListLeads"
	CRMService_UpdateLead_FullMethodName                   = "/crm.CRMService/UpdateLead"
	CRMService_DeleteLead_FullMethodName                   = "/crm.CRMService/DeleteLead"
	CRMService_CreateAccount_FullMethodName                = "/crm.CRMService/CreateAccount"
	CRMService_GetAccount_FullMethodName                   = "/crm.CRMService/GetAccount"
	CRMService_ListAccounts_FullMethodName                 = "/crm.CRMService/ListAccounts"
	CRMService_UpdateAccount_FullMethodName                = "/crm.CRMService/UpdateAccount"
	CRMService_DeleteAccount_FullMethodName                = "/crm.CRMService/DeleteAccount"
	CRMService_CreateContact_FullMethodName                = "/crm.CRMService/CreateContact"
	CRMService_GetContact_FullMethodName                   = "/crm.CRMService/GetContact"
	CRMService_ListContacts_FullMethodName                 = "/crm.CRMService/ListContacts"
	CRMService_ListAccountContacts_FullMethodName          = "/crm.CRMService/ListAccountContacts"
	CRMService_UpdateContact_FullMethodName                = "/crm.CRMService/UpdateContact"
	CRMService_DeleteContact_FullMethodName                = "/crm.CRMService/DeleteContact"
	CRMService_CreateCase_FullMethodName                   = "/crm.CRMService/CreateCase"
	CRMService_GetCase_FullMethodName                      = "/crm.CRMService/GetCase"
	CRMService_ListCases_FullMethodName                    = "/crm.CRMService/ListCases"
	CRMService_ListContactCases_FullMethodName             = "/crm.CRMService/ListContactCases"
	CRMService_UpdateCase_FullMethodName                   = "/crm.CRMService/UpdateCase"
	CRMService_DeleteCase_FullMethodName                   = "/crm.CRMService/DeleteCase"
	CRMService_CreateOpportunity_FullMethodName            = "/crm.CRMService/CreateOpportunity"
	CRMService_GetOpportunity_FullMethodName               = "/crm.CRMService/GetOpportunity"
	CRMService_ListOpportunities_FullMethodName            = "/crm.CRMService/ListOpportunities"
	CRMService_ListAccountOpportunities_FullMethodName     = "/crm.CRMService/ListAccountOpportunities"
	CRMService_UpdateOpportunity_FullMethodName            = "/crm.CRMService/UpdateOpportunity"
	CRMService_DeleteOpportunity_FullMethodName            = "/crm.CRMService/DeleteOpportunity"
	CRMService_CreateContract_FullMethodName               = "/crm.CRMService/CreateContract"
	CRMService_GetContract_FullMethodName                  = "/crm.CRMService/GetContract"
	CRMService_ListContracts_FullMethodName                = "/crm.CRMService/ListContracts"
	CRMService_ListAccountContracts_FullMethodName         = "/crm.CRMService/ListAccountContracts"
	CRMService_UpdateContract_FullMethodName               = "/crm.CRMService/UpdateContract"
	CRMService_DeleteContract_FullMethodName               = "/crm.CRMService/DeleteContract"
	CRMService_CreateAccountContactRole_FullMethodName     = "/crm.CRMService/CreateAccountContactRole"
	CRMService_DeleteAccountContactRole_FullMethodName     = "/crm.CRMService/DeleteAccountContactRole"
	CRMService_ListAccountContactRoles_FullMethodName      = "/crm.CRMService/ListAccountContactRoles"
	CRMService_CreateOpportunityContactRole_FullMethodName = "/crm.CRMService/CreateOpportunityContactRole"
	CRMService_DeleteOpportunityContactRole_FullMethodName = "/crm.CRMService/DeleteOpportunityContactRole"
	CRMService_ListOpportunityContactRoles_FullMethodName  = "/crm.CRMService/ListOpportunityContactRoles"
)

// CRMServiceClient is the client API for CRMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CRMServiceClient interface {
	CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*Campaign, error)
	GetCampaign(ctx context.Context, in *GetCampaignRequest, opts ...grpc.CallOption) (*Campaign, error)
	ListCampaigns(ctx context.Context, in *ListCampaignsRequest, opts ...grpc.CallOption) (*ListCampaignsResponse, error)
	UpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...grpc.CallOption) (*Campaign, error)
	DeleteCampaign(ctx context.Context, in *DeleteCampaignRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddCampaignMember(ctx context.Context, in *AddCampaignMemberRequest, opts ...grpc.CallOption) (*CampaignMember, error)
	RemoveCampaignMember(ctx context.Context, in *RemoveCampaignMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListCampaignMembers(ctx context.Context, in *ListCampaignMembersRequest, opts ...grpc.CallOption) (*ListCampaignMembersResponse, error)
	CreateLead(ctx context.Context, in *CreateLeadRequest, opts ...grpc.CallOption) (*Lead, error)
	GetLead(ctx context.Context, in *GetLeadRequest, opts ...grpc.CallOption) (*Lead, error)
	ListLeads(ctx context.Context, in *ListLeadsRequest, opts ...grpc.CallOption) (*ListLeadsResponse, error)
	UpdateLead(ctx context.Context, in *UpdateLeadRequest, opts ...grpc.CallOption) (*Lead, error)
	DeleteLead(ctx context.Context, in *DeleteLeadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error)
	ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*Contact, error)
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*Contact, error)
	ListContacts(ctx context.Context, in *ListContactsRequest, opts ...grpc.CallOption) (*ListContactsResponse, error)
	ListAccountContacts(ctx context.Context, in *ListAccountContactsRequest, opts ...grpc.CallOption) (*ListContactsResponse, error)
	UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*Contact, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateCase(ctx context.Context, in *CreateCaseRequest, opts ...grpc.CallOption) (*Case, error)
	GetCase(ctx context.Context, in *GetCaseRequest, opts ...grpc.CallOption) (*Case, error)
	ListCases(ctx context.Context, in *ListCasesRequest, opts ...grpc.CallOption) (*ListCasesResponse, error)
	ListContactCases(ctx context.Context, in *ListContactCasesRequest, opts ...grpc.CallOption) (*ListCasesResponse, error)
	UpdateCase(ctx context.Context, in *UpdateCaseRequest, opts ...grpc.CallOption) (*Case, error)
	DeleteCase(ctx context.Context, in *DeleteCaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateOpportunity(ctx context.Context, in *CreateOpportunityRequest, opts ...grpc.CallOption) (*Opportunity, error)
	GetOpportunity(ctx context.Context, in *GetOpportunityRequest, opts ...grpc.CallOption) (*Opportunity, error)
	ListOpportunities(ctx context.Context, in *ListOpportunitiesRequest, opts ...grpc.CallOption) (*ListOpportunitiesResponse, error)
	ListAccountOpportunities(ctx context.Context, in *ListAccountOpportunitiesRequest, opts ...grpc.CallOption) (*ListOpportunitiesResponse, error)
	UpdateOpportunity(ctx context.Context, in *UpdateOpportunityRequest, opts ...grpc.CallOption) (*Opportunity, error)
	DeleteOpportunity(ctx context.Context, in *DeleteOpportunityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateContract(ctx context.Context, in *CreateContractRequest, opts ...grpc.CallOption) (*Contract, error)
	GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*Contract, error)
	ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error)
	ListAccountContracts(ctx context.Context, in *ListAccountContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error)
	UpdateContract(ctx context.Context, in *UpdateContractRequest, opts ...grpc.CallOption) (*Contract, error)
	DeleteContract(ctx context.Context, in *DeleteContractRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateAccountContactRole(ctx context.Context, in *CreateAccountContactRoleRequest, opts ...grpc.CallOption) (*AccountContactRole, error)
	DeleteAccountContactRole(ctx context.Context, in *DeleteAccountContactRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAccountContactRoles(ctx context.Context, in *ListAccountContactRolesRequest, opts ...grpc.CallOption) (*ListAccountContactRolesResponse, error)
	CreateOpportunityContactRole(ctx context.Context, in *CreateOpportunityContactRoleRequest, opts ...grpc.CallOption) (*OpportunityContactRole, error)
	DeleteOpportunityContactRole(ctx context.Context, in *DeleteOpportunityContactRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListOpportunityContactRoles(ctx context.Context, in *ListOpportunityContactRolesRequest, opts ...grpc.CallOption) (*ListOpportunityContactRolesResponse, error)
}

type cRMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCRMServiceClient(cc grpc.ClientConnInterface) CRMServiceClient {
	return &cRMServiceClient{cc}
}

func (c *cRMServiceClient) CreateCampaign(ctx context.Context, in *CreateCampaignRequest, opts ...grpc.CallOption) (*Campaign, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Campaign)
	err := c.cc.Invoke(ctx, CRMService_CreateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) GetCampaign(ctx context.Context, in *GetCampaignRequest, opts ...grpc.CallOption) (*Campaign, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Campaign)
	err := c.cc.Invoke(ctx, CRMService_GetCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListCampaigns(ctx context.Context, in *ListCampaignsRequest, opts ...grpc.CallOption) (*ListCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCampaignsResponse)
	err := c.cc.Invoke(ctx, CRMService_ListCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) UpdateCampaign(ctx context.Context, in *UpdateCampaignRequest, opts ...grpc.CallOption) (*Campaign, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Campaign)
	err := c.cc.Invoke(ctx, CRMService_UpdateCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) DeleteCampaign(ctx context.Context, in *DeleteCampaignRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRMService_DeleteCampaign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) AddCampaignMember(ctx context.Context, in *AddCampaignMemberRequest, opts ...grpc.CallOption) (*CampaignMember, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CampaignMember)
	err := c.cc.Invoke(ctx, CRMService_AddCampaignMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) RemoveCampaignMember(ctx context.Context, in *RemoveCampaignMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRMService_RemoveCampaignMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListCampaignMembers(ctx context.Context, in *ListCampaignMembersRequest, opts ...grpc.CallOption) (*ListCampaignMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCampaignMembersResponse)
	err := c.cc.Invoke(ctx, CRMService_ListCampaignMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) CreateLead(ctx context.Context, in *CreateLeadRequest, opts ...grpc.CallOption) (*Lead, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lead)
	err := c.cc.Invoke(ctx, CRMService_CreateLead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) GetLead(ctx context.Context, in *GetLeadRequest, opts ...grpc.CallOption) (*Lead, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lead)
	err := c.cc.Invoke(ctx, CRMService_GetLead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListLeads(ctx context.Context, in *ListLeadsRequest, opts ...grpc.CallOption) (*ListLeadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLeadsResponse)
	err := c.cc.Invoke(ctx, CRMService_ListLeads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) UpdateLead(ctx context.Context, in *UpdateLeadRequest, opts ...grpc.CallOption) (*Lead, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Lead)
	err := c.cc.Invoke(ctx, CRMService_UpdateLead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) DeleteLead(ctx context.Context, in *DeleteLeadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRMService_DeleteLead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, CRMService_CreateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, CRMService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListAccounts(ctx context.Context, in *ListAccountsRequest, opts ...grpc.CallOption) (*ListAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountsResponse)
	err := c.cc.Invoke(ctx, CRMService_ListAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*Account, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Account)
	err := c.cc.Invoke(ctx, CRMService_UpdateAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRMService_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contact)
	err := c.cc.Invoke(ctx, CRMService_CreateContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contact)
	err := c.cc.Invoke(ctx, CRMService_GetContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListContacts(ctx context.Context, in *ListContactsRequest, opts ...grpc.CallOption) (*ListContactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContactsResponse)
	err := c.cc.Invoke(ctx, CRMService_ListContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListAccountContacts(ctx context.Context, in *ListAccountContactsRequest, opts ...grpc.CallOption) (*ListContactsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContactsResponse)
	err := c.cc.Invoke(ctx, CRMService_ListAccountContacts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contact)
	err := c.cc.Invoke(ctx, CRMService_UpdateContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRMService_DeleteContact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) CreateCase(ctx context.Context, in *CreateCaseRequest, opts ...grpc.CallOption) (*Case, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Case)
	err := c.cc.Invoke(ctx, CRMService_CreateCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) GetCase(ctx context.Context, in *GetCaseRequest, opts ...grpc.CallOption) (*Case, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Case)
	err := c.cc.Invoke(ctx, CRMService_GetCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListCases(ctx context.Context, in *ListCasesRequest, opts ...grpc.CallOption) (*ListCasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCasesResponse)
	err := c.cc.Invoke(ctx, CRMService_ListCases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListContactCases(ctx context.Context, in *ListContactCasesRequest, opts ...grpc.CallOption) (*ListCasesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCasesResponse)
	err := c.cc.Invoke(ctx, CRMService_ListContactCases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) UpdateCase(ctx context.Context, in *UpdateCaseRequest, opts ...grpc.CallOption) (*Case, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Case)
	err := c.cc.Invoke(ctx, CRMService_UpdateCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) DeleteCase(ctx context.Context, in *DeleteCaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRMService_DeleteCase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) CreateOpportunity(ctx context.Context, in *CreateOpportunityRequest, opts ...grpc.CallOption) (*Opportunity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Opportunity)
	err := c.cc.Invoke(ctx, CRMService_CreateOpportunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) GetOpportunity(ctx context.Context, in *GetOpportunityRequest, opts ...grpc.CallOption) (*Opportunity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Opportunity)
	err := c.cc.Invoke(ctx, CRMService_GetOpportunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListOpportunities(ctx context.Context, in *ListOpportunitiesRequest, opts ...grpc.CallOption) (*ListOpportunitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOpportunitiesResponse)
	err := c.cc.Invoke(ctx, CRMService_ListOpportunities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListAccountOpportunities(ctx context.Context, in *ListAccountOpportunitiesRequest, opts ...grpc.CallOption) (*ListOpportunitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOpportunitiesResponse)
	err := c.cc.Invoke(ctx, CRMService_ListAccountOpportunities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) UpdateOpportunity(ctx context.Context, in *UpdateOpportunityRequest, opts ...grpc.CallOption) (*Opportunity, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Opportunity)
	err := c.cc.Invoke(ctx, CRMService_UpdateOpportunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) DeleteOpportunity(ctx context.Context, in *DeleteOpportunityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRMService_DeleteOpportunity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) CreateContract(ctx context.Context, in *CreateContractRequest, opts ...grpc.CallOption) (*Contract, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contract)
	err := c.cc.Invoke(ctx, CRMService_CreateContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) GetContract(ctx context.Context, in *GetContractRequest, opts ...grpc.CallOption) (*Contract, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contract)
	err := c.cc.Invoke(ctx, CRMService_GetContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListContracts(ctx context.Context, in *ListContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContractsResponse)
	err := c.cc.Invoke(ctx, CRMService_ListContracts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListAccountContracts(ctx context.Context, in *ListAccountContractsRequest, opts ...grpc.CallOption) (*ListContractsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListContractsResponse)
	err := c.cc.Invoke(ctx, CRMService_ListAccountContracts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) UpdateContract(ctx context.Context, in *UpdateContractRequest, opts ...grpc.CallOption) (*Contract, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Contract)
	err := c.cc.Invoke(ctx, CRMService_UpdateContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) DeleteContract(ctx context.Context, in *DeleteContractRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRMService_DeleteContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) CreateAccountContactRole(ctx context.Context, in *CreateAccountContactRoleRequest, opts ...grpc.CallOption) (*AccountContactRole, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccountContactRole)
	err := c.cc.Invoke(ctx, CRMService_CreateAccountContactRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) DeleteAccountContactRole(ctx context.Context, in *DeleteAccountContactRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRMService_DeleteAccountContactRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListAccountContactRoles(ctx context.Context, in *ListAccountContactRolesRequest, opts ...grpc.CallOption) (*ListAccountContactRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAccountContactRolesResponse)
	err := c.cc.Invoke(ctx, CRMService_ListAccountContactRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) CreateOpportunityContactRole(ctx context.Context, in *CreateOpportunityContactRoleRequest, opts ...grpc.CallOption) (*OpportunityContactRole, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OpportunityContactRole)
	err := c.cc.Invoke(ctx, CRMService_CreateOpportunityContactRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) DeleteOpportunityContactRole(ctx context.Context, in *DeleteOpportunityContactRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CRMService_DeleteOpportunityContactRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cRMServiceClient) ListOpportunityContactRoles(ctx context.Context, in *ListOpportunityContactRolesRequest, opts ...grpc.CallOption) (*ListOpportunityContactRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOpportunityContactRolesResponse)
	err := c.cc.Invoke(ctx, CRMService_ListOpportunityContactRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CRMServiceServer is the server API for CRMService service.
// All implementations must embed UnimplementedCRMServiceServer
// for forward compatibility.
type CRMServiceServer interface {
	CreateCampaign(context.Context, *CreateCampaignRequest) (*Campaign, error)
	GetCampaign(context.Context, *GetCampaignRequest) (*Campaign, error)
	ListCampaigns(context.Context, *ListCampaignsRequest) (*ListCampaignsResponse, error)
	UpdateCampaign(context.Context, *UpdateCampaignRequest) (*Campaign, error)
	DeleteCampaign(context.Context, *DeleteCampaignRequest) (*emptypb.Empty, error)
	AddCampaignMember(context.Context, *AddCampaignMemberRequest) (*CampaignMember, error)
	RemoveCampaignMember(context.Context, *RemoveCampaignMemberRequest) (*emptypb.Empty, error)
	ListCampaignMembers(context.Context, *ListCampaignMembersRequest) (*ListCampaignMembersResponse, error)
	CreateLead(context.Context, *CreateLeadRequest) (*Lead, error)
	GetLead(context.Context, *GetLeadRequest) (*Lead, error)
	ListLeads(context.Context, *ListLeadsRequest) (*ListLeadsResponse, error)
	UpdateLead(context.Context, *UpdateLeadRequest) (*Lead, error)
	DeleteLead(context.Context, *DeleteLeadRequest) (*emptypb.Empty, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*Account, error)
	GetAccount(context.Context, *GetAccountRequest) (*Account, error)
	ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error)
	CreateContact(context.Context, *CreateContactRequest) (*Contact, error)
	GetContact(context.Context, *GetContactRequest) (*Contact, error)
	ListContacts(context.Context, *ListContactsRequest) (*ListContactsResponse, error)
	ListAccountContacts(context.Context, *ListAccountContactsRequest) (*ListContactsResponse, error)
	UpdateContact(context.Context, *UpdateContactRequest) (*Contact, error)
	DeleteContact(context.Context, *DeleteContactRequest) (*emptypb.Empty, error)
	CreateCase(context.Context, *CreateCaseRequest) (*Case, error)
	GetCase(context.Context, *GetCaseRequest) (*Case, error)
	ListCases(context.Context, *ListCasesRequest) (*ListCasesResponse, error)
	ListContactCases(context.Context, *ListContactCasesRequest) (*ListCasesResponse, error)
	UpdateCase(context.Context, *UpdateCaseRequest) (*Case, error)
	DeleteCase(context.Context, *DeleteCaseRequest) (*emptypb.Empty, error)
	CreateOpportunity(context.Context, *CreateOpportunityRequest) (*Opportunity, error)
	GetOpportunity(context.Context, *GetOpportunityRequest) (*Opportunity, error)
	ListOpportunities(context.Context, *ListOpportunitiesRequest) (*ListOpportunitiesResponse, error)
	ListAccountOpportunities(context.Context, *ListAccountOpportunitiesRequest) (*ListOpportunitiesResponse, error)
	UpdateOpportunity(context.Context, *UpdateOpportunityRequest) (*Opportunity, error)
	DeleteOpportunity(context.Context, *DeleteOpportunityRequest) (*emptypb.Empty, error)
	CreateContract(context.Context, *CreateContractRequest) (*Contract, error)
	GetContract(context.Context, *GetContractRequest) (*Contract, error)
	ListContracts(context.Context, *ListContractsRequest) (*ListContractsResponse, error)
	ListAccountContracts(context.Context, *ListAccountContractsRequest) (*ListContractsResponse, error)
	UpdateContract(context.Context, *UpdateContractRequest) (*Contract, error)
	DeleteContract(context.Context, *DeleteContractRequest) (*emptypb.Empty, error)
	CreateAccountContactRole(context.Context, *CreateAccountContactRoleRequest) (*AccountContactRole, error)
	DeleteAccountContactRole(context.Context, *DeleteAccountContactRoleRequest) (*emptypb.Empty, error)
	ListAccountContactRoles(context.Context, *ListAccountContactRolesRequest) (*ListAccountContactRolesResponse, error)
	CreateOpportunityContactRole(context.Context, *CreateOpportunityContactRoleRequest) (*OpportunityContactRole, error)
	DeleteOpportunityContactRole(context.Context, *DeleteOpportunityContactRoleRequest) (*emptypb.Empty, error)
	ListOpportunityContactRoles(context.Context, *ListOpportunityContactRolesRequest) (*ListOpportunityContactRolesResponse, error)
	mustEmbedUnimplementedCRMServiceServer()
}

// UnimplementedCRMServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCRMServiceServer struct{}

func (UnimplementedCRMServiceServer) CreateCampaign(context.Context, *CreateCampaignRequest) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaign not implemented")
}
func (UnimplementedCRMServiceServer) GetCampaign(context.Context, *GetCampaignRequest) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaign not implemented")
}
func (UnimplementedCRMServiceServer) ListCampaigns(context.Context, *ListCampaignsRequest) (*ListCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaigns not implemented")
}
func (UnimplementedCRMServiceServer) UpdateCampaign(context.Context, *UpdateCampaignRequest) (*Campaign, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCampaign not implemented")
}
func (UnimplementedCRMServiceServer) DeleteCampaign(context.Context, *DeleteCampaignRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCampaign not implemented")
}
func (UnimplementedCRMServiceServer) AddCampaignMember(context.Context, *AddCampaignMemberRequest) (*CampaignMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCampaignMember not implemented")
}
func (UnimplementedCRMServiceServer) RemoveCampaignMember(context.Context, *RemoveCampaignMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCampaignMember not implemented")
}
func (UnimplementedCRMServiceServer) ListCampaignMembers(context.Context, *ListCampaignMembersRequest) (*ListCampaignMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaignMembers not implemented")
}
func (UnimplementedCRMServiceServer) CreateLead(context.Context, *CreateLeadRequest) (*Lead, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLead not implemented")
}
func (UnimplementedCRMServiceServer) GetLead(context.Context, *GetLeadRequest) (*Lead, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLead not implemented")
}
func (UnimplementedCRMServiceServer) ListLeads(context.Context, *ListLeadsRequest) (*ListLeadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeads not implemented")
}
func (UnimplementedCRMServiceServer) UpdateLead(context.Context, *UpdateLeadRequest) (*Lead, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLead not implemented")
}
func (UnimplementedCRMServiceServer) DeleteLead(context.Context, *DeleteLeadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLead not implemented")
}
func (UnimplementedCRMServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedCRMServiceServer) GetAccount(context.Context, *GetAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedCRMServiceServer) ListAccounts(context.Context, *ListAccountsRequest) (*ListAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedCRMServiceServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedCRMServiceServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedCRMServiceServer) CreateContact(context.Context, *CreateContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedCRMServiceServer) GetContact(context.Context, *GetContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedCRMServiceServer) ListContacts(context.Context, *ListContactsRequest) (*ListContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContacts not implemented")
}
func (UnimplementedCRMServiceServer) ListAccountContacts(context.Context, *ListAccountContactsRequest) (*ListContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountContacts not implemented")
}
func (UnimplementedCRMServiceServer) UpdateContact(context.Context, *UpdateContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedCRMServiceServer) DeleteContact(context.Context, *DeleteContactRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedCRMServiceServer) CreateCase(context.Context, *CreateCaseRequest) (*Case, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCase not implemented")
}
func (UnimplementedCRMServiceServer) GetCase(context.Context, *GetCaseRequest) (*Case, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCase not implemented")
}
func (UnimplementedCRMServiceServer) ListCases(context.Context, *ListCasesRequest) (*ListCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCases not implemented")
}
func (UnimplementedCRMServiceServer) ListContactCases(context.Context, *ListContactCasesRequest) (*ListCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContactCases not implemented")
}
func (UnimplementedCRMServiceServer) UpdateCase(context.Context, *UpdateCaseRequest) (*Case, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCase not implemented")
}
func (UnimplementedCRMServiceServer) DeleteCase(context.Context, *DeleteCaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCase not implemented")
}
func (UnimplementedCRMServiceServer) CreateOpportunity(context.Context, *CreateOpportunityRequest) (*Opportunity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpportunity not implemented")
}
func (UnimplementedCRMServiceServer) GetOpportunity(context.Context, *GetOpportunityRequest) (*Opportunity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOpportunity not implemented")
}
func (UnimplementedCRMServiceServer) ListOpportunities(context.Context, *ListOpportunitiesRequest) (*ListOpportunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOpportunities not implemented")
}
func (UnimplementedCRMServiceServer) ListAccountOpportunities(context.Context, *ListAccountOpportunitiesRequest) (*ListOpportunitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountOpportunities not implemented")
}
func (UnimplementedCRMServiceServer) UpdateOpportunity(context.Context, *UpdateOpportunityRequest) (*Opportunity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOpportunity not implemented")
}
func (UnimplementedCRMServiceServer) DeleteOpportunity(context.Context, *DeleteOpportunityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOpportunity not implemented")
}
func (UnimplementedCRMServiceServer) CreateContract(context.Context, *CreateContractRequest) (*Contract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContract not implemented")
}
func (UnimplementedCRMServiceServer) GetContract(context.Context, *GetContractRequest) (*Contract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (UnimplementedCRMServiceServer) ListContracts(context.Context, *ListContractsRequest) (*ListContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContracts not implemented")
}
func (UnimplementedCRMServiceServer) ListAccountContracts(context.Context, *ListAccountContractsRequest) (*ListContractsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountContracts not implemented")
}
func (UnimplementedCRMServiceServer) UpdateContract(context.Context, *UpdateContractRequest) (*Contract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContract not implemented")
}
func (UnimplementedCRMServiceServer) DeleteContract(context.Context, *DeleteContractRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContract not implemented")
}
func (UnimplementedCRMServiceServer) CreateAccountContactRole(context.Context, *CreateAccountContactRoleRequest) (*AccountContactRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountContactRole not implemented")
}
func (UnimplementedCRMServiceServer) DeleteAccountContactRole(context.Context, *DeleteAccountContactRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountContactRole not implemented")
}
func (UnimplementedCRMServiceServer) ListAccountContactRoles(context.Context, *ListAccountContactRolesRequest) (*ListAccountContactRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountContactRoles not implemented")
}
func (UnimplementedCRMServiceServer) CreateOpportunityContactRole(context.Context, *CreateOpportunityContactRoleRequest) (*OpportunityContactRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOpportunityContactRole not implemented")
}
func (UnimplementedCRMServiceServer) DeleteOpportunityContactRole(context.Context, *DeleteOpportunityContactRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOpportunityContactRole not implemented")
}
func (UnimplementedCRMServiceServer) ListOpportunityContactRoles(context.Context, *ListOpportunityContactRolesRequest) (*ListOpportunityContactRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOpportunityContactRoles not implemented")
}
func (UnimplementedCRMServiceServer) mustEmbedUnimplementedCRMServiceServer() {}
func (UnimplementedCRMServiceServer) testEmbeddedByValue()                    {}

// UnsafeCRMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CRMServiceServer will
// result in compilation errors.
type UnsafeCRMServiceServer interface {
	mustEmbedUnimplementedCRMServiceServer()
}

func RegisterCRMServiceServer(s grpc.ServiceRegistrar, srv CRMServiceServer) {
	// If the following call pancis, it indicates UnimplementedCRMServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CRMService_ServiceDesc, srv)
}

func _CRMService_CreateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).CreateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_CreateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).CreateCampaign(ctx, req.(*CreateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_GetCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).GetCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_GetCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).GetCampaign(ctx, req.(*GetCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListCampaigns(ctx, req.(*ListCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_UpdateCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).UpdateCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_UpdateCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).UpdateCampaign(ctx, req.(*UpdateCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_DeleteCampaign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCampaignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).DeleteCampaign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_DeleteCampaign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).DeleteCampaign(ctx, req.(*DeleteCampaignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_AddCampaignMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCampaignMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).AddCampaignMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_AddCampaignMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).AddCampaignMember(ctx, req.(*AddCampaignMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_RemoveCampaignMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCampaignMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).RemoveCampaignMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_RemoveCampaignMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).RemoveCampaignMember(ctx, req.(*RemoveCampaignMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListCampaignMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCampaignMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListCampaignMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListCampaignMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListCampaignMembers(ctx, req.(*ListCampaignMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_CreateLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).CreateLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_CreateLead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).CreateLead(ctx, req.(*CreateLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_GetLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).GetLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_GetLead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).GetLead(ctx, req.(*GetLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListLeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListLeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListLeads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListLeads(ctx, req.(*ListLeadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_UpdateLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).UpdateLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_UpdateLead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).UpdateLead(ctx, req.(*UpdateLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_DeleteLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).DeleteLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_DeleteLead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).DeleteLead(ctx, req.(*DeleteLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListAccounts(ctx, req.(*ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_UpdateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_GetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListContacts(ctx, req.(*ListContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListAccountContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListAccountContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListAccountContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListAccountContacts(ctx, req.(*ListAccountContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_UpdateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).UpdateContact(ctx, req.(*UpdateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_CreateCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).CreateCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_CreateCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).CreateCase(ctx, req.(*CreateCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_GetCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).GetCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_GetCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).GetCase(ctx, req.(*GetCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListCases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListCases(ctx, req.(*ListCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListContactCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListContactCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListContactCases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListContactCases(ctx, req.(*ListContactCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_UpdateCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).UpdateCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_UpdateCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).UpdateCase(ctx, req.(*UpdateCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_DeleteCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).DeleteCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_DeleteCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).DeleteCase(ctx, req.(*DeleteCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_CreateOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOpportunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).CreateOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_CreateOpportunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).CreateOpportunity(ctx, req.(*CreateOpportunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_GetOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOpportunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).GetOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_GetOpportunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).GetOpportunity(ctx, req.(*GetOpportunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListOpportunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOpportunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListOpportunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListOpportunities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListOpportunities(ctx, req.(*ListOpportunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListAccountOpportunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountOpportunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListAccountOpportunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListAccountOpportunities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListAccountOpportunities(ctx, req.(*ListAccountOpportunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_UpdateOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOpportunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).UpdateOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_UpdateOpportunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).UpdateOpportunity(ctx, req.(*UpdateOpportunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_DeleteOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOpportunityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).DeleteOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_DeleteOpportunity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).DeleteOpportunity(ctx, req.(*DeleteOpportunityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_CreateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).CreateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_CreateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).CreateContract(ctx, req.(*CreateContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_GetContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).GetContract(ctx, req.(*GetContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListContracts(ctx, req.(*ListContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListAccountContracts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountContractsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListAccountContracts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListAccountContracts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListAccountContracts(ctx, req.(*ListAccountContractsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_UpdateContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).UpdateContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_UpdateContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).UpdateContract(ctx, req.(*UpdateContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_DeleteContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).DeleteContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_DeleteContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).DeleteContract(ctx, req.(*DeleteContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_CreateAccountContactRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountContactRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).CreateAccountContactRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_CreateAccountContactRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).CreateAccountContactRole(ctx, req.(*CreateAccountContactRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_DeleteAccountContactRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountContactRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).DeleteAccountContactRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_DeleteAccountContactRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).DeleteAccountContactRole(ctx, req.(*DeleteAccountContactRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListAccountContactRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountContactRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListAccountContactRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListAccountContactRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListAccountContactRoles(ctx, req.(*ListAccountContactRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_CreateOpportunityContactRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOpportunityContactRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).CreateOpportunityContactRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_CreateOpportunityContactRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).CreateOpportunityContactRole(ctx, req.(*CreateOpportunityContactRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_DeleteOpportunityContactRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOpportunityContactRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).DeleteOpportunityContactRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_DeleteOpportunityContactRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).DeleteOpportunityContactRole(ctx, req.(*DeleteOpportunityContactRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CRMService_ListOpportunityContactRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOpportunityContactRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRMServiceServer).ListOpportunityContactRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CRMService_ListOpportunityContactRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRMServiceServer).ListOpportunityContactRoles(ctx, req.(*ListOpportunityContactRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CRMService_ServiceDesc is the grpc.ServiceDesc for CRMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CRMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crm.CRMService",
	HandlerType: (*CRMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCampaign",
			Handler:    _CRMService_CreateCampaign_Handler,
		},
		{
			MethodName: "GetCampaign",
			Handler:    _CRMService_GetCampaign_Handler,
		},
		{
			MethodName: "ListCampaigns",
			Handler:    _CRMService_ListCampaigns_Handler,
		},
		{
			MethodName: "UpdateCampaign",
			Handler:    _CRMService_UpdateCampaign_Handler,
		},
		{
			MethodName: "DeleteCampaign",
			Handler:    _CRMService_DeleteCampaign_Handler,
		},
		{
			MethodName: "AddCampaignMember",
			Handler:    _CRMService_AddCampaignMember_Handler,
		},
		{
			MethodName: "RemoveCampaignMember",
			Handler:    _CRMService_RemoveCampaignMember_Handler,
		},
		{
			MethodName: "ListCampaignMembers",
			Handler:    _CRMService_ListCampaignMembers_Handler,
		},
		{
			MethodName: "CreateLead",
			Handler:    _CRMService_CreateLead_Handler,
		},
		{
			MethodName: "GetLead",
			Handler:    _CRMService_GetLead_Handler,
		},
		{
			MethodName: "ListLeads",
			Handler:    _CRMService_ListLeads_Handler,
		},
		{
			MethodName: "UpdateLead",
			Handler:    _CRMService_UpdateLead_Handler,
		},
		{
			MethodName: "DeleteLead",
			Handler:    _CRMService_DeleteLead_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _CRMService_CreateAccount_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _CRMService_GetAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _CRMService_ListAccounts_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _CRMService_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _CRMService_DeleteAccount_Handler,
		},
		{
			MethodName: "CreateContact",
			Handler:    _CRMService_CreateContact_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _CRMService_GetContact_Handler,
		},
		{
			MethodName: "ListContacts",
			Handler:    _CRMService_ListContacts_Handler,
		},
		{
			MethodName: "ListAccountContacts",
			Handler:    _CRMService_ListAccountContacts_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _CRMService_UpdateContact_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _CRMService_DeleteContact_Handler,
		},
		{
			MethodName: "CreateCase",
			Handler:    _CRMService_CreateCase_Handler,
		},
		{
			MethodName: "GetCase",
			Handler:    _CRMService_GetCase_Handler,
		},
		{
			MethodName: "ListCases",
			Handler:    _CRMService_ListCases_Handler,
		},
		{
			MethodName: "ListContactCases",
			Handler:    _CRMService_ListContactCases_Handler,
		},
		{
			MethodName: "UpdateCase",
			Handler:    _CRMService_UpdateCase_Handler,
		},
		{
			MethodName: "DeleteCase",
			Handler:    _CRMService_DeleteCase_Handler,
		},
		{
			MethodName: "CreateOpportunity",
			Handler:    _CRMService_CreateOpportunity_Handler,
		},
		{
			MethodName: "GetOpportunity",
			Handler:    _CRMService_GetOpportunity_Handler,
		},
		{
			MethodName: "ListOpportunities",
			Handler:    _CRMService_ListOpportunities_Handler,
		},
		{
			MethodName: "ListAccountOpportunities",
			Handler:    _CRMService_ListAccountOpportunities_Handler,
		},
		{
			MethodName: "UpdateOpportunity",
			Handler:    _CRMService_UpdateOpportunity_Handler,
		},
		{
			MethodName: "DeleteOpportunity",
			Handler:    _CRMService_DeleteOpportunity_Handler,
		},
		{
			MethodName: "CreateContract",
			Handler:    _CRMService_CreateContract_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _CRMService_GetContract_Handler,
		},
		{
			MethodName: "ListContracts",
			Handler:    _CRMService_ListContracts_Handler,
		},
		{
			MethodName: "ListAccountContracts",
			Handler:    _CRMService_ListAccountContracts_Handler,
		},
		{
			MethodName: "UpdateContract",
			Handler:    _CRMService_UpdateContract_Handler,
		},
		{
			MethodName: "DeleteContract",
			Handler:    _CRMService_DeleteContract_Handler,
		},
		{
			MethodName: "CreateAccountContactRole",
			Handler:    _CRMService_CreateAccountContactRole_Handler,
		},
		{
			MethodName: "DeleteAccountContactRole",
			Handler:    _CRMService_DeleteAccountContactRole_Handler,
		},
		{
			MethodName: "ListAccountContactRoles",
			Handler:    _CRMService_ListAccountContactRoles_Handler,
		},
		{
			MethodName: "CreateOpportunityContactRole",
			Handler:    _CRMService_CreateOpportunityContactRole_Handler,
		},
		{
			MethodName: "DeleteOpportunityContactRole",
			Handler:    _CRMService_DeleteOpportunityContactRole_Handler,
		},
		{
			MethodName: "ListOpportunityContactRoles",
			Handler:    _CRMService_ListOpportunityContactRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer-relationship-service/service.proto",
}
