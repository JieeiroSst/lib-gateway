// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: shortlink-service/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShortlinkService_CreateLink_FullMethodName   = "/shortlink.ShortlinkService/CreateLink"
	ShortlinkService_GetLink_FullMethodName      = "/shortlink.ShortlinkService/GetLink"
	ShortlinkService_ListLinks_FullMethodName    = "/shortlink.ShortlinkService/ListLinks"
	ShortlinkService_DeleteLink_FullMethodName   = "/shortlink.ShortlinkService/DeleteLink"
	ShortlinkService_GetLinkStats_FullMethodName = "/shortlink.ShortlinkService/GetLinkStats"
)

// ShortlinkServiceClient is the client API for ShortlinkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortlinkServiceClient interface {
	CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*Link, error)
	GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*Link, error)
	ListLinks(ctx context.Context, in *ListLinksRequest, opts ...grpc.CallOption) (*ListLinksResponse, error)
	DeleteLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetLinkStats(ctx context.Context, in *LinkStatsRequest, opts ...grpc.CallOption) (*LinkStatsResponse, error)
}

type shortlinkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShortlinkServiceClient(cc grpc.ClientConnInterface) ShortlinkServiceClient {
	return &shortlinkServiceClient{cc}
}

func (c *shortlinkServiceClient) CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*Link, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Link)
	err := c.cc.Invoke(ctx, ShortlinkService_CreateLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkServiceClient) GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*Link, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Link)
	err := c.cc.Invoke(ctx, ShortlinkService_GetLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkServiceClient) ListLinks(ctx context.Context, in *ListLinksRequest, opts ...grpc.CallOption) (*ListLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLinksResponse)
	err := c.cc.Invoke(ctx, ShortlinkService_ListLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkServiceClient) DeleteLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ShortlinkService_DeleteLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortlinkServiceClient) GetLinkStats(ctx context.Context, in *LinkStatsRequest, opts ...grpc.CallOption) (*LinkStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkStatsResponse)
	err := c.cc.Invoke(ctx, ShortlinkService_GetLinkStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortlinkServiceServer is the server API for ShortlinkService service.
// All implementations must embed UnimplementedShortlinkServiceServer
// for forward compatibility.
type ShortlinkServiceServer interface {
	CreateLink(context.Context, *CreateLinkRequest) (*Link, error)
	GetLink(context.Context, *GetLinkRequest) (*Link, error)
	ListLinks(context.Context, *ListLinksRequest) (*ListLinksResponse, error)
	DeleteLink(context.Context, *GetLinkRequest) (*emptypb.Empty, error)
	GetLinkStats(context.Context, *LinkStatsRequest) (*LinkStatsResponse, error)
	mustEmbedUnimplementedShortlinkServiceServer()
}

// UnimplementedShortlinkServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShortlinkServiceServer struct{}

func (UnimplementedShortlinkServiceServer) CreateLink(context.Context, *CreateLinkRequest) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedShortlinkServiceServer) GetLink(context.Context, *GetLinkRequest) (*Link, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedShortlinkServiceServer) ListLinks(context.Context, *ListLinksRequest) (*ListLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinks not implemented")
}
func (UnimplementedShortlinkServiceServer) DeleteLink(context.Context, *GetLinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
}
func (UnimplementedShortlinkServiceServer) GetLinkStats(context.Context, *LinkStatsRequest) (*LinkStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLinkStats not implemented")
}
func (UnimplementedShortlinkServiceServer) mustEmbedUnimplementedShortlinkServiceServer() {}
func (UnimplementedShortlinkServiceServer) testEmbeddedByValue()                          {}

// UnsafeShortlinkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortlinkServiceServer will
// result in compilation errors.
type UnsafeShortlinkServiceServer interface {
	mustEmbedUnimplementedShortlinkServiceServer()
}

func RegisterShortlinkServiceServer(s grpc.ServiceRegistrar, srv ShortlinkServiceServer) {
	// If the following call pancis, it indicates UnimplementedShortlinkServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShortlinkService_ServiceDesc, srv)
}

func _ShortlinkService_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServiceServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlinkService_CreateLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServiceServer).CreateLink(ctx, req.(*CreateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlinkService_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServiceServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlinkService_GetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServiceServer).GetLink(ctx, req.(*GetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlinkService_ListLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServiceServer).ListLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlinkService_ListLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServiceServer).ListLinks(ctx, req.(*ListLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlinkService_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServiceServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlinkService_DeleteLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServiceServer).DeleteLink(ctx, req.(*GetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortlinkService_GetLinkStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortlinkServiceServer).GetLinkStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortlinkService_GetLinkStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortlinkServiceServer).GetLinkStats(ctx, req.(*LinkStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortlinkService_ServiceDesc is the grpc.ServiceDesc for ShortlinkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortlinkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortlink.ShortlinkService",
	HandlerType: (*ShortlinkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLink",
			Handler:    _ShortlinkService_CreateLink_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _ShortlinkService_GetLink_Handler,
		},
		{
			MethodName: "ListLinks",
			Handler:    _ShortlinkService_ListLinks_Handler,
		},
		{
			MethodName: "DeleteLink",
			Handler:    _ShortlinkService_DeleteLink_Handler,
		},
		{
			MethodName: "GetLinkStats",
			Handler:    _ShortlinkService_GetLinkStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortlink-service/service.proto",
}
