// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: point-service/service.proto

package pd

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RewardPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardPointsId  string                 `protobuf:"bytes,1,opt,name=reward_points_id,json=rewardPointsId,proto3" json:"reward_points_id,omitempty"`
	TotalPoints     int32                  `protobuf:"varint,2,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	PointsPending   int32                  `protobuf:"varint,3,opt,name=points_pending,json=pointsPending,proto3" json:"points_pending,omitempty"`
	PointsActive    int32                  `protobuf:"varint,4,opt,name=points_active,json=pointsActive,proto3" json:"points_active,omitempty"`
	PointsExpired   int32                  `protobuf:"varint,5,opt,name=points_expired,json=pointsExpired,proto3" json:"points_expired,omitempty"`
	PointsConverted int32                  `protobuf:"varint,6,opt,name=points_converted,json=pointsConverted,proto3" json:"points_converted,omitempty"`
	PointsCancelled int32                  `protobuf:"varint,7,opt,name=points_cancelled,json=pointsCancelled,proto3" json:"points_cancelled,omitempty"`
	ActivateDate    int64                  `protobuf:"varint,8,opt,name=activate_date,json=activateDate,proto3" json:"activate_date,omitempty"`
	ExpireDate      int64                  `protobuf:"varint,9,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *RewardPoint) Reset() {
	*x = RewardPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardPoint) ProtoMessage() {}

func (x *RewardPoint) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardPoint.ProtoReflect.Descriptor instead.
func (*RewardPoint) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{0}
}

func (x *RewardPoint) GetRewardPointsId() string {
	if x != nil {
		return x.RewardPointsId
	}
	return ""
}

func (x *RewardPoint) GetTotalPoints() int32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *RewardPoint) GetPointsPending() int32 {
	if x != nil {
		return x.PointsPending
	}
	return 0
}

func (x *RewardPoint) GetPointsActive() int32 {
	if x != nil {
		return x.PointsActive
	}
	return 0
}

func (x *RewardPoint) GetPointsExpired() int32 {
	if x != nil {
		return x.PointsExpired
	}
	return 0
}

func (x *RewardPoint) GetPointsConverted() int32 {
	if x != nil {
		return x.PointsConverted
	}
	return 0
}

func (x *RewardPoint) GetPointsCancelled() int32 {
	if x != nil {
		return x.PointsCancelled
	}
	return 0
}

func (x *RewardPoint) GetActivateDate() int64 {
	if x != nil {
		return x.ActivateDate
	}
	return 0
}

func (x *RewardPoint) GetExpireDate() int64 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

func (x *RewardPoint) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RewardPoint) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetRewardPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardPointsId string `protobuf:"bytes,1,opt,name=reward_points_id,json=rewardPointsId,proto3" json:"reward_points_id,omitempty"`
}

func (x *GetRewardPointRequest) Reset() {
	*x = GetRewardPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardPointRequest) ProtoMessage() {}

func (x *GetRewardPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardPointRequest.ProtoReflect.Descriptor instead.
func (*GetRewardPointRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetRewardPointRequest) GetRewardPointsId() string {
	if x != nil {
		return x.RewardPointsId
	}
	return ""
}

type GetRewardPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardPoint *RewardPoint `protobuf:"bytes,1,opt,name=reward_point,json=rewardPoint,proto3" json:"reward_point,omitempty"`
}

func (x *GetRewardPointResponse) Reset() {
	*x = GetRewardPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardPointResponse) ProtoMessage() {}

func (x *GetRewardPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardPointResponse.ProtoReflect.Descriptor instead.
func (*GetRewardPointResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetRewardPointResponse) GetRewardPoint() *RewardPoint {
	if x != nil {
		return x.RewardPoint
	}
	return nil
}

type ListRewardPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRewardPointsRequest) Reset() {
	*x = ListRewardPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardPointsRequest) ProtoMessage() {}

func (x *ListRewardPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardPointsRequest.ProtoReflect.Descriptor instead.
func (*ListRewardPointsRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListRewardPointsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRewardPointsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListRewardPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardPoints  []*RewardPoint `protobuf:"bytes,1,rep,name=reward_points,json=rewardPoints,proto3" json:"reward_points,omitempty"`
	NextPageToken string         `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalSize     int32          `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListRewardPointsResponse) Reset() {
	*x = ListRewardPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardPointsResponse) ProtoMessage() {}

func (x *ListRewardPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardPointsResponse.ProtoReflect.Descriptor instead.
func (*ListRewardPointsResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListRewardPointsResponse) GetRewardPoints() []*RewardPoint {
	if x != nil {
		return x.RewardPoints
	}
	return nil
}

func (x *ListRewardPointsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListRewardPointsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type CreateRewardPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPoints   int32 `protobuf:"varint,1,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	PointsPending int32 `protobuf:"varint,2,opt,name=points_pending,json=pointsPending,proto3" json:"points_pending,omitempty"`
	PointsActive  int32 `protobuf:"varint,3,opt,name=points_active,json=pointsActive,proto3" json:"points_active,omitempty"`
	ActivateDate  int64 `protobuf:"varint,4,opt,name=activate_date,json=activateDate,proto3" json:"activate_date,omitempty"`
	ExpireDate    int64 `protobuf:"varint,5,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
}

func (x *CreateRewardPointRequest) Reset() {
	*x = CreateRewardPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRewardPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRewardPointRequest) ProtoMessage() {}

func (x *CreateRewardPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRewardPointRequest.ProtoReflect.Descriptor instead.
func (*CreateRewardPointRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateRewardPointRequest) GetTotalPoints() int32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *CreateRewardPointRequest) GetPointsPending() int32 {
	if x != nil {
		return x.PointsPending
	}
	return 0
}

func (x *CreateRewardPointRequest) GetPointsActive() int32 {
	if x != nil {
		return x.PointsActive
	}
	return 0
}

func (x *CreateRewardPointRequest) GetActivateDate() int64 {
	if x != nil {
		return x.ActivateDate
	}
	return 0
}

func (x *CreateRewardPointRequest) GetExpireDate() int64 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

type CreateRewardPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardPoint *RewardPoint `protobuf:"bytes,1,opt,name=reward_point,json=rewardPoint,proto3" json:"reward_point,omitempty"`
}

func (x *CreateRewardPointResponse) Reset() {
	*x = CreateRewardPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRewardPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRewardPointResponse) ProtoMessage() {}

func (x *CreateRewardPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRewardPointResponse.ProtoReflect.Descriptor instead.
func (*CreateRewardPointResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{6}
}

func (x *CreateRewardPointResponse) GetRewardPoint() *RewardPoint {
	if x != nil {
		return x.RewardPoint
	}
	return nil
}

type UpdateRewardPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardPointsId  string `protobuf:"bytes,1,opt,name=reward_points_id,json=rewardPointsId,proto3" json:"reward_points_id,omitempty"`
	TotalPoints     int32  `protobuf:"varint,2,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	PointsPending   int32  `protobuf:"varint,3,opt,name=points_pending,json=pointsPending,proto3" json:"points_pending,omitempty"`
	PointsActive    int32  `protobuf:"varint,4,opt,name=points_active,json=pointsActive,proto3" json:"points_active,omitempty"`
	PointsExpired   int32  `protobuf:"varint,5,opt,name=points_expired,json=pointsExpired,proto3" json:"points_expired,omitempty"`
	PointsConverted int32  `protobuf:"varint,6,opt,name=points_converted,json=pointsConverted,proto3" json:"points_converted,omitempty"`
	PointsCancelled int32  `protobuf:"varint,7,opt,name=points_cancelled,json=pointsCancelled,proto3" json:"points_cancelled,omitempty"`
	ActivateDate    int64  `protobuf:"varint,8,opt,name=activate_date,json=activateDate,proto3" json:"activate_date,omitempty"`
	ExpireDate      int64  `protobuf:"varint,9,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
}

func (x *UpdateRewardPointRequest) Reset() {
	*x = UpdateRewardPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRewardPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRewardPointRequest) ProtoMessage() {}

func (x *UpdateRewardPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRewardPointRequest.ProtoReflect.Descriptor instead.
func (*UpdateRewardPointRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRewardPointRequest) GetRewardPointsId() string {
	if x != nil {
		return x.RewardPointsId
	}
	return ""
}

func (x *UpdateRewardPointRequest) GetTotalPoints() int32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *UpdateRewardPointRequest) GetPointsPending() int32 {
	if x != nil {
		return x.PointsPending
	}
	return 0
}

func (x *UpdateRewardPointRequest) GetPointsActive() int32 {
	if x != nil {
		return x.PointsActive
	}
	return 0
}

func (x *UpdateRewardPointRequest) GetPointsExpired() int32 {
	if x != nil {
		return x.PointsExpired
	}
	return 0
}

func (x *UpdateRewardPointRequest) GetPointsConverted() int32 {
	if x != nil {
		return x.PointsConverted
	}
	return 0
}

func (x *UpdateRewardPointRequest) GetPointsCancelled() int32 {
	if x != nil {
		return x.PointsCancelled
	}
	return 0
}

func (x *UpdateRewardPointRequest) GetActivateDate() int64 {
	if x != nil {
		return x.ActivateDate
	}
	return 0
}

func (x *UpdateRewardPointRequest) GetExpireDate() int64 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

type UpdateRewardPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardPoint *RewardPoint `protobuf:"bytes,1,opt,name=reward_point,json=rewardPoint,proto3" json:"reward_point,omitempty"`
}

func (x *UpdateRewardPointResponse) Reset() {
	*x = UpdateRewardPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRewardPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRewardPointResponse) ProtoMessage() {}

func (x *UpdateRewardPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRewardPointResponse.ProtoReflect.Descriptor instead.
func (*UpdateRewardPointResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRewardPointResponse) GetRewardPoint() *RewardPoint {
	if x != nil {
		return x.RewardPoint
	}
	return nil
}

type DeleteRewardPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardPointsId string `protobuf:"bytes,1,opt,name=reward_points_id,json=rewardPointsId,proto3" json:"reward_points_id,omitempty"`
}

func (x *DeleteRewardPointRequest) Reset() {
	*x = DeleteRewardPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRewardPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRewardPointRequest) ProtoMessage() {}

func (x *DeleteRewardPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRewardPointRequest.ProtoReflect.Descriptor instead.
func (*DeleteRewardPointRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteRewardPointRequest) GetRewardPointsId() string {
	if x != nil {
		return x.RewardPointsId
	}
	return ""
}

// RewardDiscount message definitions
type RewardDiscount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardDiscountId string                 `protobuf:"bytes,1,opt,name=reward_discount_id,json=rewardDiscountId,proto3" json:"reward_discount_id,omitempty"`
	TotalPoints      int32                  `protobuf:"varint,2,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	PointsPending    int32                  `protobuf:"varint,3,opt,name=points_pending,json=pointsPending,proto3" json:"points_pending,omitempty"`
	PointsActive     int32                  `protobuf:"varint,4,opt,name=points_active,json=pointsActive,proto3" json:"points_active,omitempty"`
	PointsExpired    int32                  `protobuf:"varint,5,opt,name=points_expired,json=pointsExpired,proto3" json:"points_expired,omitempty"`
	PointsConverted  int32                  `protobuf:"varint,6,opt,name=points_converted,json=pointsConverted,proto3" json:"points_converted,omitempty"`
	PointsCancelled  int32                  `protobuf:"varint,7,opt,name=points_cancelled,json=pointsCancelled,proto3" json:"points_cancelled,omitempty"`
	ActivateDate     int64                  `protobuf:"varint,8,opt,name=activate_date,json=activateDate,proto3" json:"activate_date,omitempty"`
	ExpireDate       int64                  `protobuf:"varint,9,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *RewardDiscount) Reset() {
	*x = RewardDiscount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardDiscount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardDiscount) ProtoMessage() {}

func (x *RewardDiscount) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardDiscount.ProtoReflect.Descriptor instead.
func (*RewardDiscount) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{10}
}

func (x *RewardDiscount) GetRewardDiscountId() string {
	if x != nil {
		return x.RewardDiscountId
	}
	return ""
}

func (x *RewardDiscount) GetTotalPoints() int32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *RewardDiscount) GetPointsPending() int32 {
	if x != nil {
		return x.PointsPending
	}
	return 0
}

func (x *RewardDiscount) GetPointsActive() int32 {
	if x != nil {
		return x.PointsActive
	}
	return 0
}

func (x *RewardDiscount) GetPointsExpired() int32 {
	if x != nil {
		return x.PointsExpired
	}
	return 0
}

func (x *RewardDiscount) GetPointsConverted() int32 {
	if x != nil {
		return x.PointsConverted
	}
	return 0
}

func (x *RewardDiscount) GetPointsCancelled() int32 {
	if x != nil {
		return x.PointsCancelled
	}
	return 0
}

func (x *RewardDiscount) GetActivateDate() int64 {
	if x != nil {
		return x.ActivateDate
	}
	return 0
}

func (x *RewardDiscount) GetExpireDate() int64 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

func (x *RewardDiscount) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *RewardDiscount) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetRewardDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardDiscountId string `protobuf:"bytes,1,opt,name=reward_discount_id,json=rewardDiscountId,proto3" json:"reward_discount_id,omitempty"`
}

func (x *GetRewardDiscountRequest) Reset() {
	*x = GetRewardDiscountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardDiscountRequest) ProtoMessage() {}

func (x *GetRewardDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardDiscountRequest.ProtoReflect.Descriptor instead.
func (*GetRewardDiscountRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetRewardDiscountRequest) GetRewardDiscountId() string {
	if x != nil {
		return x.RewardDiscountId
	}
	return ""
}

type GetRewardDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardDiscount *RewardDiscount `protobuf:"bytes,1,opt,name=reward_discount,json=rewardDiscount,proto3" json:"reward_discount,omitempty"`
}

func (x *GetRewardDiscountResponse) Reset() {
	*x = GetRewardDiscountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardDiscountResponse) ProtoMessage() {}

func (x *GetRewardDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardDiscountResponse.ProtoReflect.Descriptor instead.
func (*GetRewardDiscountResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetRewardDiscountResponse) GetRewardDiscount() *RewardDiscount {
	if x != nil {
		return x.RewardDiscount
	}
	return nil
}

type ListRewardDiscountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize  int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListRewardDiscountsRequest) Reset() {
	*x = ListRewardDiscountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardDiscountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardDiscountsRequest) ProtoMessage() {}

func (x *ListRewardDiscountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardDiscountsRequest.ProtoReflect.Descriptor instead.
func (*ListRewardDiscountsRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{13}
}

func (x *ListRewardDiscountsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRewardDiscountsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListRewardDiscountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardDiscounts []*RewardDiscount `protobuf:"bytes,1,rep,name=reward_discounts,json=rewardDiscounts,proto3" json:"reward_discounts,omitempty"`
	NextPageToken   string            `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalSize       int32             `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListRewardDiscountsResponse) Reset() {
	*x = ListRewardDiscountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRewardDiscountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRewardDiscountsResponse) ProtoMessage() {}

func (x *ListRewardDiscountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRewardDiscountsResponse.ProtoReflect.Descriptor instead.
func (*ListRewardDiscountsResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{14}
}

func (x *ListRewardDiscountsResponse) GetRewardDiscounts() []*RewardDiscount {
	if x != nil {
		return x.RewardDiscounts
	}
	return nil
}

func (x *ListRewardDiscountsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListRewardDiscountsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type CreateRewardDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalPoints   int32 `protobuf:"varint,1,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	PointsPending int32 `protobuf:"varint,2,opt,name=points_pending,json=pointsPending,proto3" json:"points_pending,omitempty"`
	PointsActive  int32 `protobuf:"varint,3,opt,name=points_active,json=pointsActive,proto3" json:"points_active,omitempty"`
	ActivateDate  int64 `protobuf:"varint,4,opt,name=activate_date,json=activateDate,proto3" json:"activate_date,omitempty"`
	ExpireDate    int64 `protobuf:"varint,5,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
}

func (x *CreateRewardDiscountRequest) Reset() {
	*x = CreateRewardDiscountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRewardDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRewardDiscountRequest) ProtoMessage() {}

func (x *CreateRewardDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRewardDiscountRequest.ProtoReflect.Descriptor instead.
func (*CreateRewardDiscountRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{15}
}

func (x *CreateRewardDiscountRequest) GetTotalPoints() int32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *CreateRewardDiscountRequest) GetPointsPending() int32 {
	if x != nil {
		return x.PointsPending
	}
	return 0
}

func (x *CreateRewardDiscountRequest) GetPointsActive() int32 {
	if x != nil {
		return x.PointsActive
	}
	return 0
}

func (x *CreateRewardDiscountRequest) GetActivateDate() int64 {
	if x != nil {
		return x.ActivateDate
	}
	return 0
}

func (x *CreateRewardDiscountRequest) GetExpireDate() int64 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

type CreateRewardDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardDiscount *RewardDiscount `protobuf:"bytes,1,opt,name=reward_discount,json=rewardDiscount,proto3" json:"reward_discount,omitempty"`
}

func (x *CreateRewardDiscountResponse) Reset() {
	*x = CreateRewardDiscountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRewardDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRewardDiscountResponse) ProtoMessage() {}

func (x *CreateRewardDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRewardDiscountResponse.ProtoReflect.Descriptor instead.
func (*CreateRewardDiscountResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{16}
}

func (x *CreateRewardDiscountResponse) GetRewardDiscount() *RewardDiscount {
	if x != nil {
		return x.RewardDiscount
	}
	return nil
}

type UpdateRewardDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardDiscountId string `protobuf:"bytes,1,opt,name=reward_discount_id,json=rewardDiscountId,proto3" json:"reward_discount_id,omitempty"`
	TotalPoints      int32  `protobuf:"varint,2,opt,name=total_points,json=totalPoints,proto3" json:"total_points,omitempty"`
	PointsPending    int32  `protobuf:"varint,3,opt,name=points_pending,json=pointsPending,proto3" json:"points_pending,omitempty"`
	PointsActive     int32  `protobuf:"varint,4,opt,name=points_active,json=pointsActive,proto3" json:"points_active,omitempty"`
	PointsExpired    int32  `protobuf:"varint,5,opt,name=points_expired,json=pointsExpired,proto3" json:"points_expired,omitempty"`
	PointsConverted  int32  `protobuf:"varint,6,opt,name=points_converted,json=pointsConverted,proto3" json:"points_converted,omitempty"`
	PointsCancelled  int32  `protobuf:"varint,7,opt,name=points_cancelled,json=pointsCancelled,proto3" json:"points_cancelled,omitempty"`
	ActivateDate     int64  `protobuf:"varint,8,opt,name=activate_date,json=activateDate,proto3" json:"activate_date,omitempty"`
	ExpireDate       int64  `protobuf:"varint,9,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
}

func (x *UpdateRewardDiscountRequest) Reset() {
	*x = UpdateRewardDiscountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRewardDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRewardDiscountRequest) ProtoMessage() {}

func (x *UpdateRewardDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRewardDiscountRequest.ProtoReflect.Descriptor instead.
func (*UpdateRewardDiscountRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateRewardDiscountRequest) GetRewardDiscountId() string {
	if x != nil {
		return x.RewardDiscountId
	}
	return ""
}

func (x *UpdateRewardDiscountRequest) GetTotalPoints() int32 {
	if x != nil {
		return x.TotalPoints
	}
	return 0
}

func (x *UpdateRewardDiscountRequest) GetPointsPending() int32 {
	if x != nil {
		return x.PointsPending
	}
	return 0
}

func (x *UpdateRewardDiscountRequest) GetPointsActive() int32 {
	if x != nil {
		return x.PointsActive
	}
	return 0
}

func (x *UpdateRewardDiscountRequest) GetPointsExpired() int32 {
	if x != nil {
		return x.PointsExpired
	}
	return 0
}

func (x *UpdateRewardDiscountRequest) GetPointsConverted() int32 {
	if x != nil {
		return x.PointsConverted
	}
	return 0
}

func (x *UpdateRewardDiscountRequest) GetPointsCancelled() int32 {
	if x != nil {
		return x.PointsCancelled
	}
	return 0
}

func (x *UpdateRewardDiscountRequest) GetActivateDate() int64 {
	if x != nil {
		return x.ActivateDate
	}
	return 0
}

func (x *UpdateRewardDiscountRequest) GetExpireDate() int64 {
	if x != nil {
		return x.ExpireDate
	}
	return 0
}

type UpdateRewardDiscountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardDiscount *RewardDiscount `protobuf:"bytes,1,opt,name=reward_discount,json=rewardDiscount,proto3" json:"reward_discount,omitempty"`
}

func (x *UpdateRewardDiscountResponse) Reset() {
	*x = UpdateRewardDiscountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRewardDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRewardDiscountResponse) ProtoMessage() {}

func (x *UpdateRewardDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRewardDiscountResponse.ProtoReflect.Descriptor instead.
func (*UpdateRewardDiscountResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateRewardDiscountResponse) GetRewardDiscount() *RewardDiscount {
	if x != nil {
		return x.RewardDiscount
	}
	return nil
}

type DeleteRewardDiscountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardDiscountId string `protobuf:"bytes,1,opt,name=reward_discount_id,json=rewardDiscountId,proto3" json:"reward_discount_id,omitempty"`
}

func (x *DeleteRewardDiscountRequest) Reset() {
	*x = DeleteRewardDiscountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRewardDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRewardDiscountRequest) ProtoMessage() {}

func (x *DeleteRewardDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRewardDiscountRequest.ProtoReflect.Descriptor instead.
func (*DeleteRewardDiscountRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteRewardDiscountRequest) GetRewardDiscountId() string {
	if x != nil {
		return x.RewardDiscountId
	}
	return ""
}

type ConvertedRewardPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewConvertId          string                 `protobuf:"bytes,1,opt,name=rew_convert_id,json=rewConvertId,proto3" json:"rew_convert_id,omitempty"`
	RewConvertOrdDetailId string                 `protobuf:"bytes,2,opt,name=rew_convert_ord_detail_id,json=rewConvertOrdDetailId,proto3" json:"rew_convert_ord_detail_id,omitempty"`
	RewConvertDiscountId  string                 `protobuf:"bytes,3,opt,name=rew_convert_discount_id,json=rewConvertDiscountId,proto3" json:"rew_convert_discount_id,omitempty"`
	RewConvertPoints      int32                  `protobuf:"varint,4,opt,name=rew_convert_points,json=rewConvertPoints,proto3" json:"rew_convert_points,omitempty"`
	RewConvertDate        int64                  `protobuf:"varint,5,opt,name=rew_convert_date,json=rewConvertDate,proto3" json:"rew_convert_date,omitempty"`
	CreatedAt             *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ConvertedRewardPoint) Reset() {
	*x = ConvertedRewardPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertedRewardPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertedRewardPoint) ProtoMessage() {}

func (x *ConvertedRewardPoint) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertedRewardPoint.ProtoReflect.Descriptor instead.
func (*ConvertedRewardPoint) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{20}
}

func (x *ConvertedRewardPoint) GetRewConvertId() string {
	if x != nil {
		return x.RewConvertId
	}
	return ""
}

func (x *ConvertedRewardPoint) GetRewConvertOrdDetailId() string {
	if x != nil {
		return x.RewConvertOrdDetailId
	}
	return ""
}

func (x *ConvertedRewardPoint) GetRewConvertDiscountId() string {
	if x != nil {
		return x.RewConvertDiscountId
	}
	return ""
}

func (x *ConvertedRewardPoint) GetRewConvertPoints() int32 {
	if x != nil {
		return x.RewConvertPoints
	}
	return 0
}

func (x *ConvertedRewardPoint) GetRewConvertDate() int64 {
	if x != nil {
		return x.RewConvertDate
	}
	return 0
}

func (x *ConvertedRewardPoint) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ConvertedRewardPoint) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetConvertedRewardPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewConvertId string `protobuf:"bytes,1,opt,name=rew_convert_id,json=rewConvertId,proto3" json:"rew_convert_id,omitempty"`
}

func (x *GetConvertedRewardPointRequest) Reset() {
	*x = GetConvertedRewardPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConvertedRewardPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConvertedRewardPointRequest) ProtoMessage() {}

func (x *GetConvertedRewardPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConvertedRewardPointRequest.ProtoReflect.Descriptor instead.
func (*GetConvertedRewardPointRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetConvertedRewardPointRequest) GetRewConvertId() string {
	if x != nil {
		return x.RewConvertId
	}
	return ""
}

type GetConvertedRewardPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvertedRewardPoint *ConvertedRewardPoint `protobuf:"bytes,1,opt,name=converted_reward_point,json=convertedRewardPoint,proto3" json:"converted_reward_point,omitempty"`
}

func (x *GetConvertedRewardPointResponse) Reset() {
	*x = GetConvertedRewardPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConvertedRewardPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConvertedRewardPointResponse) ProtoMessage() {}

func (x *GetConvertedRewardPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConvertedRewardPointResponse.ProtoReflect.Descriptor instead.
func (*GetConvertedRewardPointResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetConvertedRewardPointResponse) GetConvertedRewardPoint() *ConvertedRewardPoint {
	if x != nil {
		return x.ConvertedRewardPoint
	}
	return nil
}

type ListConvertedRewardPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize         int32  `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken        string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	RewardPointsId   string `protobuf:"bytes,3,opt,name=reward_points_id,json=rewardPointsId,proto3" json:"reward_points_id,omitempty"`
	RewardDiscountId string `protobuf:"bytes,4,opt,name=reward_discount_id,json=rewardDiscountId,proto3" json:"reward_discount_id,omitempty"`
}

func (x *ListConvertedRewardPointsRequest) Reset() {
	*x = ListConvertedRewardPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConvertedRewardPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConvertedRewardPointsRequest) ProtoMessage() {}

func (x *ListConvertedRewardPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConvertedRewardPointsRequest.ProtoReflect.Descriptor instead.
func (*ListConvertedRewardPointsRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListConvertedRewardPointsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListConvertedRewardPointsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListConvertedRewardPointsRequest) GetRewardPointsId() string {
	if x != nil {
		return x.RewardPointsId
	}
	return ""
}

func (x *ListConvertedRewardPointsRequest) GetRewardDiscountId() string {
	if x != nil {
		return x.RewardDiscountId
	}
	return ""
}

type ListConvertedRewardPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvertedRewardPoints []*ConvertedRewardPoint `protobuf:"bytes,1,rep,name=converted_reward_points,json=convertedRewardPoints,proto3" json:"converted_reward_points,omitempty"`
	NextPageToken         string                  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalSize             int32                   `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *ListConvertedRewardPointsResponse) Reset() {
	*x = ListConvertedRewardPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListConvertedRewardPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConvertedRewardPointsResponse) ProtoMessage() {}

func (x *ListConvertedRewardPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConvertedRewardPointsResponse.ProtoReflect.Descriptor instead.
func (*ListConvertedRewardPointsResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{24}
}

func (x *ListConvertedRewardPointsResponse) GetConvertedRewardPoints() []*ConvertedRewardPoint {
	if x != nil {
		return x.ConvertedRewardPoints
	}
	return nil
}

func (x *ListConvertedRewardPointsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListConvertedRewardPointsResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type CreateConvertedRewardPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewConvertOrdDetailId string `protobuf:"bytes,1,opt,name=rew_convert_ord_detail_id,json=rewConvertOrdDetailId,proto3" json:"rew_convert_ord_detail_id,omitempty"`
	RewConvertDiscountId  string `protobuf:"bytes,2,opt,name=rew_convert_discount_id,json=rewConvertDiscountId,proto3" json:"rew_convert_discount_id,omitempty"`
	RewConvertPoints      int32  `protobuf:"varint,3,opt,name=rew_convert_points,json=rewConvertPoints,proto3" json:"rew_convert_points,omitempty"`
	RewConvertDate        int64  `protobuf:"varint,4,opt,name=rew_convert_date,json=rewConvertDate,proto3" json:"rew_convert_date,omitempty"`
}

func (x *CreateConvertedRewardPointRequest) Reset() {
	*x = CreateConvertedRewardPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConvertedRewardPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConvertedRewardPointRequest) ProtoMessage() {}

func (x *CreateConvertedRewardPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConvertedRewardPointRequest.ProtoReflect.Descriptor instead.
func (*CreateConvertedRewardPointRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{25}
}

func (x *CreateConvertedRewardPointRequest) GetRewConvertOrdDetailId() string {
	if x != nil {
		return x.RewConvertOrdDetailId
	}
	return ""
}

func (x *CreateConvertedRewardPointRequest) GetRewConvertDiscountId() string {
	if x != nil {
		return x.RewConvertDiscountId
	}
	return ""
}

func (x *CreateConvertedRewardPointRequest) GetRewConvertPoints() int32 {
	if x != nil {
		return x.RewConvertPoints
	}
	return 0
}

func (x *CreateConvertedRewardPointRequest) GetRewConvertDate() int64 {
	if x != nil {
		return x.RewConvertDate
	}
	return 0
}

type CreateConvertedRewardPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvertedRewardPoint *ConvertedRewardPoint `protobuf:"bytes,1,opt,name=converted_reward_point,json=convertedRewardPoint,proto3" json:"converted_reward_point,omitempty"`
}

func (x *CreateConvertedRewardPointResponse) Reset() {
	*x = CreateConvertedRewardPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConvertedRewardPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConvertedRewardPointResponse) ProtoMessage() {}

func (x *CreateConvertedRewardPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConvertedRewardPointResponse.ProtoReflect.Descriptor instead.
func (*CreateConvertedRewardPointResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{26}
}

func (x *CreateConvertedRewardPointResponse) GetConvertedRewardPoint() *ConvertedRewardPoint {
	if x != nil {
		return x.ConvertedRewardPoint
	}
	return nil
}

type UpdateConvertedRewardPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewConvertId          string `protobuf:"bytes,1,opt,name=rew_convert_id,json=rewConvertId,proto3" json:"rew_convert_id,omitempty"`
	RewConvertOrdDetailId string `protobuf:"bytes,2,opt,name=rew_convert_ord_detail_id,json=rewConvertOrdDetailId,proto3" json:"rew_convert_ord_detail_id,omitempty"`
	RewConvertDiscountId  string `protobuf:"bytes,3,opt,name=rew_convert_discount_id,json=rewConvertDiscountId,proto3" json:"rew_convert_discount_id,omitempty"`
	RewConvertPoints      int32  `protobuf:"varint,4,opt,name=rew_convert_points,json=rewConvertPoints,proto3" json:"rew_convert_points,omitempty"`
	RewConvertDate        int64  `protobuf:"varint,5,opt,name=rew_convert_date,json=rewConvertDate,proto3" json:"rew_convert_date,omitempty"`
}

func (x *UpdateConvertedRewardPointRequest) Reset() {
	*x = UpdateConvertedRewardPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConvertedRewardPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConvertedRewardPointRequest) ProtoMessage() {}

func (x *UpdateConvertedRewardPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConvertedRewardPointRequest.ProtoReflect.Descriptor instead.
func (*UpdateConvertedRewardPointRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateConvertedRewardPointRequest) GetRewConvertId() string {
	if x != nil {
		return x.RewConvertId
	}
	return ""
}

func (x *UpdateConvertedRewardPointRequest) GetRewConvertOrdDetailId() string {
	if x != nil {
		return x.RewConvertOrdDetailId
	}
	return ""
}

func (x *UpdateConvertedRewardPointRequest) GetRewConvertDiscountId() string {
	if x != nil {
		return x.RewConvertDiscountId
	}
	return ""
}

func (x *UpdateConvertedRewardPointRequest) GetRewConvertPoints() int32 {
	if x != nil {
		return x.RewConvertPoints
	}
	return 0
}

func (x *UpdateConvertedRewardPointRequest) GetRewConvertDate() int64 {
	if x != nil {
		return x.RewConvertDate
	}
	return 0
}

type UpdateConvertedRewardPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvertedRewardPoint *ConvertedRewardPoint `protobuf:"bytes,1,opt,name=converted_reward_point,json=convertedRewardPoint,proto3" json:"converted_reward_point,omitempty"`
}

func (x *UpdateConvertedRewardPointResponse) Reset() {
	*x = UpdateConvertedRewardPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConvertedRewardPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConvertedRewardPointResponse) ProtoMessage() {}

func (x *UpdateConvertedRewardPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConvertedRewardPointResponse.ProtoReflect.Descriptor instead.
func (*UpdateConvertedRewardPointResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateConvertedRewardPointResponse) GetConvertedRewardPoint() *ConvertedRewardPoint {
	if x != nil {
		return x.ConvertedRewardPoint
	}
	return nil
}

type DeleteConvertedRewardPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewConvertId string `protobuf:"bytes,1,opt,name=rew_convert_id,json=rewConvertId,proto3" json:"rew_convert_id,omitempty"`
}

func (x *DeleteConvertedRewardPointRequest) Reset() {
	*x = DeleteConvertedRewardPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteConvertedRewardPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConvertedRewardPointRequest) ProtoMessage() {}

func (x *DeleteConvertedRewardPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConvertedRewardPointRequest.ProtoReflect.Descriptor instead.
func (*DeleteConvertedRewardPointRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteConvertedRewardPointRequest) GetRewConvertId() string {
	if x != nil {
		return x.RewConvertId
	}
	return ""
}

type ConvertPointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardPointsId        string `protobuf:"bytes,1,opt,name=reward_points_id,json=rewardPointsId,proto3" json:"reward_points_id,omitempty"`
	PointsToConvert       int32  `protobuf:"varint,2,opt,name=points_to_convert,json=pointsToConvert,proto3" json:"points_to_convert,omitempty"`
	RewConvertOrdDetailId string `protobuf:"bytes,3,opt,name=rew_convert_ord_detail_id,json=rewConvertOrdDetailId,proto3" json:"rew_convert_ord_detail_id,omitempty"`
	RewConvertDiscountId  string `protobuf:"bytes,4,opt,name=rew_convert_discount_id,json=rewConvertDiscountId,proto3" json:"rew_convert_discount_id,omitempty"`
}

func (x *ConvertPointsRequest) Reset() {
	*x = ConvertPointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertPointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertPointsRequest) ProtoMessage() {}

func (x *ConvertPointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertPointsRequest.ProtoReflect.Descriptor instead.
func (*ConvertPointsRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{30}
}

func (x *ConvertPointsRequest) GetRewardPointsId() string {
	if x != nil {
		return x.RewardPointsId
	}
	return ""
}

func (x *ConvertPointsRequest) GetPointsToConvert() int32 {
	if x != nil {
		return x.PointsToConvert
	}
	return 0
}

func (x *ConvertPointsRequest) GetRewConvertOrdDetailId() string {
	if x != nil {
		return x.RewConvertOrdDetailId
	}
	return ""
}

func (x *ConvertPointsRequest) GetRewConvertDiscountId() string {
	if x != nil {
		return x.RewConvertDiscountId
	}
	return ""
}

type ConvertPointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvertedRewardPoint *ConvertedRewardPoint `protobuf:"bytes,1,opt,name=converted_reward_point,json=convertedRewardPoint,proto3" json:"converted_reward_point,omitempty"`
	UpdatedRewardPoint   *RewardPoint          `protobuf:"bytes,2,opt,name=updated_reward_point,json=updatedRewardPoint,proto3" json:"updated_reward_point,omitempty"`
}

func (x *ConvertPointsResponse) Reset() {
	*x = ConvertPointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvertPointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertPointsResponse) ProtoMessage() {}

func (x *ConvertPointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertPointsResponse.ProtoReflect.Descriptor instead.
func (*ConvertPointsResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{31}
}

func (x *ConvertPointsResponse) GetConvertedRewardPoint() *ConvertedRewardPoint {
	if x != nil {
		return x.ConvertedRewardPoint
	}
	return nil
}

func (x *ConvertPointsResponse) GetUpdatedRewardPoint() *RewardPoint {
	if x != nil {
		return x.UpdatedRewardPoint
	}
	return nil
}

type GetPointsHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardPointsId string `protobuf:"bytes,1,opt,name=reward_points_id,json=rewardPointsId,proto3" json:"reward_points_id,omitempty"`
	PageSize       int32  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken      string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	FromDate       int64  `protobuf:"varint,4,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	ToDate         int64  `protobuf:"varint,5,opt,name=to_date,json=toDate,proto3" json:"to_date,omitempty"`
}

func (x *GetPointsHistoryRequest) Reset() {
	*x = GetPointsHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPointsHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointsHistoryRequest) ProtoMessage() {}

func (x *GetPointsHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointsHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetPointsHistoryRequest) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{32}
}

func (x *GetPointsHistoryRequest) GetRewardPointsId() string {
	if x != nil {
		return x.RewardPointsId
	}
	return ""
}

func (x *GetPointsHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetPointsHistoryRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *GetPointsHistoryRequest) GetFromDate() int64 {
	if x != nil {
		return x.FromDate
	}
	return 0
}

func (x *GetPointsHistoryRequest) GetToDate() int64 {
	if x != nil {
		return x.ToDate
	}
	return 0
}

type GetPointsHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryEntries []*PointsHistoryEntry `protobuf:"bytes,1,rep,name=history_entries,json=historyEntries,proto3" json:"history_entries,omitempty"`
	NextPageToken  string                `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalSize      int32                 `protobuf:"varint,3,opt,name=total_size,json=totalSize,proto3" json:"total_size,omitempty"`
}

func (x *GetPointsHistoryResponse) Reset() {
	*x = GetPointsHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPointsHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointsHistoryResponse) ProtoMessage() {}

func (x *GetPointsHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointsHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetPointsHistoryResponse) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{33}
}

func (x *GetPointsHistoryResponse) GetHistoryEntries() []*PointsHistoryEntry {
	if x != nil {
		return x.HistoryEntries
	}
	return nil
}

func (x *GetPointsHistoryResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GetPointsHistoryResponse) GetTotalSize() int32 {
	if x != nil {
		return x.TotalSize
	}
	return 0
}

type PointsHistoryEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryId        string                 `protobuf:"bytes,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	RewardPointsId string                 `protobuf:"bytes,2,opt,name=reward_points_id,json=rewardPointsId,proto3" json:"reward_points_id,omitempty"`
	PointsChanged  int32                  `protobuf:"varint,3,opt,name=points_changed,json=pointsChanged,proto3" json:"points_changed,omitempty"`
	ChangeType     string                 `protobuf:"bytes,4,opt,name=change_type,json=changeType,proto3" json:"change_type,omitempty"` // "ADDED", "EXPIRED", "CONVERTED", "CANCELLED"
	ReferenceId    string                 `protobuf:"bytes,5,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	ChangeDate     int64                  `protobuf:"varint,6,opt,name=change_date,json=changeDate,proto3" json:"change_date,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *PointsHistoryEntry) Reset() {
	*x = PointsHistoryEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_point_service_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointsHistoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointsHistoryEntry) ProtoMessage() {}

func (x *PointsHistoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_point_service_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointsHistoryEntry.ProtoReflect.Descriptor instead.
func (*PointsHistoryEntry) Descriptor() ([]byte, []int) {
	return file_point_service_service_proto_rawDescGZIP(), []int{34}
}

func (x *PointsHistoryEntry) GetEntryId() string {
	if x != nil {
		return x.EntryId
	}
	return ""
}

func (x *PointsHistoryEntry) GetRewardPointsId() string {
	if x != nil {
		return x.RewardPointsId
	}
	return ""
}

func (x *PointsHistoryEntry) GetPointsChanged() int32 {
	if x != nil {
		return x.PointsChanged
	}
	return 0
}

func (x *PointsHistoryEntry) GetChangeType() string {
	if x != nil {
		return x.ChangeType
	}
	return ""
}

func (x *PointsHistoryEntry) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (x *PointsHistoryEntry) GetChangeDate() int64 {
	if x != nil {
		return x.ChangeDate
	}
	return 0
}

func (x *PointsHistoryEntry) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_point_service_service_proto protoreflect.FileDescriptor

var file_point_service_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xdf, 0x03, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x41, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x55, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9a, 0x01,
	0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0d, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65,
	0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0xf6, 0x02, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x52, 0x0a, 0x19, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x44, 0x0a,
	0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x49, 0x64, 0x22, 0xe6, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x48, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa6, 0x01,
	0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x5e, 0x0a, 0x1c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfd, 0x02, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0x5e, 0x0a, 0x1c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x1b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xfb, 0x02, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x72, 0x65, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x77, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49,
	0x64, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x46, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x64, 0x22, 0x74,
	0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xbf, 0x01,
	0x0a, 0x21, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0xec, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x77,
	0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x19, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x4f, 0x72, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65,
	0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x77, 0x0a, 0x22,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65,
	0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x49, 0x64,
	0x22, 0xdd, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12,
	0x38, 0x0a, 0x19, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x77, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x72, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x77, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x22, 0xb0, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x44, 0x0a,
	0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x12, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x32, 0xd2, 0x12, 0x0a, 0x13, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7b,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1c, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x6e, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x1e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x87, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x3a, 0x01, 0x2a, 0x1a, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x7a, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1f, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x26, 0x2a, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x7a, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12,
	0x80, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x12, 0x95, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x1a,
	0x29, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x85, 0x01, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x2a, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x12, 0x93, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x27, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x99, 0x01, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xaa, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x31, 0x3a, 0x01, 0x2a, 0x1a, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x28, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x2a, 0x2c, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01,
	0x2a, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x12,
	0x89, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x06, 0x5a, 0x04, 0x2e,
	0x2f, 0x70, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_point_service_service_proto_rawDescOnce sync.Once
	file_point_service_service_proto_rawDescData = file_point_service_service_proto_rawDesc
)

func file_point_service_service_proto_rawDescGZIP() []byte {
	file_point_service_service_proto_rawDescOnce.Do(func() {
		file_point_service_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_point_service_service_proto_rawDescData)
	})
	return file_point_service_service_proto_rawDescData
}

var file_point_service_service_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_point_service_service_proto_goTypes = []any{
	(*RewardPoint)(nil),                        // 0: point.RewardPoint
	(*GetRewardPointRequest)(nil),              // 1: point.GetRewardPointRequest
	(*GetRewardPointResponse)(nil),             // 2: point.GetRewardPointResponse
	(*ListRewardPointsRequest)(nil),            // 3: point.ListRewardPointsRequest
	(*ListRewardPointsResponse)(nil),           // 4: point.ListRewardPointsResponse
	(*CreateRewardPointRequest)(nil),           // 5: point.CreateRewardPointRequest
	(*CreateRewardPointResponse)(nil),          // 6: point.CreateRewardPointResponse
	(*UpdateRewardPointRequest)(nil),           // 7: point.UpdateRewardPointRequest
	(*UpdateRewardPointResponse)(nil),          // 8: point.UpdateRewardPointResponse
	(*DeleteRewardPointRequest)(nil),           // 9: point.DeleteRewardPointRequest
	(*RewardDiscount)(nil),                     // 10: point.RewardDiscount
	(*GetRewardDiscountRequest)(nil),           // 11: point.GetRewardDiscountRequest
	(*GetRewardDiscountResponse)(nil),          // 12: point.GetRewardDiscountResponse
	(*ListRewardDiscountsRequest)(nil),         // 13: point.ListRewardDiscountsRequest
	(*ListRewardDiscountsResponse)(nil),        // 14: point.ListRewardDiscountsResponse
	(*CreateRewardDiscountRequest)(nil),        // 15: point.CreateRewardDiscountRequest
	(*CreateRewardDiscountResponse)(nil),       // 16: point.CreateRewardDiscountResponse
	(*UpdateRewardDiscountRequest)(nil),        // 17: point.UpdateRewardDiscountRequest
	(*UpdateRewardDiscountResponse)(nil),       // 18: point.UpdateRewardDiscountResponse
	(*DeleteRewardDiscountRequest)(nil),        // 19: point.DeleteRewardDiscountRequest
	(*ConvertedRewardPoint)(nil),               // 20: point.ConvertedRewardPoint
	(*GetConvertedRewardPointRequest)(nil),     // 21: point.GetConvertedRewardPointRequest
	(*GetConvertedRewardPointResponse)(nil),    // 22: point.GetConvertedRewardPointResponse
	(*ListConvertedRewardPointsRequest)(nil),   // 23: point.ListConvertedRewardPointsRequest
	(*ListConvertedRewardPointsResponse)(nil),  // 24: point.ListConvertedRewardPointsResponse
	(*CreateConvertedRewardPointRequest)(nil),  // 25: point.CreateConvertedRewardPointRequest
	(*CreateConvertedRewardPointResponse)(nil), // 26: point.CreateConvertedRewardPointResponse
	(*UpdateConvertedRewardPointRequest)(nil),  // 27: point.UpdateConvertedRewardPointRequest
	(*UpdateConvertedRewardPointResponse)(nil), // 28: point.UpdateConvertedRewardPointResponse
	(*DeleteConvertedRewardPointRequest)(nil),  // 29: point.DeleteConvertedRewardPointRequest
	(*ConvertPointsRequest)(nil),               // 30: point.ConvertPointsRequest
	(*ConvertPointsResponse)(nil),              // 31: point.ConvertPointsResponse
	(*GetPointsHistoryRequest)(nil),            // 32: point.GetPointsHistoryRequest
	(*GetPointsHistoryResponse)(nil),           // 33: point.GetPointsHistoryResponse
	(*PointsHistoryEntry)(nil),                 // 34: point.PointsHistoryEntry
	(*timestamppb.Timestamp)(nil),              // 35: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                      // 36: google.protobuf.Empty
}
var file_point_service_service_proto_depIdxs = []int32{
	35, // 0: point.RewardPoint.created_at:type_name -> google.protobuf.Timestamp
	35, // 1: point.RewardPoint.updated_at:type_name -> google.protobuf.Timestamp
	0,  // 2: point.GetRewardPointResponse.reward_point:type_name -> point.RewardPoint
	0,  // 3: point.ListRewardPointsResponse.reward_points:type_name -> point.RewardPoint
	0,  // 4: point.CreateRewardPointResponse.reward_point:type_name -> point.RewardPoint
	0,  // 5: point.UpdateRewardPointResponse.reward_point:type_name -> point.RewardPoint
	35, // 6: point.RewardDiscount.created_at:type_name -> google.protobuf.Timestamp
	35, // 7: point.RewardDiscount.updated_at:type_name -> google.protobuf.Timestamp
	10, // 8: point.GetRewardDiscountResponse.reward_discount:type_name -> point.RewardDiscount
	10, // 9: point.ListRewardDiscountsResponse.reward_discounts:type_name -> point.RewardDiscount
	10, // 10: point.CreateRewardDiscountResponse.reward_discount:type_name -> point.RewardDiscount
	10, // 11: point.UpdateRewardDiscountResponse.reward_discount:type_name -> point.RewardDiscount
	35, // 12: point.ConvertedRewardPoint.created_at:type_name -> google.protobuf.Timestamp
	35, // 13: point.ConvertedRewardPoint.updated_at:type_name -> google.protobuf.Timestamp
	20, // 14: point.GetConvertedRewardPointResponse.converted_reward_point:type_name -> point.ConvertedRewardPoint
	20, // 15: point.ListConvertedRewardPointsResponse.converted_reward_points:type_name -> point.ConvertedRewardPoint
	20, // 16: point.CreateConvertedRewardPointResponse.converted_reward_point:type_name -> point.ConvertedRewardPoint
	20, // 17: point.UpdateConvertedRewardPointResponse.converted_reward_point:type_name -> point.ConvertedRewardPoint
	20, // 18: point.ConvertPointsResponse.converted_reward_point:type_name -> point.ConvertedRewardPoint
	0,  // 19: point.ConvertPointsResponse.updated_reward_point:type_name -> point.RewardPoint
	34, // 20: point.GetPointsHistoryResponse.history_entries:type_name -> point.PointsHistoryEntry
	35, // 21: point.PointsHistoryEntry.created_at:type_name -> google.protobuf.Timestamp
	1,  // 22: point.RewardPointsService.GetRewardPoint:input_type -> point.GetRewardPointRequest
	3,  // 23: point.RewardPointsService.ListRewardPoints:input_type -> point.ListRewardPointsRequest
	5,  // 24: point.RewardPointsService.CreateRewardPoint:input_type -> point.CreateRewardPointRequest
	7,  // 25: point.RewardPointsService.UpdateRewardPoint:input_type -> point.UpdateRewardPointRequest
	9,  // 26: point.RewardPointsService.DeleteRewardPoint:input_type -> point.DeleteRewardPointRequest
	11, // 27: point.RewardPointsService.GetRewardDiscount:input_type -> point.GetRewardDiscountRequest
	13, // 28: point.RewardPointsService.ListRewardDiscounts:input_type -> point.ListRewardDiscountsRequest
	15, // 29: point.RewardPointsService.CreateRewardDiscount:input_type -> point.CreateRewardDiscountRequest
	17, // 30: point.RewardPointsService.UpdateRewardDiscount:input_type -> point.UpdateRewardDiscountRequest
	19, // 31: point.RewardPointsService.DeleteRewardDiscount:input_type -> point.DeleteRewardDiscountRequest
	21, // 32: point.RewardPointsService.GetConvertedRewardPoint:input_type -> point.GetConvertedRewardPointRequest
	23, // 33: point.RewardPointsService.ListConvertedRewardPoints:input_type -> point.ListConvertedRewardPointsRequest
	25, // 34: point.RewardPointsService.CreateConvertedRewardPoint:input_type -> point.CreateConvertedRewardPointRequest
	27, // 35: point.RewardPointsService.UpdateConvertedRewardPoint:input_type -> point.UpdateConvertedRewardPointRequest
	29, // 36: point.RewardPointsService.DeleteConvertedRewardPoint:input_type -> point.DeleteConvertedRewardPointRequest
	30, // 37: point.RewardPointsService.ConvertPoints:input_type -> point.ConvertPointsRequest
	32, // 38: point.RewardPointsService.GetPointsHistory:input_type -> point.GetPointsHistoryRequest
	2,  // 39: point.RewardPointsService.GetRewardPoint:output_type -> point.GetRewardPointResponse
	4,  // 40: point.RewardPointsService.ListRewardPoints:output_type -> point.ListRewardPointsResponse
	6,  // 41: point.RewardPointsService.CreateRewardPoint:output_type -> point.CreateRewardPointResponse
	8,  // 42: point.RewardPointsService.UpdateRewardPoint:output_type -> point.UpdateRewardPointResponse
	36, // 43: point.RewardPointsService.DeleteRewardPoint:output_type -> google.protobuf.Empty
	12, // 44: point.RewardPointsService.GetRewardDiscount:output_type -> point.GetRewardDiscountResponse
	14, // 45: point.RewardPointsService.ListRewardDiscounts:output_type -> point.ListRewardDiscountsResponse
	16, // 46: point.RewardPointsService.CreateRewardDiscount:output_type -> point.CreateRewardDiscountResponse
	18, // 47: point.RewardPointsService.UpdateRewardDiscount:output_type -> point.UpdateRewardDiscountResponse
	36, // 48: point.RewardPointsService.DeleteRewardDiscount:output_type -> google.protobuf.Empty
	22, // 49: point.RewardPointsService.GetConvertedRewardPoint:output_type -> point.GetConvertedRewardPointResponse
	24, // 50: point.RewardPointsService.ListConvertedRewardPoints:output_type -> point.ListConvertedRewardPointsResponse
	26, // 51: point.RewardPointsService.CreateConvertedRewardPoint:output_type -> point.CreateConvertedRewardPointResponse
	28, // 52: point.RewardPointsService.UpdateConvertedRewardPoint:output_type -> point.UpdateConvertedRewardPointResponse
	36, // 53: point.RewardPointsService.DeleteConvertedRewardPoint:output_type -> google.protobuf.Empty
	31, // 54: point.RewardPointsService.ConvertPoints:output_type -> point.ConvertPointsResponse
	33, // 55: point.RewardPointsService.GetPointsHistory:output_type -> point.GetPointsHistoryResponse
	39, // [39:56] is the sub-list for method output_type
	22, // [22:39] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_point_service_service_proto_init() }
func file_point_service_service_proto_init() {
	if File_point_service_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_point_service_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RewardPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetRewardPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetRewardPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListRewardPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ListRewardPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRewardPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRewardPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRewardPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRewardPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRewardPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*RewardDiscount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetRewardDiscountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetRewardDiscountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ListRewardDiscountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ListRewardDiscountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRewardDiscountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRewardDiscountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRewardDiscountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRewardDiscountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteRewardDiscountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ConvertedRewardPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*GetConvertedRewardPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetConvertedRewardPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ListConvertedRewardPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ListConvertedRewardPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CreateConvertedRewardPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*CreateConvertedRewardPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateConvertedRewardPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateConvertedRewardPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteConvertedRewardPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ConvertPointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ConvertPointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*GetPointsHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*GetPointsHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_point_service_service_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*PointsHistoryEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_point_service_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_point_service_service_proto_goTypes,
		DependencyIndexes: file_point_service_service_proto_depIdxs,
		MessageInfos:      file_point_service_service_proto_msgTypes,
	}.Build()
	File_point_service_service_proto = out.File
	file_point_service_service_proto_rawDesc = nil
	file_point_service_service_proto_goTypes = nil
	file_point_service_service_proto_depIdxs = nil
}
