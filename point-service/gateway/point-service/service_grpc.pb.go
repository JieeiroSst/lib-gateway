// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: point-service/service.proto

package pd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RewardPointsService_GetRewardPoint_FullMethodName             = "/point.RewardPointsService/GetRewardPoint"
	RewardPointsService_ListRewardPoints_FullMethodName           = "/point.RewardPointsService/ListRewardPoints"
	RewardPointsService_CreateRewardPoint_FullMethodName          = "/point.RewardPointsService/CreateRewardPoint"
	RewardPointsService_UpdateRewardPoint_FullMethodName          = "/point.RewardPointsService/UpdateRewardPoint"
	RewardPointsService_DeleteRewardPoint_FullMethodName          = "/point.RewardPointsService/DeleteRewardPoint"
	RewardPointsService_GetRewardDiscount_FullMethodName          = "/point.RewardPointsService/GetRewardDiscount"
	RewardPointsService_ListRewardDiscounts_FullMethodName        = "/point.RewardPointsService/ListRewardDiscounts"
	RewardPointsService_CreateRewardDiscount_FullMethodName       = "/point.RewardPointsService/CreateRewardDiscount"
	RewardPointsService_UpdateRewardDiscount_FullMethodName       = "/point.RewardPointsService/UpdateRewardDiscount"
	RewardPointsService_DeleteRewardDiscount_FullMethodName       = "/point.RewardPointsService/DeleteRewardDiscount"
	RewardPointsService_GetConvertedRewardPoint_FullMethodName    = "/point.RewardPointsService/GetConvertedRewardPoint"
	RewardPointsService_ListConvertedRewardPoints_FullMethodName  = "/point.RewardPointsService/ListConvertedRewardPoints"
	RewardPointsService_CreateConvertedRewardPoint_FullMethodName = "/point.RewardPointsService/CreateConvertedRewardPoint"
	RewardPointsService_UpdateConvertedRewardPoint_FullMethodName = "/point.RewardPointsService/UpdateConvertedRewardPoint"
	RewardPointsService_DeleteConvertedRewardPoint_FullMethodName = "/point.RewardPointsService/DeleteConvertedRewardPoint"
	RewardPointsService_ConvertPoints_FullMethodName              = "/point.RewardPointsService/ConvertPoints"
	RewardPointsService_GetPointsHistory_FullMethodName           = "/point.RewardPointsService/GetPointsHistory"
)

// RewardPointsServiceClient is the client API for RewardPointsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// RewardPointsService defines the gRPC service for managing reward points
type RewardPointsServiceClient interface {
	// RewardPoint operations
	GetRewardPoint(ctx context.Context, in *GetRewardPointRequest, opts ...grpc.CallOption) (*GetRewardPointResponse, error)
	ListRewardPoints(ctx context.Context, in *ListRewardPointsRequest, opts ...grpc.CallOption) (*ListRewardPointsResponse, error)
	CreateRewardPoint(ctx context.Context, in *CreateRewardPointRequest, opts ...grpc.CallOption) (*CreateRewardPointResponse, error)
	UpdateRewardPoint(ctx context.Context, in *UpdateRewardPointRequest, opts ...grpc.CallOption) (*UpdateRewardPointResponse, error)
	DeleteRewardPoint(ctx context.Context, in *DeleteRewardPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRewardDiscount(ctx context.Context, in *GetRewardDiscountRequest, opts ...grpc.CallOption) (*GetRewardDiscountResponse, error)
	ListRewardDiscounts(ctx context.Context, in *ListRewardDiscountsRequest, opts ...grpc.CallOption) (*ListRewardDiscountsResponse, error)
	CreateRewardDiscount(ctx context.Context, in *CreateRewardDiscountRequest, opts ...grpc.CallOption) (*CreateRewardDiscountResponse, error)
	UpdateRewardDiscount(ctx context.Context, in *UpdateRewardDiscountRequest, opts ...grpc.CallOption) (*UpdateRewardDiscountResponse, error)
	DeleteRewardDiscount(ctx context.Context, in *DeleteRewardDiscountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetConvertedRewardPoint(ctx context.Context, in *GetConvertedRewardPointRequest, opts ...grpc.CallOption) (*GetConvertedRewardPointResponse, error)
	ListConvertedRewardPoints(ctx context.Context, in *ListConvertedRewardPointsRequest, opts ...grpc.CallOption) (*ListConvertedRewardPointsResponse, error)
	CreateConvertedRewardPoint(ctx context.Context, in *CreateConvertedRewardPointRequest, opts ...grpc.CallOption) (*CreateConvertedRewardPointResponse, error)
	UpdateConvertedRewardPoint(ctx context.Context, in *UpdateConvertedRewardPointRequest, opts ...grpc.CallOption) (*UpdateConvertedRewardPointResponse, error)
	DeleteConvertedRewardPoint(ctx context.Context, in *DeleteConvertedRewardPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ConvertPoints(ctx context.Context, in *ConvertPointsRequest, opts ...grpc.CallOption) (*ConvertPointsResponse, error)
	GetPointsHistory(ctx context.Context, in *GetPointsHistoryRequest, opts ...grpc.CallOption) (*GetPointsHistoryResponse, error)
}

type rewardPointsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRewardPointsServiceClient(cc grpc.ClientConnInterface) RewardPointsServiceClient {
	return &rewardPointsServiceClient{cc}
}

func (c *rewardPointsServiceClient) GetRewardPoint(ctx context.Context, in *GetRewardPointRequest, opts ...grpc.CallOption) (*GetRewardPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRewardPointResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_GetRewardPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) ListRewardPoints(ctx context.Context, in *ListRewardPointsRequest, opts ...grpc.CallOption) (*ListRewardPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRewardPointsResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_ListRewardPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) CreateRewardPoint(ctx context.Context, in *CreateRewardPointRequest, opts ...grpc.CallOption) (*CreateRewardPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRewardPointResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_CreateRewardPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) UpdateRewardPoint(ctx context.Context, in *UpdateRewardPointRequest, opts ...grpc.CallOption) (*UpdateRewardPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRewardPointResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_UpdateRewardPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) DeleteRewardPoint(ctx context.Context, in *DeleteRewardPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RewardPointsService_DeleteRewardPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) GetRewardDiscount(ctx context.Context, in *GetRewardDiscountRequest, opts ...grpc.CallOption) (*GetRewardDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRewardDiscountResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_GetRewardDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) ListRewardDiscounts(ctx context.Context, in *ListRewardDiscountsRequest, opts ...grpc.CallOption) (*ListRewardDiscountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRewardDiscountsResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_ListRewardDiscounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) CreateRewardDiscount(ctx context.Context, in *CreateRewardDiscountRequest, opts ...grpc.CallOption) (*CreateRewardDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRewardDiscountResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_CreateRewardDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) UpdateRewardDiscount(ctx context.Context, in *UpdateRewardDiscountRequest, opts ...grpc.CallOption) (*UpdateRewardDiscountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRewardDiscountResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_UpdateRewardDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) DeleteRewardDiscount(ctx context.Context, in *DeleteRewardDiscountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RewardPointsService_DeleteRewardDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) GetConvertedRewardPoint(ctx context.Context, in *GetConvertedRewardPointRequest, opts ...grpc.CallOption) (*GetConvertedRewardPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConvertedRewardPointResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_GetConvertedRewardPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) ListConvertedRewardPoints(ctx context.Context, in *ListConvertedRewardPointsRequest, opts ...grpc.CallOption) (*ListConvertedRewardPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConvertedRewardPointsResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_ListConvertedRewardPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) CreateConvertedRewardPoint(ctx context.Context, in *CreateConvertedRewardPointRequest, opts ...grpc.CallOption) (*CreateConvertedRewardPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConvertedRewardPointResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_CreateConvertedRewardPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) UpdateConvertedRewardPoint(ctx context.Context, in *UpdateConvertedRewardPointRequest, opts ...grpc.CallOption) (*UpdateConvertedRewardPointResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConvertedRewardPointResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_UpdateConvertedRewardPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) DeleteConvertedRewardPoint(ctx context.Context, in *DeleteConvertedRewardPointRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RewardPointsService_DeleteConvertedRewardPoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) ConvertPoints(ctx context.Context, in *ConvertPointsRequest, opts ...grpc.CallOption) (*ConvertPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConvertPointsResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_ConvertPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rewardPointsServiceClient) GetPointsHistory(ctx context.Context, in *GetPointsHistoryRequest, opts ...grpc.CallOption) (*GetPointsHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPointsHistoryResponse)
	err := c.cc.Invoke(ctx, RewardPointsService_GetPointsHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RewardPointsServiceServer is the server API for RewardPointsService service.
// All implementations must embed UnimplementedRewardPointsServiceServer
// for forward compatibility.
//
// RewardPointsService defines the gRPC service for managing reward points
type RewardPointsServiceServer interface {
	// RewardPoint operations
	GetRewardPoint(context.Context, *GetRewardPointRequest) (*GetRewardPointResponse, error)
	ListRewardPoints(context.Context, *ListRewardPointsRequest) (*ListRewardPointsResponse, error)
	CreateRewardPoint(context.Context, *CreateRewardPointRequest) (*CreateRewardPointResponse, error)
	UpdateRewardPoint(context.Context, *UpdateRewardPointRequest) (*UpdateRewardPointResponse, error)
	DeleteRewardPoint(context.Context, *DeleteRewardPointRequest) (*emptypb.Empty, error)
	GetRewardDiscount(context.Context, *GetRewardDiscountRequest) (*GetRewardDiscountResponse, error)
	ListRewardDiscounts(context.Context, *ListRewardDiscountsRequest) (*ListRewardDiscountsResponse, error)
	CreateRewardDiscount(context.Context, *CreateRewardDiscountRequest) (*CreateRewardDiscountResponse, error)
	UpdateRewardDiscount(context.Context, *UpdateRewardDiscountRequest) (*UpdateRewardDiscountResponse, error)
	DeleteRewardDiscount(context.Context, *DeleteRewardDiscountRequest) (*emptypb.Empty, error)
	GetConvertedRewardPoint(context.Context, *GetConvertedRewardPointRequest) (*GetConvertedRewardPointResponse, error)
	ListConvertedRewardPoints(context.Context, *ListConvertedRewardPointsRequest) (*ListConvertedRewardPointsResponse, error)
	CreateConvertedRewardPoint(context.Context, *CreateConvertedRewardPointRequest) (*CreateConvertedRewardPointResponse, error)
	UpdateConvertedRewardPoint(context.Context, *UpdateConvertedRewardPointRequest) (*UpdateConvertedRewardPointResponse, error)
	DeleteConvertedRewardPoint(context.Context, *DeleteConvertedRewardPointRequest) (*emptypb.Empty, error)
	ConvertPoints(context.Context, *ConvertPointsRequest) (*ConvertPointsResponse, error)
	GetPointsHistory(context.Context, *GetPointsHistoryRequest) (*GetPointsHistoryResponse, error)
	mustEmbedUnimplementedRewardPointsServiceServer()
}

// UnimplementedRewardPointsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRewardPointsServiceServer struct{}

func (UnimplementedRewardPointsServiceServer) GetRewardPoint(context.Context, *GetRewardPointRequest) (*GetRewardPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardPoint not implemented")
}
func (UnimplementedRewardPointsServiceServer) ListRewardPoints(context.Context, *ListRewardPointsRequest) (*ListRewardPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRewardPoints not implemented")
}
func (UnimplementedRewardPointsServiceServer) CreateRewardPoint(context.Context, *CreateRewardPointRequest) (*CreateRewardPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRewardPoint not implemented")
}
func (UnimplementedRewardPointsServiceServer) UpdateRewardPoint(context.Context, *UpdateRewardPointRequest) (*UpdateRewardPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRewardPoint not implemented")
}
func (UnimplementedRewardPointsServiceServer) DeleteRewardPoint(context.Context, *DeleteRewardPointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRewardPoint not implemented")
}
func (UnimplementedRewardPointsServiceServer) GetRewardDiscount(context.Context, *GetRewardDiscountRequest) (*GetRewardDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardDiscount not implemented")
}
func (UnimplementedRewardPointsServiceServer) ListRewardDiscounts(context.Context, *ListRewardDiscountsRequest) (*ListRewardDiscountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRewardDiscounts not implemented")
}
func (UnimplementedRewardPointsServiceServer) CreateRewardDiscount(context.Context, *CreateRewardDiscountRequest) (*CreateRewardDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRewardDiscount not implemented")
}
func (UnimplementedRewardPointsServiceServer) UpdateRewardDiscount(context.Context, *UpdateRewardDiscountRequest) (*UpdateRewardDiscountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRewardDiscount not implemented")
}
func (UnimplementedRewardPointsServiceServer) DeleteRewardDiscount(context.Context, *DeleteRewardDiscountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRewardDiscount not implemented")
}
func (UnimplementedRewardPointsServiceServer) GetConvertedRewardPoint(context.Context, *GetConvertedRewardPointRequest) (*GetConvertedRewardPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConvertedRewardPoint not implemented")
}
func (UnimplementedRewardPointsServiceServer) ListConvertedRewardPoints(context.Context, *ListConvertedRewardPointsRequest) (*ListConvertedRewardPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConvertedRewardPoints not implemented")
}
func (UnimplementedRewardPointsServiceServer) CreateConvertedRewardPoint(context.Context, *CreateConvertedRewardPointRequest) (*CreateConvertedRewardPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConvertedRewardPoint not implemented")
}
func (UnimplementedRewardPointsServiceServer) UpdateConvertedRewardPoint(context.Context, *UpdateConvertedRewardPointRequest) (*UpdateConvertedRewardPointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConvertedRewardPoint not implemented")
}
func (UnimplementedRewardPointsServiceServer) DeleteConvertedRewardPoint(context.Context, *DeleteConvertedRewardPointRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConvertedRewardPoint not implemented")
}
func (UnimplementedRewardPointsServiceServer) ConvertPoints(context.Context, *ConvertPointsRequest) (*ConvertPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertPoints not implemented")
}
func (UnimplementedRewardPointsServiceServer) GetPointsHistory(context.Context, *GetPointsHistoryRequest) (*GetPointsHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointsHistory not implemented")
}
func (UnimplementedRewardPointsServiceServer) mustEmbedUnimplementedRewardPointsServiceServer() {}
func (UnimplementedRewardPointsServiceServer) testEmbeddedByValue()                             {}

// UnsafeRewardPointsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RewardPointsServiceServer will
// result in compilation errors.
type UnsafeRewardPointsServiceServer interface {
	mustEmbedUnimplementedRewardPointsServiceServer()
}

func RegisterRewardPointsServiceServer(s grpc.ServiceRegistrar, srv RewardPointsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRewardPointsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RewardPointsService_ServiceDesc, srv)
}

func _RewardPointsService_GetRewardPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).GetRewardPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_GetRewardPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).GetRewardPoint(ctx, req.(*GetRewardPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_ListRewardPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRewardPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).ListRewardPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_ListRewardPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).ListRewardPoints(ctx, req.(*ListRewardPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_CreateRewardPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRewardPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).CreateRewardPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_CreateRewardPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).CreateRewardPoint(ctx, req.(*CreateRewardPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_UpdateRewardPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRewardPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).UpdateRewardPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_UpdateRewardPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).UpdateRewardPoint(ctx, req.(*UpdateRewardPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_DeleteRewardPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRewardPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).DeleteRewardPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_DeleteRewardPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).DeleteRewardPoint(ctx, req.(*DeleteRewardPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_GetRewardDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).GetRewardDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_GetRewardDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).GetRewardDiscount(ctx, req.(*GetRewardDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_ListRewardDiscounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRewardDiscountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).ListRewardDiscounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_ListRewardDiscounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).ListRewardDiscounts(ctx, req.(*ListRewardDiscountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_CreateRewardDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRewardDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).CreateRewardDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_CreateRewardDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).CreateRewardDiscount(ctx, req.(*CreateRewardDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_UpdateRewardDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRewardDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).UpdateRewardDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_UpdateRewardDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).UpdateRewardDiscount(ctx, req.(*UpdateRewardDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_DeleteRewardDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRewardDiscountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).DeleteRewardDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_DeleteRewardDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).DeleteRewardDiscount(ctx, req.(*DeleteRewardDiscountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_GetConvertedRewardPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConvertedRewardPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).GetConvertedRewardPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_GetConvertedRewardPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).GetConvertedRewardPoint(ctx, req.(*GetConvertedRewardPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_ListConvertedRewardPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConvertedRewardPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).ListConvertedRewardPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_ListConvertedRewardPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).ListConvertedRewardPoints(ctx, req.(*ListConvertedRewardPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_CreateConvertedRewardPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConvertedRewardPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).CreateConvertedRewardPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_CreateConvertedRewardPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).CreateConvertedRewardPoint(ctx, req.(*CreateConvertedRewardPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_UpdateConvertedRewardPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConvertedRewardPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).UpdateConvertedRewardPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_UpdateConvertedRewardPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).UpdateConvertedRewardPoint(ctx, req.(*UpdateConvertedRewardPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_DeleteConvertedRewardPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConvertedRewardPointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).DeleteConvertedRewardPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_DeleteConvertedRewardPoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).DeleteConvertedRewardPoint(ctx, req.(*DeleteConvertedRewardPointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_ConvertPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).ConvertPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_ConvertPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).ConvertPoints(ctx, req.(*ConvertPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RewardPointsService_GetPointsHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointsHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RewardPointsServiceServer).GetPointsHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RewardPointsService_GetPointsHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RewardPointsServiceServer).GetPointsHistory(ctx, req.(*GetPointsHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RewardPointsService_ServiceDesc is the grpc.ServiceDesc for RewardPointsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RewardPointsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "point.RewardPointsService",
	HandlerType: (*RewardPointsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRewardPoint",
			Handler:    _RewardPointsService_GetRewardPoint_Handler,
		},
		{
			MethodName: "ListRewardPoints",
			Handler:    _RewardPointsService_ListRewardPoints_Handler,
		},
		{
			MethodName: "CreateRewardPoint",
			Handler:    _RewardPointsService_CreateRewardPoint_Handler,
		},
		{
			MethodName: "UpdateRewardPoint",
			Handler:    _RewardPointsService_UpdateRewardPoint_Handler,
		},
		{
			MethodName: "DeleteRewardPoint",
			Handler:    _RewardPointsService_DeleteRewardPoint_Handler,
		},
		{
			MethodName: "GetRewardDiscount",
			Handler:    _RewardPointsService_GetRewardDiscount_Handler,
		},
		{
			MethodName: "ListRewardDiscounts",
			Handler:    _RewardPointsService_ListRewardDiscounts_Handler,
		},
		{
			MethodName: "CreateRewardDiscount",
			Handler:    _RewardPointsService_CreateRewardDiscount_Handler,
		},
		{
			MethodName: "UpdateRewardDiscount",
			Handler:    _RewardPointsService_UpdateRewardDiscount_Handler,
		},
		{
			MethodName: "DeleteRewardDiscount",
			Handler:    _RewardPointsService_DeleteRewardDiscount_Handler,
		},
		{
			MethodName: "GetConvertedRewardPoint",
			Handler:    _RewardPointsService_GetConvertedRewardPoint_Handler,
		},
		{
			MethodName: "ListConvertedRewardPoints",
			Handler:    _RewardPointsService_ListConvertedRewardPoints_Handler,
		},
		{
			MethodName: "CreateConvertedRewardPoint",
			Handler:    _RewardPointsService_CreateConvertedRewardPoint_Handler,
		},
		{
			MethodName: "UpdateConvertedRewardPoint",
			Handler:    _RewardPointsService_UpdateConvertedRewardPoint_Handler,
		},
		{
			MethodName: "DeleteConvertedRewardPoint",
			Handler:    _RewardPointsService_DeleteConvertedRewardPoint_Handler,
		},
		{
			MethodName: "ConvertPoints",
			Handler:    _RewardPointsService_ConvertPoints_Handler,
		},
		{
			MethodName: "GetPointsHistory",
			Handler:    _RewardPointsService_GetPointsHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "point-service/service.proto",
}
