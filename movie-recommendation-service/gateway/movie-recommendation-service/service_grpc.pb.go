// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: movie-recommendation-service/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MovieRecommendationService_GetMovie_FullMethodName                       = "/movie_recommendation.MovieRecommendationService/GetMovie"
	MovieRecommendationService_ListMovies_FullMethodName                     = "/movie_recommendation.MovieRecommendationService/ListMovies"
	MovieRecommendationService_CreateMovie_FullMethodName                    = "/movie_recommendation.MovieRecommendationService/CreateMovie"
	MovieRecommendationService_UpdateMovie_FullMethodName                    = "/movie_recommendation.MovieRecommendationService/UpdateMovie"
	MovieRecommendationService_DeleteMovie_FullMethodName                    = "/movie_recommendation.MovieRecommendationService/DeleteMovie"
	MovieRecommendationService_GetUser_FullMethodName                        = "/movie_recommendation.MovieRecommendationService/GetUser"
	MovieRecommendationService_CreateUser_FullMethodName                     = "/movie_recommendation.MovieRecommendationService/CreateUser"
	MovieRecommendationService_UpdateUser_FullMethodName                     = "/movie_recommendation.MovieRecommendationService/UpdateUser"
	MovieRecommendationService_DeleteUser_FullMethodName                     = "/movie_recommendation.MovieRecommendationService/DeleteUser"
	MovieRecommendationService_RateMovie_FullMethodName                      = "/movie_recommendation.MovieRecommendationService/RateMovie"
	MovieRecommendationService_GetUserRatings_FullMethodName                 = "/movie_recommendation.MovieRecommendationService/GetUserRatings"
	MovieRecommendationService_SetUserPreference_FullMethodName              = "/movie_recommendation.MovieRecommendationService/SetUserPreference"
	MovieRecommendationService_GetUserPreferences_FullMethodName             = "/movie_recommendation.MovieRecommendationService/GetUserPreferences"
	MovieRecommendationService_AddMovieTag_FullMethodName                    = "/movie_recommendation.MovieRecommendationService/AddMovieTag"
	MovieRecommendationService_GetMovieTags_FullMethodName                   = "/movie_recommendation.MovieRecommendationService/GetMovieTags"
	MovieRecommendationService_GetTopRatedMovies_FullMethodName              = "/movie_recommendation.MovieRecommendationService/GetTopRatedMovies"
	MovieRecommendationService_GetPersonalizedRecommendations_FullMethodName = "/movie_recommendation.MovieRecommendationService/GetPersonalizedRecommendations"
	MovieRecommendationService_FindSimilarMovies_FullMethodName              = "/movie_recommendation.MovieRecommendationService/FindSimilarMovies"
	MovieRecommendationService_UpdatePopularityScores_FullMethodName         = "/movie_recommendation.MovieRecommendationService/UpdatePopularityScores"
)

// MovieRecommendationServiceClient is the client API for MovieRecommendationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieRecommendationServiceClient interface {
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*Movie, error)
	ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error)
	CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*Movie, error)
	UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*Movie, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RateMovie(ctx context.Context, in *RateMovieRequest, opts ...grpc.CallOption) (*Rating, error)
	GetUserRatings(ctx context.Context, in *GetUserRatingsRequest, opts ...grpc.CallOption) (*GetUserRatingsResponse, error)
	SetUserPreference(ctx context.Context, in *SetUserPreferenceRequest, opts ...grpc.CallOption) (*UserPreference, error)
	GetUserPreferences(ctx context.Context, in *GetUserPreferencesRequest, opts ...grpc.CallOption) (*GetUserPreferencesResponse, error)
	AddMovieTag(ctx context.Context, in *AddMovieTagRequest, opts ...grpc.CallOption) (*MovieTag, error)
	GetMovieTags(ctx context.Context, in *GetMovieTagsRequest, opts ...grpc.CallOption) (*GetMovieTagsResponse, error)
	GetTopRatedMovies(ctx context.Context, in *GetTopRatedMoviesRequest, opts ...grpc.CallOption) (*GetTopRatedMoviesResponse, error)
	GetPersonalizedRecommendations(ctx context.Context, in *GetPersonalizedRecommendationsRequest, opts ...grpc.CallOption) (*GetPersonalizedRecommendationsResponse, error)
	FindSimilarMovies(ctx context.Context, in *FindSimilarMoviesRequest, opts ...grpc.CallOption) (*FindSimilarMoviesResponse, error)
	UpdatePopularityScores(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type movieRecommendationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieRecommendationServiceClient(cc grpc.ClientConnInterface) MovieRecommendationServiceClient {
	return &movieRecommendationServiceClient{cc}
}

func (c *movieRecommendationServiceClient) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Movie)
	err := c.cc.Invoke(ctx, MovieRecommendationService_GetMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) ListMovies(ctx context.Context, in *ListMoviesRequest, opts ...grpc.CallOption) (*ListMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMoviesResponse)
	err := c.cc.Invoke(ctx, MovieRecommendationService_ListMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Movie)
	err := c.cc.Invoke(ctx, MovieRecommendationService_CreateMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*Movie, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Movie)
	err := c.cc.Invoke(ctx, MovieRecommendationService_UpdateMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MovieRecommendationService_DeleteMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, MovieRecommendationService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, MovieRecommendationService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(User)
	err := c.cc.Invoke(ctx, MovieRecommendationService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MovieRecommendationService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) RateMovie(ctx context.Context, in *RateMovieRequest, opts ...grpc.CallOption) (*Rating, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Rating)
	err := c.cc.Invoke(ctx, MovieRecommendationService_RateMovie_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) GetUserRatings(ctx context.Context, in *GetUserRatingsRequest, opts ...grpc.CallOption) (*GetUserRatingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRatingsResponse)
	err := c.cc.Invoke(ctx, MovieRecommendationService_GetUserRatings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) SetUserPreference(ctx context.Context, in *SetUserPreferenceRequest, opts ...grpc.CallOption) (*UserPreference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPreference)
	err := c.cc.Invoke(ctx, MovieRecommendationService_SetUserPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) GetUserPreferences(ctx context.Context, in *GetUserPreferencesRequest, opts ...grpc.CallOption) (*GetUserPreferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPreferencesResponse)
	err := c.cc.Invoke(ctx, MovieRecommendationService_GetUserPreferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) AddMovieTag(ctx context.Context, in *AddMovieTagRequest, opts ...grpc.CallOption) (*MovieTag, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MovieTag)
	err := c.cc.Invoke(ctx, MovieRecommendationService_AddMovieTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) GetMovieTags(ctx context.Context, in *GetMovieTagsRequest, opts ...grpc.CallOption) (*GetMovieTagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMovieTagsResponse)
	err := c.cc.Invoke(ctx, MovieRecommendationService_GetMovieTags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) GetTopRatedMovies(ctx context.Context, in *GetTopRatedMoviesRequest, opts ...grpc.CallOption) (*GetTopRatedMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopRatedMoviesResponse)
	err := c.cc.Invoke(ctx, MovieRecommendationService_GetTopRatedMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) GetPersonalizedRecommendations(ctx context.Context, in *GetPersonalizedRecommendationsRequest, opts ...grpc.CallOption) (*GetPersonalizedRecommendationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonalizedRecommendationsResponse)
	err := c.cc.Invoke(ctx, MovieRecommendationService_GetPersonalizedRecommendations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) FindSimilarMovies(ctx context.Context, in *FindSimilarMoviesRequest, opts ...grpc.CallOption) (*FindSimilarMoviesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindSimilarMoviesResponse)
	err := c.cc.Invoke(ctx, MovieRecommendationService_FindSimilarMovies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieRecommendationServiceClient) UpdatePopularityScores(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, MovieRecommendationService_UpdatePopularityScores_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieRecommendationServiceServer is the server API for MovieRecommendationService service.
// All implementations must embed UnimplementedMovieRecommendationServiceServer
// for forward compatibility.
type MovieRecommendationServiceServer interface {
	GetMovie(context.Context, *GetMovieRequest) (*Movie, error)
	ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error)
	CreateMovie(context.Context, *CreateMovieRequest) (*Movie, error)
	UpdateMovie(context.Context, *UpdateMovieRequest) (*Movie, error)
	DeleteMovie(context.Context, *DeleteMovieRequest) (*emptypb.Empty, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	RateMovie(context.Context, *RateMovieRequest) (*Rating, error)
	GetUserRatings(context.Context, *GetUserRatingsRequest) (*GetUserRatingsResponse, error)
	SetUserPreference(context.Context, *SetUserPreferenceRequest) (*UserPreference, error)
	GetUserPreferences(context.Context, *GetUserPreferencesRequest) (*GetUserPreferencesResponse, error)
	AddMovieTag(context.Context, *AddMovieTagRequest) (*MovieTag, error)
	GetMovieTags(context.Context, *GetMovieTagsRequest) (*GetMovieTagsResponse, error)
	GetTopRatedMovies(context.Context, *GetTopRatedMoviesRequest) (*GetTopRatedMoviesResponse, error)
	GetPersonalizedRecommendations(context.Context, *GetPersonalizedRecommendationsRequest) (*GetPersonalizedRecommendationsResponse, error)
	FindSimilarMovies(context.Context, *FindSimilarMoviesRequest) (*FindSimilarMoviesResponse, error)
	UpdatePopularityScores(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedMovieRecommendationServiceServer()
}

// UnimplementedMovieRecommendationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovieRecommendationServiceServer struct{}

func (UnimplementedMovieRecommendationServiceServer) GetMovie(context.Context, *GetMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) ListMovies(context.Context, *ListMoviesRequest) (*ListMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMovies not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) CreateMovie(context.Context, *CreateMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) UpdateMovie(context.Context, *UpdateMovieRequest) (*Movie, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) DeleteMovie(context.Context, *DeleteMovieRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) RateMovie(context.Context, *RateMovieRequest) (*Rating, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateMovie not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) GetUserRatings(context.Context, *GetUserRatingsRequest) (*GetUserRatingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRatings not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) SetUserPreference(context.Context, *SetUserPreferenceRequest) (*UserPreference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserPreference not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) GetUserPreferences(context.Context, *GetUserPreferencesRequest) (*GetUserPreferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPreferences not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) AddMovieTag(context.Context, *AddMovieTagRequest) (*MovieTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMovieTag not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) GetMovieTags(context.Context, *GetMovieTagsRequest) (*GetMovieTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieTags not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) GetTopRatedMovies(context.Context, *GetTopRatedMoviesRequest) (*GetTopRatedMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopRatedMovies not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) GetPersonalizedRecommendations(context.Context, *GetPersonalizedRecommendationsRequest) (*GetPersonalizedRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalizedRecommendations not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) FindSimilarMovies(context.Context, *FindSimilarMoviesRequest) (*FindSimilarMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSimilarMovies not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) UpdatePopularityScores(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePopularityScores not implemented")
}
func (UnimplementedMovieRecommendationServiceServer) mustEmbedUnimplementedMovieRecommendationServiceServer() {
}
func (UnimplementedMovieRecommendationServiceServer) testEmbeddedByValue() {}

// UnsafeMovieRecommendationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieRecommendationServiceServer will
// result in compilation errors.
type UnsafeMovieRecommendationServiceServer interface {
	mustEmbedUnimplementedMovieRecommendationServiceServer()
}

func RegisterMovieRecommendationServiceServer(s grpc.ServiceRegistrar, srv MovieRecommendationServiceServer) {
	// If the following call pancis, it indicates UnimplementedMovieRecommendationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovieRecommendationService_ServiceDesc, srv)
}

func _MovieRecommendationService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_GetMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).GetMovie(ctx, req.(*GetMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_ListMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).ListMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_ListMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).ListMovies(ctx, req.(*ListMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_CreateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).CreateMovie(ctx, req.(*CreateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_UpdateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).UpdateMovie(ctx, req.(*UpdateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_DeleteMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).DeleteMovie(ctx, req.(*DeleteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_RateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).RateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_RateMovie_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).RateMovie(ctx, req.(*RateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_GetUserRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRatingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).GetUserRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_GetUserRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).GetUserRatings(ctx, req.(*GetUserRatingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_SetUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).SetUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_SetUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).SetUserPreference(ctx, req.(*SetUserPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_GetUserPreferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPreferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).GetUserPreferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_GetUserPreferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).GetUserPreferences(ctx, req.(*GetUserPreferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_AddMovieTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMovieTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).AddMovieTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_AddMovieTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).AddMovieTag(ctx, req.(*AddMovieTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_GetMovieTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).GetMovieTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_GetMovieTags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).GetMovieTags(ctx, req.(*GetMovieTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_GetTopRatedMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopRatedMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).GetTopRatedMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_GetTopRatedMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).GetTopRatedMovies(ctx, req.(*GetTopRatedMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_GetPersonalizedRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalizedRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).GetPersonalizedRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_GetPersonalizedRecommendations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).GetPersonalizedRecommendations(ctx, req.(*GetPersonalizedRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_FindSimilarMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSimilarMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).FindSimilarMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_FindSimilarMovies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).FindSimilarMovies(ctx, req.(*FindSimilarMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieRecommendationService_UpdatePopularityScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieRecommendationServiceServer).UpdatePopularityScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MovieRecommendationService_UpdatePopularityScores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieRecommendationServiceServer).UpdatePopularityScores(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieRecommendationService_ServiceDesc is the grpc.ServiceDesc for MovieRecommendationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieRecommendationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie_recommendation.MovieRecommendationService",
	HandlerType: (*MovieRecommendationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovie",
			Handler:    _MovieRecommendationService_GetMovie_Handler,
		},
		{
			MethodName: "ListMovies",
			Handler:    _MovieRecommendationService_ListMovies_Handler,
		},
		{
			MethodName: "CreateMovie",
			Handler:    _MovieRecommendationService_CreateMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieRecommendationService_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieRecommendationService_DeleteMovie_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _MovieRecommendationService_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _MovieRecommendationService_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _MovieRecommendationService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _MovieRecommendationService_DeleteUser_Handler,
		},
		{
			MethodName: "RateMovie",
			Handler:    _MovieRecommendationService_RateMovie_Handler,
		},
		{
			MethodName: "GetUserRatings",
			Handler:    _MovieRecommendationService_GetUserRatings_Handler,
		},
		{
			MethodName: "SetUserPreference",
			Handler:    _MovieRecommendationService_SetUserPreference_Handler,
		},
		{
			MethodName: "GetUserPreferences",
			Handler:    _MovieRecommendationService_GetUserPreferences_Handler,
		},
		{
			MethodName: "AddMovieTag",
			Handler:    _MovieRecommendationService_AddMovieTag_Handler,
		},
		{
			MethodName: "GetMovieTags",
			Handler:    _MovieRecommendationService_GetMovieTags_Handler,
		},
		{
			MethodName: "GetTopRatedMovies",
			Handler:    _MovieRecommendationService_GetTopRatedMovies_Handler,
		},
		{
			MethodName: "GetPersonalizedRecommendations",
			Handler:    _MovieRecommendationService_GetPersonalizedRecommendations_Handler,
		},
		{
			MethodName: "FindSimilarMovies",
			Handler:    _MovieRecommendationService_FindSimilarMovies_Handler,
		},
		{
			MethodName: "UpdatePopularityScores",
			Handler:    _MovieRecommendationService_UpdatePopularityScores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie-recommendation-service/service.proto",
}
