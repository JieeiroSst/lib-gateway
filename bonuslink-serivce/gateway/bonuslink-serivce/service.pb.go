// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: bonuslink-serivce/service.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RewardCategory int32

const (
	RewardCategory_POINTS          RewardCategory = 0
	RewardCategory_BADGE           RewardCategory = 1
	RewardCategory_DISCOUNT        RewardCategory = 2
	RewardCategory_EXPERIENCE      RewardCategory = 3
	RewardCategory_PREMIUM_CONTENT RewardCategory = 4
)

// Enum value maps for RewardCategory.
var (
	RewardCategory_name = map[int32]string{
		0: "POINTS",
		1: "BADGE",
		2: "DISCOUNT",
		3: "EXPERIENCE",
		4: "PREMIUM_CONTENT",
	}
	RewardCategory_value = map[string]int32{
		"POINTS":          0,
		"BADGE":           1,
		"DISCOUNT":        2,
		"EXPERIENCE":      3,
		"PREMIUM_CONTENT": 4,
	}
)

func (x RewardCategory) Enum() *RewardCategory {
	p := new(RewardCategory)
	*p = x
	return p
}

func (x RewardCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RewardCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_bonuslink_serivce_service_proto_enumTypes[0].Descriptor()
}

func (RewardCategory) Type() protoreflect.EnumType {
	return &file_bonuslink_serivce_service_proto_enumTypes[0]
}

func (x RewardCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RewardCategory.Descriptor instead.
func (RewardCategory) EnumDescriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{0}
}

type CreateLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url             string  `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Title           string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description     *string `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`
	CreatedByUserId string  `protobuf:"bytes,4,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
}

func (x *CreateLinkRequest) Reset() {
	*x = CreateLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLinkRequest) ProtoMessage() {}

func (x *CreateLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLinkRequest.ProtoReflect.Descriptor instead.
func (*CreateLinkRequest) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateLinkRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreateLinkRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateLinkRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateLinkRequest) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

type GetLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId string `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
}

func (x *GetLinkRequest) Reset() {
	*x = GetLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinkRequest) ProtoMessage() {}

func (x *GetLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinkRequest.ProtoReflect.Descriptor instead.
func (*GetLinkRequest) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetLinkRequest) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

type ListLinksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageSize        int32   `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken       string  `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	CreatedByUserId *string `protobuf:"bytes,3,opt,name=created_by_user_id,json=createdByUserId,proto3,oneof" json:"created_by_user_id,omitempty"`
	ActiveOnly      *bool   `protobuf:"varint,4,opt,name=active_only,json=activeOnly,proto3,oneof" json:"active_only,omitempty"`
}

func (x *ListLinksRequest) Reset() {
	*x = ListLinksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLinksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLinksRequest) ProtoMessage() {}

func (x *ListLinksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLinksRequest.ProtoReflect.Descriptor instead.
func (*ListLinksRequest) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListLinksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLinksRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListLinksRequest) GetCreatedByUserId() string {
	if x != nil && x.CreatedByUserId != nil {
		return *x.CreatedByUserId
	}
	return ""
}

func (x *ListLinksRequest) GetActiveOnly() bool {
	if x != nil && x.ActiveOnly != nil {
		return *x.ActiveOnly
	}
	return false
}

type ListLinksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Links         []*LinkResponse `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
	NextPageToken string          `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	TotalCount    int32           `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListLinksResponse) Reset() {
	*x = ListLinksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLinksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLinksResponse) ProtoMessage() {}

func (x *ListLinksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLinksResponse.ProtoReflect.Descriptor instead.
func (*ListLinksResponse) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListLinksResponse) GetLinks() []*LinkResponse {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *ListLinksResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *ListLinksResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type DeactivateLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId string `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
}

func (x *DeactivateLinkRequest) Reset() {
	*x = DeactivateLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateLinkRequest) ProtoMessage() {}

func (x *DeactivateLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateLinkRequest.ProtoReflect.Descriptor instead.
func (*DeactivateLinkRequest) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeactivateLinkRequest) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

type LinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId          string                 `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	Url             string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Title           string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description     *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	CreatedByUserId string                 `protobuf:"bytes,5,opt,name=created_by_user_id,json=createdByUserId,proto3" json:"created_by_user_id,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	IsActive        bool                   `protobuf:"varint,8,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	Rewards         []*LinkRewardResponse  `protobuf:"bytes,9,rep,name=rewards,proto3" json:"rewards,omitempty"`
}

func (x *LinkResponse) Reset() {
	*x = LinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkResponse) ProtoMessage() {}

func (x *LinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkResponse.ProtoReflect.Descriptor instead.
func (*LinkResponse) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{5}
}

func (x *LinkResponse) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *LinkResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LinkResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *LinkResponse) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *LinkResponse) GetCreatedByUserId() string {
	if x != nil {
		return x.CreatedByUserId
	}
	return ""
}

func (x *LinkResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LinkResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *LinkResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *LinkResponse) GetRewards() []*LinkRewardResponse {
	if x != nil {
		return x.Rewards
	}
	return nil
}

type TrackLinkClickRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string  `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LinkId    string  `protobuf:"bytes,2,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	IpAddress *string `protobuf:"bytes,3,opt,name=ip_address,json=ipAddress,proto3,oneof" json:"ip_address,omitempty"`
	UserAgent *string `protobuf:"bytes,4,opt,name=user_agent,json=userAgent,proto3,oneof" json:"user_agent,omitempty"`
}

func (x *TrackLinkClickRequest) Reset() {
	*x = TrackLinkClickRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackLinkClickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackLinkClickRequest) ProtoMessage() {}

func (x *TrackLinkClickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackLinkClickRequest.ProtoReflect.Descriptor instead.
func (*TrackLinkClickRequest) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{6}
}

func (x *TrackLinkClickRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackLinkClickRequest) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *TrackLinkClickRequest) GetIpAddress() string {
	if x != nil && x.IpAddress != nil {
		return *x.IpAddress
	}
	return ""
}

func (x *TrackLinkClickRequest) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

type TrackLinkClickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClickId        string                 `protobuf:"bytes,1,opt,name=click_id,json=clickId,proto3" json:"click_id,omitempty"`
	ClickedAt      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=clicked_at,json=clickedAt,proto3" json:"clicked_at,omitempty"`
	AwardedRewards []*AwardedReward       `protobuf:"bytes,3,rep,name=awarded_rewards,json=awardedRewards,proto3" json:"awarded_rewards,omitempty"`
}

func (x *TrackLinkClickResponse) Reset() {
	*x = TrackLinkClickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackLinkClickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackLinkClickResponse) ProtoMessage() {}

func (x *TrackLinkClickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackLinkClickResponse.ProtoReflect.Descriptor instead.
func (*TrackLinkClickResponse) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{7}
}

func (x *TrackLinkClickResponse) GetClickId() string {
	if x != nil {
		return x.ClickId
	}
	return ""
}

func (x *TrackLinkClickResponse) GetClickedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ClickedAt
	}
	return nil
}

func (x *TrackLinkClickResponse) GetAwardedRewards() []*AwardedReward {
	if x != nil {
		return x.AwardedRewards
	}
	return nil
}

type AwardedReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserRewardId     string                 `protobuf:"bytes,1,opt,name=user_reward_id,json=userRewardId,proto3" json:"user_reward_id,omitempty"`
	RewardTypeName   string                 `protobuf:"bytes,2,opt,name=reward_type_name,json=rewardTypeName,proto3" json:"reward_type_name,omitempty"`
	RewardCategory   RewardCategory         `protobuf:"varint,3,opt,name=reward_category,json=rewardCategory,proto3,enum=bonuslink_serivce.RewardCategory" json:"reward_category,omitempty"`
	RewardValue      float64                `protobuf:"fixed64,4,opt,name=reward_value,json=rewardValue,proto3" json:"reward_value,omitempty"`
	ExpiresAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	BadgeImageUrl    *string                `protobuf:"bytes,6,opt,name=badge_image_url,json=badgeImageUrl,proto3,oneof" json:"badge_image_url,omitempty"`
	PremiumContentId *string                `protobuf:"bytes,7,opt,name=premium_content_id,json=premiumContentId,proto3,oneof" json:"premium_content_id,omitempty"`
}

func (x *AwardedReward) Reset() {
	*x = AwardedReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwardedReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwardedReward) ProtoMessage() {}

func (x *AwardedReward) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwardedReward.ProtoReflect.Descriptor instead.
func (*AwardedReward) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{8}
}

func (x *AwardedReward) GetUserRewardId() string {
	if x != nil {
		return x.UserRewardId
	}
	return ""
}

func (x *AwardedReward) GetRewardTypeName() string {
	if x != nil {
		return x.RewardTypeName
	}
	return ""
}

func (x *AwardedReward) GetRewardCategory() RewardCategory {
	if x != nil {
		return x.RewardCategory
	}
	return RewardCategory_POINTS
}

func (x *AwardedReward) GetRewardValue() float64 {
	if x != nil {
		return x.RewardValue
	}
	return 0
}

func (x *AwardedReward) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *AwardedReward) GetBadgeImageUrl() string {
	if x != nil && x.BadgeImageUrl != nil {
		return *x.BadgeImageUrl
	}
	return ""
}

func (x *AwardedReward) GetPremiumContentId() string {
	if x != nil && x.PremiumContentId != nil {
		return *x.PremiumContentId
	}
	return ""
}

type GetUserRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          string          `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	RewardCategory  *RewardCategory `protobuf:"varint,2,opt,name=reward_category,json=rewardCategory,proto3,enum=bonuslink_serivce.RewardCategory,oneof" json:"reward_category,omitempty"`
	IncludeRedeemed *bool           `protobuf:"varint,3,opt,name=include_redeemed,json=includeRedeemed,proto3,oneof" json:"include_redeemed,omitempty"`
	IncludeExpired  *bool           `protobuf:"varint,4,opt,name=include_expired,json=includeExpired,proto3,oneof" json:"include_expired,omitempty"`
	PageSize        int32           `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageToken       string          `protobuf:"bytes,6,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *GetUserRewardsRequest) Reset() {
	*x = GetUserRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRewardsRequest) ProtoMessage() {}

func (x *GetUserRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRewardsRequest.ProtoReflect.Descriptor instead.
func (*GetUserRewardsRequest) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserRewardsRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserRewardsRequest) GetRewardCategory() RewardCategory {
	if x != nil && x.RewardCategory != nil {
		return *x.RewardCategory
	}
	return RewardCategory_POINTS
}

func (x *GetUserRewardsRequest) GetIncludeRedeemed() bool {
	if x != nil && x.IncludeRedeemed != nil {
		return *x.IncludeRedeemed
	}
	return false
}

func (x *GetUserRewardsRequest) GetIncludeExpired() bool {
	if x != nil && x.IncludeExpired != nil {
		return *x.IncludeExpired
	}
	return false
}

func (x *GetUserRewardsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetUserRewardsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetUserRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rewards       []*UserRewardResponse `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards,omitempty"`
	NextPageToken string                `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *GetUserRewardsResponse) Reset() {
	*x = GetUserRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRewardsResponse) ProtoMessage() {}

func (x *GetUserRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRewardsResponse.ProtoReflect.Descriptor instead.
func (*GetUserRewardsResponse) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserRewardsResponse) GetRewards() []*UserRewardResponse {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *GetUserRewardsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UserRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserRewardId     string                 `protobuf:"bytes,1,opt,name=user_reward_id,json=userRewardId,proto3" json:"user_reward_id,omitempty"`
	UserId           string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LinkId           string                 `protobuf:"bytes,3,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	LinkTitle        string                 `protobuf:"bytes,4,opt,name=link_title,json=linkTitle,proto3" json:"link_title,omitempty"`
	RewardTypeName   string                 `protobuf:"bytes,5,opt,name=reward_type_name,json=rewardTypeName,proto3" json:"reward_type_name,omitempty"`
	RewardCategory   RewardCategory         `protobuf:"varint,6,opt,name=reward_category,json=rewardCategory,proto3,enum=bonuslink_serivce.RewardCategory" json:"reward_category,omitempty"`
	RewardValue      float64                `protobuf:"fixed64,7,opt,name=reward_value,json=rewardValue,proto3" json:"reward_value,omitempty"`
	AwardedAt        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=awarded_at,json=awardedAt,proto3" json:"awarded_at,omitempty"`
	RedeemedAt       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=redeemed_at,json=redeemedAt,proto3,oneof" json:"redeemed_at,omitempty"`
	ExpiresAt        *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
	BadgeImageUrl    *string                `protobuf:"bytes,11,opt,name=badge_image_url,json=badgeImageUrl,proto3,oneof" json:"badge_image_url,omitempty"`
	PremiumContentId *string                `protobuf:"bytes,12,opt,name=premium_content_id,json=premiumContentId,proto3,oneof" json:"premium_content_id,omitempty"`
}

func (x *UserRewardResponse) Reset() {
	*x = UserRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRewardResponse) ProtoMessage() {}

func (x *UserRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRewardResponse.ProtoReflect.Descriptor instead.
func (*UserRewardResponse) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{11}
}

func (x *UserRewardResponse) GetUserRewardId() string {
	if x != nil {
		return x.UserRewardId
	}
	return ""
}

func (x *UserRewardResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserRewardResponse) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *UserRewardResponse) GetLinkTitle() string {
	if x != nil {
		return x.LinkTitle
	}
	return ""
}

func (x *UserRewardResponse) GetRewardTypeName() string {
	if x != nil {
		return x.RewardTypeName
	}
	return ""
}

func (x *UserRewardResponse) GetRewardCategory() RewardCategory {
	if x != nil {
		return x.RewardCategory
	}
	return RewardCategory_POINTS
}

func (x *UserRewardResponse) GetRewardValue() float64 {
	if x != nil {
		return x.RewardValue
	}
	return 0
}

func (x *UserRewardResponse) GetAwardedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.AwardedAt
	}
	return nil
}

func (x *UserRewardResponse) GetRedeemedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RedeemedAt
	}
	return nil
}

func (x *UserRewardResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *UserRewardResponse) GetBadgeImageUrl() string {
	if x != nil && x.BadgeImageUrl != nil {
		return *x.BadgeImageUrl
	}
	return ""
}

func (x *UserRewardResponse) GetPremiumContentId() string {
	if x != nil && x.PremiumContentId != nil {
		return *x.PremiumContentId
	}
	return ""
}

type RedeemRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserRewardId string `protobuf:"bytes,1,opt,name=user_reward_id,json=userRewardId,proto3" json:"user_reward_id,omitempty"`
}

func (x *RedeemRewardRequest) Reset() {
	*x = RedeemRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeemRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemRewardRequest) ProtoMessage() {}

func (x *RedeemRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemRewardRequest.ProtoReflect.Descriptor instead.
func (*RedeemRewardRequest) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{12}
}

func (x *RedeemRewardRequest) GetUserRewardId() string {
	if x != nil {
		return x.UserRewardId
	}
	return ""
}

type RedeemRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success        bool                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	RedeemedReward *UserRewardResponse `protobuf:"bytes,2,opt,name=redeemed_reward,json=redeemedReward,proto3" json:"redeemed_reward,omitempty"`
}

func (x *RedeemRewardResponse) Reset() {
	*x = RedeemRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedeemRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedeemRewardResponse) ProtoMessage() {}

func (x *RedeemRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedeemRewardResponse.ProtoReflect.Descriptor instead.
func (*RedeemRewardResponse) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{13}
}

func (x *RedeemRewardResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RedeemRewardResponse) GetRedeemedReward() *UserRewardResponse {
	if x != nil {
		return x.RedeemedReward
	}
	return nil
}

type CreateLinkRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkId           string                 `protobuf:"bytes,1,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	RewardTypeId     int32                  `protobuf:"varint,2,opt,name=reward_type_id,json=rewardTypeId,proto3" json:"reward_type_id,omitempty"`
	RewardValue      float64                `protobuf:"fixed64,3,opt,name=reward_value,json=rewardValue,proto3" json:"reward_value,omitempty"`
	MaxClaimsPerUser int32                  `protobuf:"varint,4,opt,name=max_claims_per_user,json=maxClaimsPerUser,proto3" json:"max_claims_per_user,omitempty"`
	ExpiresAt        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
}

func (x *CreateLinkRewardRequest) Reset() {
	*x = CreateLinkRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLinkRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLinkRewardRequest) ProtoMessage() {}

func (x *CreateLinkRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLinkRewardRequest.ProtoReflect.Descriptor instead.
func (*CreateLinkRewardRequest) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{14}
}

func (x *CreateLinkRewardRequest) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *CreateLinkRewardRequest) GetRewardTypeId() int32 {
	if x != nil {
		return x.RewardTypeId
	}
	return 0
}

func (x *CreateLinkRewardRequest) GetRewardValue() float64 {
	if x != nil {
		return x.RewardValue
	}
	return 0
}

func (x *CreateLinkRewardRequest) GetMaxClaimsPerUser() int32 {
	if x != nil {
		return x.MaxClaimsPerUser
	}
	return 0
}

func (x *CreateLinkRewardRequest) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type UpdateLinkRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkRewardId     string                 `protobuf:"bytes,1,opt,name=link_reward_id,json=linkRewardId,proto3" json:"link_reward_id,omitempty"`
	RewardValue      *float64               `protobuf:"fixed64,2,opt,name=reward_value,json=rewardValue,proto3,oneof" json:"reward_value,omitempty"`
	MaxClaimsPerUser *int32                 `protobuf:"varint,3,opt,name=max_claims_per_user,json=maxClaimsPerUser,proto3,oneof" json:"max_claims_per_user,omitempty"`
	ExpiresAt        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
}

func (x *UpdateLinkRewardRequest) Reset() {
	*x = UpdateLinkRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLinkRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLinkRewardRequest) ProtoMessage() {}

func (x *UpdateLinkRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLinkRewardRequest.ProtoReflect.Descriptor instead.
func (*UpdateLinkRewardRequest) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateLinkRewardRequest) GetLinkRewardId() string {
	if x != nil {
		return x.LinkRewardId
	}
	return ""
}

func (x *UpdateLinkRewardRequest) GetRewardValue() float64 {
	if x != nil && x.RewardValue != nil {
		return *x.RewardValue
	}
	return 0
}

func (x *UpdateLinkRewardRequest) GetMaxClaimsPerUser() int32 {
	if x != nil && x.MaxClaimsPerUser != nil {
		return *x.MaxClaimsPerUser
	}
	return 0
}

func (x *UpdateLinkRewardRequest) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type LinkRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkRewardId     string                 `protobuf:"bytes,1,opt,name=link_reward_id,json=linkRewardId,proto3" json:"link_reward_id,omitempty"`
	LinkId           string                 `protobuf:"bytes,2,opt,name=link_id,json=linkId,proto3" json:"link_id,omitempty"`
	RewardTypeId     int32                  `protobuf:"varint,3,opt,name=reward_type_id,json=rewardTypeId,proto3" json:"reward_type_id,omitempty"`
	RewardTypeName   string                 `protobuf:"bytes,4,opt,name=reward_type_name,json=rewardTypeName,proto3" json:"reward_type_name,omitempty"`
	RewardCategory   RewardCategory         `protobuf:"varint,5,opt,name=reward_category,json=rewardCategory,proto3,enum=bonuslink_serivce.RewardCategory" json:"reward_category,omitempty"`
	RewardValue      float64                `protobuf:"fixed64,6,opt,name=reward_value,json=rewardValue,proto3" json:"reward_value,omitempty"`
	MaxClaimsPerUser int32                  `protobuf:"varint,7,opt,name=max_claims_per_user,json=maxClaimsPerUser,proto3" json:"max_claims_per_user,omitempty"`
	ExpiresAt        *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expires_at,json=expiresAt,proto3,oneof" json:"expires_at,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *LinkRewardResponse) Reset() {
	*x = LinkRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkRewardResponse) ProtoMessage() {}

func (x *LinkRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkRewardResponse.ProtoReflect.Descriptor instead.
func (*LinkRewardResponse) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{16}
}

func (x *LinkRewardResponse) GetLinkRewardId() string {
	if x != nil {
		return x.LinkRewardId
	}
	return ""
}

func (x *LinkRewardResponse) GetLinkId() string {
	if x != nil {
		return x.LinkId
	}
	return ""
}

func (x *LinkRewardResponse) GetRewardTypeId() int32 {
	if x != nil {
		return x.RewardTypeId
	}
	return 0
}

func (x *LinkRewardResponse) GetRewardTypeName() string {
	if x != nil {
		return x.RewardTypeName
	}
	return ""
}

func (x *LinkRewardResponse) GetRewardCategory() RewardCategory {
	if x != nil {
		return x.RewardCategory
	}
	return RewardCategory_POINTS
}

func (x *LinkRewardResponse) GetRewardValue() float64 {
	if x != nil {
		return x.RewardValue
	}
	return 0
}

func (x *LinkRewardResponse) GetMaxClaimsPerUser() int32 {
	if x != nil {
		return x.MaxClaimsPerUser
	}
	return 0
}

func (x *LinkRewardResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

func (x *LinkRewardResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type GetRewardStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	RewardTypeId *int32                 `protobuf:"varint,3,opt,name=reward_type_id,json=rewardTypeId,proto3,oneof" json:"reward_type_id,omitempty"`
	LinkId       *string                `protobuf:"bytes,4,opt,name=link_id,json=linkId,proto3,oneof" json:"link_id,omitempty"`
	GroupByDay   bool                   `protobuf:"varint,5,opt,name=group_by_day,json=groupByDay,proto3" json:"group_by_day,omitempty"`
}

func (x *GetRewardStatisticsRequest) Reset() {
	*x = GetRewardStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardStatisticsRequest) ProtoMessage() {}

func (x *GetRewardStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetRewardStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{17}
}

func (x *GetRewardStatisticsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetRewardStatisticsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *GetRewardStatisticsRequest) GetRewardTypeId() int32 {
	if x != nil && x.RewardTypeId != nil {
		return *x.RewardTypeId
	}
	return 0
}

func (x *GetRewardStatisticsRequest) GetLinkId() string {
	if x != nil && x.LinkId != nil {
		return *x.LinkId
	}
	return ""
}

func (x *GetRewardStatisticsRequest) GetGroupByDay() bool {
	if x != nil {
		return x.GroupByDay
	}
	return false
}

type DailyStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date                *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	ClicksCount         int32                  `protobuf:"varint,2,opt,name=clicks_count,json=clicksCount,proto3" json:"clicks_count,omitempty"`
	RewardsAwardedCount int32                  `protobuf:"varint,3,opt,name=rewards_awarded_count,json=rewardsAwardedCount,proto3" json:"rewards_awarded_count,omitempty"`
	TotalValueAwarded   float64                `protobuf:"fixed64,4,opt,name=total_value_awarded,json=totalValueAwarded,proto3" json:"total_value_awarded,omitempty"`
}

func (x *DailyStatistic) Reset() {
	*x = DailyStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyStatistic) ProtoMessage() {}

func (x *DailyStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyStatistic.ProtoReflect.Descriptor instead.
func (*DailyStatistic) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{18}
}

func (x *DailyStatistic) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DailyStatistic) GetClicksCount() int32 {
	if x != nil {
		return x.ClicksCount
	}
	return 0
}

func (x *DailyStatistic) GetRewardsAwardedCount() int32 {
	if x != nil {
		return x.RewardsAwardedCount
	}
	return 0
}

func (x *DailyStatistic) GetTotalValueAwarded() float64 {
	if x != nil {
		return x.TotalValueAwarded
	}
	return 0
}

type RewardTypeStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RewardTypeId        int32          `protobuf:"varint,1,opt,name=reward_type_id,json=rewardTypeId,proto3" json:"reward_type_id,omitempty"`
	RewardTypeName      string         `protobuf:"bytes,2,opt,name=reward_type_name,json=rewardTypeName,proto3" json:"reward_type_name,omitempty"`
	RewardCategory      RewardCategory `protobuf:"varint,3,opt,name=reward_category,json=rewardCategory,proto3,enum=bonuslink_serivce.RewardCategory" json:"reward_category,omitempty"`
	RewardsAwardedCount int32          `protobuf:"varint,4,opt,name=rewards_awarded_count,json=rewardsAwardedCount,proto3" json:"rewards_awarded_count,omitempty"`
	TotalValueAwarded   float64        `protobuf:"fixed64,5,opt,name=total_value_awarded,json=totalValueAwarded,proto3" json:"total_value_awarded,omitempty"`
}

func (x *RewardTypeStatistic) Reset() {
	*x = RewardTypeStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RewardTypeStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RewardTypeStatistic) ProtoMessage() {}

func (x *RewardTypeStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RewardTypeStatistic.ProtoReflect.Descriptor instead.
func (*RewardTypeStatistic) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{19}
}

func (x *RewardTypeStatistic) GetRewardTypeId() int32 {
	if x != nil {
		return x.RewardTypeId
	}
	return 0
}

func (x *RewardTypeStatistic) GetRewardTypeName() string {
	if x != nil {
		return x.RewardTypeName
	}
	return ""
}

func (x *RewardTypeStatistic) GetRewardCategory() RewardCategory {
	if x != nil {
		return x.RewardCategory
	}
	return RewardCategory_POINTS
}

func (x *RewardTypeStatistic) GetRewardsAwardedCount() int32 {
	if x != nil {
		return x.RewardsAwardedCount
	}
	return 0
}

func (x *RewardTypeStatistic) GetTotalValueAwarded() float64 {
	if x != nil {
		return x.TotalValueAwarded
	}
	return 0
}

type GetRewardStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate            *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate              *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	TotalClicks          int32                  `protobuf:"varint,3,opt,name=total_clicks,json=totalClicks,proto3" json:"total_clicks,omitempty"`
	TotalRewardsAwarded  int32                  `protobuf:"varint,4,opt,name=total_rewards_awarded,json=totalRewardsAwarded,proto3" json:"total_rewards_awarded,omitempty"`
	TotalValueAwarded    float64                `protobuf:"fixed64,5,opt,name=total_value_awarded,json=totalValueAwarded,proto3" json:"total_value_awarded,omitempty"`
	DailyStatistics      []*DailyStatistic      `protobuf:"bytes,6,rep,name=daily_statistics,json=dailyStatistics,proto3" json:"daily_statistics,omitempty"`
	RewardTypeStatistics []*RewardTypeStatistic `protobuf:"bytes,7,rep,name=reward_type_statistics,json=rewardTypeStatistics,proto3" json:"reward_type_statistics,omitempty"`
}

func (x *GetRewardStatisticsResponse) Reset() {
	*x = GetRewardStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bonuslink_serivce_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardStatisticsResponse) ProtoMessage() {}

func (x *GetRewardStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bonuslink_serivce_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetRewardStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_bonuslink_serivce_service_proto_rawDescGZIP(), []int{20}
}

func (x *GetRewardStatisticsResponse) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *GetRewardStatisticsResponse) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *GetRewardStatisticsResponse) GetTotalClicks() int32 {
	if x != nil {
		return x.TotalClicks
	}
	return 0
}

func (x *GetRewardStatisticsResponse) GetTotalRewardsAwarded() int32 {
	if x != nil {
		return x.TotalRewardsAwarded
	}
	return 0
}

func (x *GetRewardStatisticsResponse) GetTotalValueAwarded() float64 {
	if x != nil {
		return x.TotalValueAwarded
	}
	return 0
}

func (x *GetRewardStatisticsResponse) GetDailyStatistics() []*DailyStatistic {
	if x != nil {
		return x.DailyStatistics
	}
	return nil
}

func (x *GetRewardStatisticsResponse) GetRewardTypeStatistics() []*RewardTypeStatistic {
	if x != nil {
		return x.RewardTypeStatistics
	}
	return nil
}

var File_bonuslink_serivce_service_proto protoreflect.FileDescriptor

var file_bonuslink_serivce_service_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x73, 0x65, 0x72, 0x69,
	0x76, 0x63, 0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x76, 0x63, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b,
	0x49, 0x64, 0x22, 0xcd, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x30, 0x0a, 0x15, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x22, 0x87, 0x03, 0x0a, 0x0c, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69,
	0x6e, 0x6b, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69,
	0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x65, 0x64, 0x41, 0x74, 0x12, 0x49, 0x0a, 0x0f, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x76, 0x63, 0x65, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x0e, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x22, 0x94, 0x03, 0x0a, 0x0d, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x2b,
	0x0a, 0x0f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61, 0x64, 0x67, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70,
	0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x70, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xd8, 0x02, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x0f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x76, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8b, 0x05, 0x0a, 0x12, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x6e,
	0x6b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0d, 0x62, 0x61, 0x64, 0x67, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x72, 0x65,
	0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x10, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x13, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x76, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x65, 0x64,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0xf9, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f,
	0x61, 0x74, 0x22, 0x93, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13,
	0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x02, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x22, 0xcb, 0x03, 0x0a, 0x12, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a,
	0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x22, 0x98, 0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x62, 0x79, 0x5f, 0x64, 0x61, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x79, 0x44,
	0x61, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x22, 0x95, 0x02, 0x0a, 0x13,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x32, 0x0a, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x22, 0xc2, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x10,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0f, 0x64, 0x61, 0x69, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5c, 0x0a, 0x16, 0x72, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x52, 0x14, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2a, 0x5a, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x44, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x50, 0x45, 0x52, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x50, 0x52, 0x45, 0x4d, 0x49, 0x55, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45,
	0x4e, 0x54, 0x10, 0x04, 0x32, 0xde, 0x07, 0x0a, 0x10, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69,
	0x6e, 0x6b, 0x53, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x24, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x21, 0x2e, 0x62, 0x6f, 0x6e, 0x75,
	0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x09, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x23, 0x2e, 0x62, 0x6f, 0x6e,
	0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x76, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x28, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x43,
	0x6c, 0x69, 0x63, 0x6b, 0x12, 0x28, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69,
	0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76,
	0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x28, 0x2e, 0x62, 0x6f,
	0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x0c, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x26, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x76, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x65, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x62,
	0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x74, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2d, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69,
	0x6e, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x76, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bonuslink_serivce_service_proto_rawDescOnce sync.Once
	file_bonuslink_serivce_service_proto_rawDescData = file_bonuslink_serivce_service_proto_rawDesc
)

func file_bonuslink_serivce_service_proto_rawDescGZIP() []byte {
	file_bonuslink_serivce_service_proto_rawDescOnce.Do(func() {
		file_bonuslink_serivce_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_bonuslink_serivce_service_proto_rawDescData)
	})
	return file_bonuslink_serivce_service_proto_rawDescData
}

var file_bonuslink_serivce_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bonuslink_serivce_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_bonuslink_serivce_service_proto_goTypes = []any{
	(RewardCategory)(0),                 // 0: bonuslink_serivce.RewardCategory
	(*CreateLinkRequest)(nil),           // 1: bonuslink_serivce.CreateLinkRequest
	(*GetLinkRequest)(nil),              // 2: bonuslink_serivce.GetLinkRequest
	(*ListLinksRequest)(nil),            // 3: bonuslink_serivce.ListLinksRequest
	(*ListLinksResponse)(nil),           // 4: bonuslink_serivce.ListLinksResponse
	(*DeactivateLinkRequest)(nil),       // 5: bonuslink_serivce.DeactivateLinkRequest
	(*LinkResponse)(nil),                // 6: bonuslink_serivce.LinkResponse
	(*TrackLinkClickRequest)(nil),       // 7: bonuslink_serivce.TrackLinkClickRequest
	(*TrackLinkClickResponse)(nil),      // 8: bonuslink_serivce.TrackLinkClickResponse
	(*AwardedReward)(nil),               // 9: bonuslink_serivce.AwardedReward
	(*GetUserRewardsRequest)(nil),       // 10: bonuslink_serivce.GetUserRewardsRequest
	(*GetUserRewardsResponse)(nil),      // 11: bonuslink_serivce.GetUserRewardsResponse
	(*UserRewardResponse)(nil),          // 12: bonuslink_serivce.UserRewardResponse
	(*RedeemRewardRequest)(nil),         // 13: bonuslink_serivce.RedeemRewardRequest
	(*RedeemRewardResponse)(nil),        // 14: bonuslink_serivce.RedeemRewardResponse
	(*CreateLinkRewardRequest)(nil),     // 15: bonuslink_serivce.CreateLinkRewardRequest
	(*UpdateLinkRewardRequest)(nil),     // 16: bonuslink_serivce.UpdateLinkRewardRequest
	(*LinkRewardResponse)(nil),          // 17: bonuslink_serivce.LinkRewardResponse
	(*GetRewardStatisticsRequest)(nil),  // 18: bonuslink_serivce.GetRewardStatisticsRequest
	(*DailyStatistic)(nil),              // 19: bonuslink_serivce.DailyStatistic
	(*RewardTypeStatistic)(nil),         // 20: bonuslink_serivce.RewardTypeStatistic
	(*GetRewardStatisticsResponse)(nil), // 21: bonuslink_serivce.GetRewardStatisticsResponse
	(*timestamppb.Timestamp)(nil),       // 22: google.protobuf.Timestamp
}
var file_bonuslink_serivce_service_proto_depIdxs = []int32{
	6,  // 0: bonuslink_serivce.ListLinksResponse.links:type_name -> bonuslink_serivce.LinkResponse
	22, // 1: bonuslink_serivce.LinkResponse.created_at:type_name -> google.protobuf.Timestamp
	22, // 2: bonuslink_serivce.LinkResponse.updated_at:type_name -> google.protobuf.Timestamp
	17, // 3: bonuslink_serivce.LinkResponse.rewards:type_name -> bonuslink_serivce.LinkRewardResponse
	22, // 4: bonuslink_serivce.TrackLinkClickResponse.clicked_at:type_name -> google.protobuf.Timestamp
	9,  // 5: bonuslink_serivce.TrackLinkClickResponse.awarded_rewards:type_name -> bonuslink_serivce.AwardedReward
	0,  // 6: bonuslink_serivce.AwardedReward.reward_category:type_name -> bonuslink_serivce.RewardCategory
	22, // 7: bonuslink_serivce.AwardedReward.expires_at:type_name -> google.protobuf.Timestamp
	0,  // 8: bonuslink_serivce.GetUserRewardsRequest.reward_category:type_name -> bonuslink_serivce.RewardCategory
	12, // 9: bonuslink_serivce.GetUserRewardsResponse.rewards:type_name -> bonuslink_serivce.UserRewardResponse
	0,  // 10: bonuslink_serivce.UserRewardResponse.reward_category:type_name -> bonuslink_serivce.RewardCategory
	22, // 11: bonuslink_serivce.UserRewardResponse.awarded_at:type_name -> google.protobuf.Timestamp
	22, // 12: bonuslink_serivce.UserRewardResponse.redeemed_at:type_name -> google.protobuf.Timestamp
	22, // 13: bonuslink_serivce.UserRewardResponse.expires_at:type_name -> google.protobuf.Timestamp
	12, // 14: bonuslink_serivce.RedeemRewardResponse.redeemed_reward:type_name -> bonuslink_serivce.UserRewardResponse
	22, // 15: bonuslink_serivce.CreateLinkRewardRequest.expires_at:type_name -> google.protobuf.Timestamp
	22, // 16: bonuslink_serivce.UpdateLinkRewardRequest.expires_at:type_name -> google.protobuf.Timestamp
	0,  // 17: bonuslink_serivce.LinkRewardResponse.reward_category:type_name -> bonuslink_serivce.RewardCategory
	22, // 18: bonuslink_serivce.LinkRewardResponse.expires_at:type_name -> google.protobuf.Timestamp
	22, // 19: bonuslink_serivce.LinkRewardResponse.created_at:type_name -> google.protobuf.Timestamp
	22, // 20: bonuslink_serivce.GetRewardStatisticsRequest.start_date:type_name -> google.protobuf.Timestamp
	22, // 21: bonuslink_serivce.GetRewardStatisticsRequest.end_date:type_name -> google.protobuf.Timestamp
	22, // 22: bonuslink_serivce.DailyStatistic.date:type_name -> google.protobuf.Timestamp
	0,  // 23: bonuslink_serivce.RewardTypeStatistic.reward_category:type_name -> bonuslink_serivce.RewardCategory
	22, // 24: bonuslink_serivce.GetRewardStatisticsResponse.start_date:type_name -> google.protobuf.Timestamp
	22, // 25: bonuslink_serivce.GetRewardStatisticsResponse.end_date:type_name -> google.protobuf.Timestamp
	19, // 26: bonuslink_serivce.GetRewardStatisticsResponse.daily_statistics:type_name -> bonuslink_serivce.DailyStatistic
	20, // 27: bonuslink_serivce.GetRewardStatisticsResponse.reward_type_statistics:type_name -> bonuslink_serivce.RewardTypeStatistic
	1,  // 28: bonuslink_serivce.BonuslinkSerivce.CreateLink:input_type -> bonuslink_serivce.CreateLinkRequest
	2,  // 29: bonuslink_serivce.BonuslinkSerivce.GetLink:input_type -> bonuslink_serivce.GetLinkRequest
	3,  // 30: bonuslink_serivce.BonuslinkSerivce.ListLinks:input_type -> bonuslink_serivce.ListLinksRequest
	5,  // 31: bonuslink_serivce.BonuslinkSerivce.DeactivateLink:input_type -> bonuslink_serivce.DeactivateLinkRequest
	7,  // 32: bonuslink_serivce.BonuslinkSerivce.TrackLinkClick:input_type -> bonuslink_serivce.TrackLinkClickRequest
	10, // 33: bonuslink_serivce.BonuslinkSerivce.GetUserRewards:input_type -> bonuslink_serivce.GetUserRewardsRequest
	13, // 34: bonuslink_serivce.BonuslinkSerivce.RedeemReward:input_type -> bonuslink_serivce.RedeemRewardRequest
	15, // 35: bonuslink_serivce.BonuslinkSerivce.CreateLinkReward:input_type -> bonuslink_serivce.CreateLinkRewardRequest
	16, // 36: bonuslink_serivce.BonuslinkSerivce.UpdateLinkReward:input_type -> bonuslink_serivce.UpdateLinkRewardRequest
	18, // 37: bonuslink_serivce.BonuslinkSerivce.GetRewardStatistics:input_type -> bonuslink_serivce.GetRewardStatisticsRequest
	6,  // 38: bonuslink_serivce.BonuslinkSerivce.CreateLink:output_type -> bonuslink_serivce.LinkResponse
	6,  // 39: bonuslink_serivce.BonuslinkSerivce.GetLink:output_type -> bonuslink_serivce.LinkResponse
	4,  // 40: bonuslink_serivce.BonuslinkSerivce.ListLinks:output_type -> bonuslink_serivce.ListLinksResponse
	6,  // 41: bonuslink_serivce.BonuslinkSerivce.DeactivateLink:output_type -> bonuslink_serivce.LinkResponse
	8,  // 42: bonuslink_serivce.BonuslinkSerivce.TrackLinkClick:output_type -> bonuslink_serivce.TrackLinkClickResponse
	11, // 43: bonuslink_serivce.BonuslinkSerivce.GetUserRewards:output_type -> bonuslink_serivce.GetUserRewardsResponse
	14, // 44: bonuslink_serivce.BonuslinkSerivce.RedeemReward:output_type -> bonuslink_serivce.RedeemRewardResponse
	17, // 45: bonuslink_serivce.BonuslinkSerivce.CreateLinkReward:output_type -> bonuslink_serivce.LinkRewardResponse
	17, // 46: bonuslink_serivce.BonuslinkSerivce.UpdateLinkReward:output_type -> bonuslink_serivce.LinkRewardResponse
	21, // 47: bonuslink_serivce.BonuslinkSerivce.GetRewardStatistics:output_type -> bonuslink_serivce.GetRewardStatisticsResponse
	38, // [38:48] is the sub-list for method output_type
	28, // [28:38] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_bonuslink_serivce_service_proto_init() }
func file_bonuslink_serivce_service_proto_init() {
	if File_bonuslink_serivce_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bonuslink_serivce_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListLinksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListLinksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DeactivateLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*LinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TrackLinkClickRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TrackLinkClickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*AwardedReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetUserRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UserRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*RedeemRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*RedeemRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CreateLinkRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateLinkRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*LinkRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*GetRewardStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*DailyStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*RewardTypeStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bonuslink_serivce_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetRewardStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bonuslink_serivce_service_proto_msgTypes[0].OneofWrappers = []any{}
	file_bonuslink_serivce_service_proto_msgTypes[2].OneofWrappers = []any{}
	file_bonuslink_serivce_service_proto_msgTypes[5].OneofWrappers = []any{}
	file_bonuslink_serivce_service_proto_msgTypes[6].OneofWrappers = []any{}
	file_bonuslink_serivce_service_proto_msgTypes[8].OneofWrappers = []any{}
	file_bonuslink_serivce_service_proto_msgTypes[9].OneofWrappers = []any{}
	file_bonuslink_serivce_service_proto_msgTypes[11].OneofWrappers = []any{}
	file_bonuslink_serivce_service_proto_msgTypes[14].OneofWrappers = []any{}
	file_bonuslink_serivce_service_proto_msgTypes[15].OneofWrappers = []any{}
	file_bonuslink_serivce_service_proto_msgTypes[16].OneofWrappers = []any{}
	file_bonuslink_serivce_service_proto_msgTypes[17].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bonuslink_serivce_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_bonuslink_serivce_service_proto_goTypes,
		DependencyIndexes: file_bonuslink_serivce_service_proto_depIdxs,
		EnumInfos:         file_bonuslink_serivce_service_proto_enumTypes,
		MessageInfos:      file_bonuslink_serivce_service_proto_msgTypes,
	}.Build()
	File_bonuslink_serivce_service_proto = out.File
	file_bonuslink_serivce_service_proto_rawDesc = nil
	file_bonuslink_serivce_service_proto_goTypes = nil
	file_bonuslink_serivce_service_proto_depIdxs = nil
}
