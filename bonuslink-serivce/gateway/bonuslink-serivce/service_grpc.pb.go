// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: bonuslink-serivce/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BonuslinkSerivce_CreateLink_FullMethodName          = "/bonuslink_serivce.BonuslinkSerivce/CreateLink"
	BonuslinkSerivce_GetLink_FullMethodName             = "/bonuslink_serivce.BonuslinkSerivce/GetLink"
	BonuslinkSerivce_ListLinks_FullMethodName           = "/bonuslink_serivce.BonuslinkSerivce/ListLinks"
	BonuslinkSerivce_DeactivateLink_FullMethodName      = "/bonuslink_serivce.BonuslinkSerivce/DeactivateLink"
	BonuslinkSerivce_TrackLinkClick_FullMethodName      = "/bonuslink_serivce.BonuslinkSerivce/TrackLinkClick"
	BonuslinkSerivce_GetUserRewards_FullMethodName      = "/bonuslink_serivce.BonuslinkSerivce/GetUserRewards"
	BonuslinkSerivce_RedeemReward_FullMethodName        = "/bonuslink_serivce.BonuslinkSerivce/RedeemReward"
	BonuslinkSerivce_CreateLinkReward_FullMethodName    = "/bonuslink_serivce.BonuslinkSerivce/CreateLinkReward"
	BonuslinkSerivce_UpdateLinkReward_FullMethodName    = "/bonuslink_serivce.BonuslinkSerivce/UpdateLinkReward"
	BonuslinkSerivce_GetRewardStatistics_FullMethodName = "/bonuslink_serivce.BonuslinkSerivce/GetRewardStatistics"
)

// BonuslinkSerivceClient is the client API for BonuslinkSerivce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BonuslinkSerivceClient interface {
	// Link management
	CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	ListLinks(ctx context.Context, in *ListLinksRequest, opts ...grpc.CallOption) (*ListLinksResponse, error)
	DeactivateLink(ctx context.Context, in *DeactivateLinkRequest, opts ...grpc.CallOption) (*LinkResponse, error)
	// Link click tracking and reward processing
	TrackLinkClick(ctx context.Context, in *TrackLinkClickRequest, opts ...grpc.CallOption) (*TrackLinkClickResponse, error)
	// Reward management
	GetUserRewards(ctx context.Context, in *GetUserRewardsRequest, opts ...grpc.CallOption) (*GetUserRewardsResponse, error)
	RedeemReward(ctx context.Context, in *RedeemRewardRequest, opts ...grpc.CallOption) (*RedeemRewardResponse, error)
	CreateLinkReward(ctx context.Context, in *CreateLinkRewardRequest, opts ...grpc.CallOption) (*LinkRewardResponse, error)
	UpdateLinkReward(ctx context.Context, in *UpdateLinkRewardRequest, opts ...grpc.CallOption) (*LinkRewardResponse, error)
	// Analytics
	GetRewardStatistics(ctx context.Context, in *GetRewardStatisticsRequest, opts ...grpc.CallOption) (*GetRewardStatisticsResponse, error)
}

type bonuslinkSerivceClient struct {
	cc grpc.ClientConnInterface
}

func NewBonuslinkSerivceClient(cc grpc.ClientConnInterface) BonuslinkSerivceClient {
	return &bonuslinkSerivceClient{cc}
}

func (c *bonuslinkSerivceClient) CreateLink(ctx context.Context, in *CreateLinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, BonuslinkSerivce_CreateLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonuslinkSerivceClient) GetLink(ctx context.Context, in *GetLinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, BonuslinkSerivce_GetLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonuslinkSerivceClient) ListLinks(ctx context.Context, in *ListLinksRequest, opts ...grpc.CallOption) (*ListLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLinksResponse)
	err := c.cc.Invoke(ctx, BonuslinkSerivce_ListLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonuslinkSerivceClient) DeactivateLink(ctx context.Context, in *DeactivateLinkRequest, opts ...grpc.CallOption) (*LinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkResponse)
	err := c.cc.Invoke(ctx, BonuslinkSerivce_DeactivateLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonuslinkSerivceClient) TrackLinkClick(ctx context.Context, in *TrackLinkClickRequest, opts ...grpc.CallOption) (*TrackLinkClickResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackLinkClickResponse)
	err := c.cc.Invoke(ctx, BonuslinkSerivce_TrackLinkClick_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonuslinkSerivceClient) GetUserRewards(ctx context.Context, in *GetUserRewardsRequest, opts ...grpc.CallOption) (*GetUserRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRewardsResponse)
	err := c.cc.Invoke(ctx, BonuslinkSerivce_GetUserRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonuslinkSerivceClient) RedeemReward(ctx context.Context, in *RedeemRewardRequest, opts ...grpc.CallOption) (*RedeemRewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeemRewardResponse)
	err := c.cc.Invoke(ctx, BonuslinkSerivce_RedeemReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonuslinkSerivceClient) CreateLinkReward(ctx context.Context, in *CreateLinkRewardRequest, opts ...grpc.CallOption) (*LinkRewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkRewardResponse)
	err := c.cc.Invoke(ctx, BonuslinkSerivce_CreateLinkReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonuslinkSerivceClient) UpdateLinkReward(ctx context.Context, in *UpdateLinkRewardRequest, opts ...grpc.CallOption) (*LinkRewardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkRewardResponse)
	err := c.cc.Invoke(ctx, BonuslinkSerivce_UpdateLinkReward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bonuslinkSerivceClient) GetRewardStatistics(ctx context.Context, in *GetRewardStatisticsRequest, opts ...grpc.CallOption) (*GetRewardStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRewardStatisticsResponse)
	err := c.cc.Invoke(ctx, BonuslinkSerivce_GetRewardStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BonuslinkSerivceServer is the server API for BonuslinkSerivce service.
// All implementations must embed UnimplementedBonuslinkSerivceServer
// for forward compatibility.
type BonuslinkSerivceServer interface {
	// Link management
	CreateLink(context.Context, *CreateLinkRequest) (*LinkResponse, error)
	GetLink(context.Context, *GetLinkRequest) (*LinkResponse, error)
	ListLinks(context.Context, *ListLinksRequest) (*ListLinksResponse, error)
	DeactivateLink(context.Context, *DeactivateLinkRequest) (*LinkResponse, error)
	// Link click tracking and reward processing
	TrackLinkClick(context.Context, *TrackLinkClickRequest) (*TrackLinkClickResponse, error)
	// Reward management
	GetUserRewards(context.Context, *GetUserRewardsRequest) (*GetUserRewardsResponse, error)
	RedeemReward(context.Context, *RedeemRewardRequest) (*RedeemRewardResponse, error)
	CreateLinkReward(context.Context, *CreateLinkRewardRequest) (*LinkRewardResponse, error)
	UpdateLinkReward(context.Context, *UpdateLinkRewardRequest) (*LinkRewardResponse, error)
	// Analytics
	GetRewardStatistics(context.Context, *GetRewardStatisticsRequest) (*GetRewardStatisticsResponse, error)
	mustEmbedUnimplementedBonuslinkSerivceServer()
}

// UnimplementedBonuslinkSerivceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBonuslinkSerivceServer struct{}

func (UnimplementedBonuslinkSerivceServer) CreateLink(context.Context, *CreateLinkRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLink not implemented")
}
func (UnimplementedBonuslinkSerivceServer) GetLink(context.Context, *GetLinkRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLink not implemented")
}
func (UnimplementedBonuslinkSerivceServer) ListLinks(context.Context, *ListLinksRequest) (*ListLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLinks not implemented")
}
func (UnimplementedBonuslinkSerivceServer) DeactivateLink(context.Context, *DeactivateLinkRequest) (*LinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateLink not implemented")
}
func (UnimplementedBonuslinkSerivceServer) TrackLinkClick(context.Context, *TrackLinkClickRequest) (*TrackLinkClickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackLinkClick not implemented")
}
func (UnimplementedBonuslinkSerivceServer) GetUserRewards(context.Context, *GetUserRewardsRequest) (*GetUserRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRewards not implemented")
}
func (UnimplementedBonuslinkSerivceServer) RedeemReward(context.Context, *RedeemRewardRequest) (*RedeemRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemReward not implemented")
}
func (UnimplementedBonuslinkSerivceServer) CreateLinkReward(context.Context, *CreateLinkRewardRequest) (*LinkRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLinkReward not implemented")
}
func (UnimplementedBonuslinkSerivceServer) UpdateLinkReward(context.Context, *UpdateLinkRewardRequest) (*LinkRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLinkReward not implemented")
}
func (UnimplementedBonuslinkSerivceServer) GetRewardStatistics(context.Context, *GetRewardStatisticsRequest) (*GetRewardStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardStatistics not implemented")
}
func (UnimplementedBonuslinkSerivceServer) mustEmbedUnimplementedBonuslinkSerivceServer() {}
func (UnimplementedBonuslinkSerivceServer) testEmbeddedByValue()                          {}

// UnsafeBonuslinkSerivceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BonuslinkSerivceServer will
// result in compilation errors.
type UnsafeBonuslinkSerivceServer interface {
	mustEmbedUnimplementedBonuslinkSerivceServer()
}

func RegisterBonuslinkSerivceServer(s grpc.ServiceRegistrar, srv BonuslinkSerivceServer) {
	// If the following call pancis, it indicates UnimplementedBonuslinkSerivceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BonuslinkSerivce_ServiceDesc, srv)
}

func _BonuslinkSerivce_CreateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonuslinkSerivceServer).CreateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonuslinkSerivce_CreateLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonuslinkSerivceServer).CreateLink(ctx, req.(*CreateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonuslinkSerivce_GetLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonuslinkSerivceServer).GetLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonuslinkSerivce_GetLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonuslinkSerivceServer).GetLink(ctx, req.(*GetLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonuslinkSerivce_ListLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonuslinkSerivceServer).ListLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonuslinkSerivce_ListLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonuslinkSerivceServer).ListLinks(ctx, req.(*ListLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonuslinkSerivce_DeactivateLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonuslinkSerivceServer).DeactivateLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonuslinkSerivce_DeactivateLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonuslinkSerivceServer).DeactivateLink(ctx, req.(*DeactivateLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonuslinkSerivce_TrackLinkClick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackLinkClickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonuslinkSerivceServer).TrackLinkClick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonuslinkSerivce_TrackLinkClick_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonuslinkSerivceServer).TrackLinkClick(ctx, req.(*TrackLinkClickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonuslinkSerivce_GetUserRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonuslinkSerivceServer).GetUserRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonuslinkSerivce_GetUserRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonuslinkSerivceServer).GetUserRewards(ctx, req.(*GetUserRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonuslinkSerivce_RedeemReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonuslinkSerivceServer).RedeemReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonuslinkSerivce_RedeemReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonuslinkSerivceServer).RedeemReward(ctx, req.(*RedeemRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonuslinkSerivce_CreateLinkReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLinkRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonuslinkSerivceServer).CreateLinkReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonuslinkSerivce_CreateLinkReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonuslinkSerivceServer).CreateLinkReward(ctx, req.(*CreateLinkRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonuslinkSerivce_UpdateLinkReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinkRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonuslinkSerivceServer).UpdateLinkReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonuslinkSerivce_UpdateLinkReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonuslinkSerivceServer).UpdateLinkReward(ctx, req.(*UpdateLinkRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BonuslinkSerivce_GetRewardStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BonuslinkSerivceServer).GetRewardStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BonuslinkSerivce_GetRewardStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BonuslinkSerivceServer).GetRewardStatistics(ctx, req.(*GetRewardStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BonuslinkSerivce_ServiceDesc is the grpc.ServiceDesc for BonuslinkSerivce service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BonuslinkSerivce_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bonuslink_serivce.BonuslinkSerivce",
	HandlerType: (*BonuslinkSerivceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLink",
			Handler:    _BonuslinkSerivce_CreateLink_Handler,
		},
		{
			MethodName: "GetLink",
			Handler:    _BonuslinkSerivce_GetLink_Handler,
		},
		{
			MethodName: "ListLinks",
			Handler:    _BonuslinkSerivce_ListLinks_Handler,
		},
		{
			MethodName: "DeactivateLink",
			Handler:    _BonuslinkSerivce_DeactivateLink_Handler,
		},
		{
			MethodName: "TrackLinkClick",
			Handler:    _BonuslinkSerivce_TrackLinkClick_Handler,
		},
		{
			MethodName: "GetUserRewards",
			Handler:    _BonuslinkSerivce_GetUserRewards_Handler,
		},
		{
			MethodName: "RedeemReward",
			Handler:    _BonuslinkSerivce_RedeemReward_Handler,
		},
		{
			MethodName: "CreateLinkReward",
			Handler:    _BonuslinkSerivce_CreateLinkReward_Handler,
		},
		{
			MethodName: "UpdateLinkReward",
			Handler:    _BonuslinkSerivce_UpdateLinkReward_Handler,
		},
		{
			MethodName: "GetRewardStatistics",
			Handler:    _BonuslinkSerivce_GetRewardStatistics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bonuslink-serivce/service.proto",
}
