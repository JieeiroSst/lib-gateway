// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: payer-service/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransactionService_CreatePayer_FullMethodName       = "/payer.TransactionService/CreatePayer"
	TransactionService_GetPayer_FullMethodName          = "/payer.TransactionService/GetPayer"
	TransactionService_UpdatePayer_FullMethodName       = "/payer.TransactionService/UpdatePayer"
	TransactionService_DeletePayer_FullMethodName       = "/payer.TransactionService/DeletePayer"
	TransactionService_ListPayers_FullMethodName        = "/payer.TransactionService/ListPayers"
	TransactionService_CreateBuyer_FullMethodName       = "/payer.TransactionService/CreateBuyer"
	TransactionService_GetBuyer_FullMethodName          = "/payer.TransactionService/GetBuyer"
	TransactionService_UpdateBuyer_FullMethodName       = "/payer.TransactionService/UpdateBuyer"
	TransactionService_DeleteBuyer_FullMethodName       = "/payer.TransactionService/DeleteBuyer"
	TransactionService_ListBuyers_FullMethodName        = "/payer.TransactionService/ListBuyers"
	TransactionService_CreateTransaction_FullMethodName = "/payer.TransactionService/CreateTransaction"
	TransactionService_GetTransaction_FullMethodName    = "/payer.TransactionService/GetTransaction"
	TransactionService_UpdateTransaction_FullMethodName = "/payer.TransactionService/UpdateTransaction"
	TransactionService_DeleteTransaction_FullMethodName = "/payer.TransactionService/DeleteTransaction"
	TransactionService_ListTransactions_FullMethodName  = "/payer.TransactionService/ListTransactions"
)

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionServiceClient interface {
	CreatePayer(ctx context.Context, in *CreatePayerRequest, opts ...grpc.CallOption) (*Payer, error)
	GetPayer(ctx context.Context, in *GetPayerRequest, opts ...grpc.CallOption) (*Payer, error)
	UpdatePayer(ctx context.Context, in *UpdatePayerRequest, opts ...grpc.CallOption) (*Payer, error)
	DeletePayer(ctx context.Context, in *DeletePayerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPayers(ctx context.Context, in *ListPayersRequest, opts ...grpc.CallOption) (*ListPayersResponse, error)
	CreateBuyer(ctx context.Context, in *CreateBuyerRequest, opts ...grpc.CallOption) (*Buyer, error)
	GetBuyer(ctx context.Context, in *GetBuyerRequest, opts ...grpc.CallOption) (*Buyer, error)
	UpdateBuyer(ctx context.Context, in *UpdateBuyerRequest, opts ...grpc.CallOption) (*Buyer, error)
	DeleteBuyer(ctx context.Context, in *DeleteBuyerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListBuyers(ctx context.Context, in *ListBuyersRequest, opts ...grpc.CallOption) (*ListBuyersResponse, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	DeleteTransaction(ctx context.Context, in *DeleteTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
}

type transactionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionServiceClient(cc grpc.ClientConnInterface) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) CreatePayer(ctx context.Context, in *CreatePayerRequest, opts ...grpc.CallOption) (*Payer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payer)
	err := c.cc.Invoke(ctx, TransactionService_CreatePayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetPayer(ctx context.Context, in *GetPayerRequest, opts ...grpc.CallOption) (*Payer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payer)
	err := c.cc.Invoke(ctx, TransactionService_GetPayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdatePayer(ctx context.Context, in *UpdatePayerRequest, opts ...grpc.CallOption) (*Payer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Payer)
	err := c.cc.Invoke(ctx, TransactionService_UpdatePayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeletePayer(ctx context.Context, in *DeletePayerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TransactionService_DeletePayer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListPayers(ctx context.Context, in *ListPayersRequest, opts ...grpc.CallOption) (*ListPayersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPayersResponse)
	err := c.cc.Invoke(ctx, TransactionService_ListPayers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateBuyer(ctx context.Context, in *CreateBuyerRequest, opts ...grpc.CallOption) (*Buyer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Buyer)
	err := c.cc.Invoke(ctx, TransactionService_CreateBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetBuyer(ctx context.Context, in *GetBuyerRequest, opts ...grpc.CallOption) (*Buyer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Buyer)
	err := c.cc.Invoke(ctx, TransactionService_GetBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateBuyer(ctx context.Context, in *UpdateBuyerRequest, opts ...grpc.CallOption) (*Buyer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Buyer)
	err := c.cc.Invoke(ctx, TransactionService_UpdateBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeleteBuyer(ctx context.Context, in *DeleteBuyerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TransactionService_DeleteBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListBuyers(ctx context.Context, in *ListBuyersRequest, opts ...grpc.CallOption) (*ListBuyersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBuyersResponse)
	err := c.cc.Invoke(ctx, TransactionService_ListBuyers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, TransactionService_CreateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, TransactionService_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) UpdateTransaction(ctx context.Context, in *UpdateTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Transaction)
	err := c.cc.Invoke(ctx, TransactionService_UpdateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) DeleteTransaction(ctx context.Context, in *DeleteTransactionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TransactionService_DeleteTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, TransactionService_ListTransactions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
// All implementations must embed UnimplementedTransactionServiceServer
// for forward compatibility.
type TransactionServiceServer interface {
	CreatePayer(context.Context, *CreatePayerRequest) (*Payer, error)
	GetPayer(context.Context, *GetPayerRequest) (*Payer, error)
	UpdatePayer(context.Context, *UpdatePayerRequest) (*Payer, error)
	DeletePayer(context.Context, *DeletePayerRequest) (*emptypb.Empty, error)
	ListPayers(context.Context, *ListPayersRequest) (*ListPayersResponse, error)
	CreateBuyer(context.Context, *CreateBuyerRequest) (*Buyer, error)
	GetBuyer(context.Context, *GetBuyerRequest) (*Buyer, error)
	UpdateBuyer(context.Context, *UpdateBuyerRequest) (*Buyer, error)
	DeleteBuyer(context.Context, *DeleteBuyerRequest) (*emptypb.Empty, error)
	ListBuyers(context.Context, *ListBuyersRequest) (*ListBuyersResponse, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*Transaction, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error)
	UpdateTransaction(context.Context, *UpdateTransactionRequest) (*Transaction, error)
	DeleteTransaction(context.Context, *DeleteTransactionRequest) (*emptypb.Empty, error)
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	mustEmbedUnimplementedTransactionServiceServer()
}

// UnimplementedTransactionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransactionServiceServer struct{}

func (UnimplementedTransactionServiceServer) CreatePayer(context.Context, *CreatePayerRequest) (*Payer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayer not implemented")
}
func (UnimplementedTransactionServiceServer) GetPayer(context.Context, *GetPayerRequest) (*Payer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayer not implemented")
}
func (UnimplementedTransactionServiceServer) UpdatePayer(context.Context, *UpdatePayerRequest) (*Payer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayer not implemented")
}
func (UnimplementedTransactionServiceServer) DeletePayer(context.Context, *DeletePayerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePayer not implemented")
}
func (UnimplementedTransactionServiceServer) ListPayers(context.Context, *ListPayersRequest) (*ListPayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPayers not implemented")
}
func (UnimplementedTransactionServiceServer) CreateBuyer(context.Context, *CreateBuyerRequest) (*Buyer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBuyer not implemented")
}
func (UnimplementedTransactionServiceServer) GetBuyer(context.Context, *GetBuyerRequest) (*Buyer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyer not implemented")
}
func (UnimplementedTransactionServiceServer) UpdateBuyer(context.Context, *UpdateBuyerRequest) (*Buyer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBuyer not implemented")
}
func (UnimplementedTransactionServiceServer) DeleteBuyer(context.Context, *DeleteBuyerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBuyer not implemented")
}
func (UnimplementedTransactionServiceServer) ListBuyers(context.Context, *ListBuyersRequest) (*ListBuyersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuyers not implemented")
}
func (UnimplementedTransactionServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) UpdateTransaction(context.Context, *UpdateTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) DeleteTransaction(context.Context, *DeleteTransactionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransaction not implemented")
}
func (UnimplementedTransactionServiceServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedTransactionServiceServer) mustEmbedUnimplementedTransactionServiceServer() {}
func (UnimplementedTransactionServiceServer) testEmbeddedByValue()                            {}

// UnsafeTransactionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionServiceServer will
// result in compilation errors.
type UnsafeTransactionServiceServer interface {
	mustEmbedUnimplementedTransactionServiceServer()
}

func RegisterTransactionServiceServer(s grpc.ServiceRegistrar, srv TransactionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransactionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransactionService_ServiceDesc, srv)
}

func _TransactionService_CreatePayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreatePayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CreatePayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreatePayer(ctx, req.(*CreatePayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetPayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetPayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetPayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetPayer(ctx, req.(*GetPayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdatePayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdatePayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_UpdatePayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdatePayer(ctx, req.(*UpdatePayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeletePayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeletePayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_DeletePayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeletePayer(ctx, req.(*DeletePayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListPayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListPayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_ListPayers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListPayers(ctx, req.(*ListPayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CreateBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateBuyer(ctx, req.(*CreateBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetBuyer(ctx, req.(*GetBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_UpdateBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateBuyer(ctx, req.(*UpdateBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeleteBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeleteBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_DeleteBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeleteBuyer(ctx, req.(*DeleteBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListBuyers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBuyersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListBuyers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_ListBuyers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListBuyers(ctx, req.(*ListBuyersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_UpdateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).UpdateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_UpdateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).UpdateTransaction(ctx, req.(*UpdateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_DeleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).DeleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_DeleteTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).DeleteTransaction(ctx, req.(*DeleteTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransactionService_ListTransactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransactionService_ServiceDesc is the grpc.ServiceDesc for TransactionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransactionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "payer.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePayer",
			Handler:    _TransactionService_CreatePayer_Handler,
		},
		{
			MethodName: "GetPayer",
			Handler:    _TransactionService_GetPayer_Handler,
		},
		{
			MethodName: "UpdatePayer",
			Handler:    _TransactionService_UpdatePayer_Handler,
		},
		{
			MethodName: "DeletePayer",
			Handler:    _TransactionService_DeletePayer_Handler,
		},
		{
			MethodName: "ListPayers",
			Handler:    _TransactionService_ListPayers_Handler,
		},
		{
			MethodName: "CreateBuyer",
			Handler:    _TransactionService_CreateBuyer_Handler,
		},
		{
			MethodName: "GetBuyer",
			Handler:    _TransactionService_GetBuyer_Handler,
		},
		{
			MethodName: "UpdateBuyer",
			Handler:    _TransactionService_UpdateBuyer_Handler,
		},
		{
			MethodName: "DeleteBuyer",
			Handler:    _TransactionService_DeleteBuyer_Handler,
		},
		{
			MethodName: "ListBuyers",
			Handler:    _TransactionService_ListBuyers_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _TransactionService_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _TransactionService_GetTransaction_Handler,
		},
		{
			MethodName: "UpdateTransaction",
			Handler:    _TransactionService_UpdateTransaction_Handler,
		},
		{
			MethodName: "DeleteTransaction",
			Handler:    _TransactionService_DeleteTransaction_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _TransactionService_ListTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payer-service/service.proto",
}
