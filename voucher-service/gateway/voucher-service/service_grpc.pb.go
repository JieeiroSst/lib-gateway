// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: voucher-service/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VoucherService_CreateVoucher_FullMethodName       = "/voucher.VoucherService/CreateVoucher"
	VoucherService_GetVoucher_FullMethodName          = "/voucher.VoucherService/GetVoucher"
	VoucherService_UpdateVoucher_FullMethodName       = "/voucher.VoucherService/UpdateVoucher"
	VoucherService_DeleteVoucher_FullMethodName       = "/voucher.VoucherService/DeleteVoucher"
	VoucherService_ListVouchers_FullMethodName        = "/voucher.VoucherService/ListVouchers"
	VoucherService_CreateVoucherSet_FullMethodName    = "/voucher.VoucherService/CreateVoucherSet"
	VoucherService_GetVoucherSet_FullMethodName       = "/voucher.VoucherService/GetVoucherSet"
	VoucherService_ApplyVoucher_FullMethodName        = "/voucher.VoucherService/ApplyVoucher"
	VoucherService_ValidateVoucher_FullMethodName     = "/voucher.VoucherService/ValidateVoucher"
	VoucherService_GetVouchersByBasket_FullMethodName = "/voucher.VoucherService/GetVouchersByBasket"
	VoucherService_GetVouchersByUser_FullMethodName   = "/voucher.VoucherService/GetVouchersByUser"
)

// VoucherServiceClient is the client API for VoucherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoucherServiceClient interface {
	CreateVoucher(ctx context.Context, in *CreateVoucherRequest, opts ...grpc.CallOption) (*Voucher, error)
	GetVoucher(ctx context.Context, in *GetVoucherRequest, opts ...grpc.CallOption) (*Voucher, error)
	UpdateVoucher(ctx context.Context, in *UpdateVoucherRequest, opts ...grpc.CallOption) (*Voucher, error)
	DeleteVoucher(ctx context.Context, in *DeleteVoucherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListVouchers(ctx context.Context, in *ListVouchersRequest, opts ...grpc.CallOption) (*ListVouchersResponse, error)
	CreateVoucherSet(ctx context.Context, in *CreateVoucherSetRequest, opts ...grpc.CallOption) (*VoucherSet, error)
	GetVoucherSet(ctx context.Context, in *GetVoucherSetRequest, opts ...grpc.CallOption) (*VoucherSet, error)
	ApplyVoucher(ctx context.Context, in *ApplyVoucherRequest, opts ...grpc.CallOption) (*ApplyVoucherResponse, error)
	ValidateVoucher(ctx context.Context, in *ValidateVoucherRequest, opts ...grpc.CallOption) (*ValidateVoucherResponse, error)
	GetVouchersByBasket(ctx context.Context, in *GetVoucherRequest, opts ...grpc.CallOption) (*ListVouchersResponse, error)
	GetVouchersByUser(ctx context.Context, in *GetVoucherRequest, opts ...grpc.CallOption) (*ListVouchersResponse, error)
}

type voucherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVoucherServiceClient(cc grpc.ClientConnInterface) VoucherServiceClient {
	return &voucherServiceClient{cc}
}

func (c *voucherServiceClient) CreateVoucher(ctx context.Context, in *CreateVoucherRequest, opts ...grpc.CallOption) (*Voucher, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Voucher)
	err := c.cc.Invoke(ctx, VoucherService_CreateVoucher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) GetVoucher(ctx context.Context, in *GetVoucherRequest, opts ...grpc.CallOption) (*Voucher, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Voucher)
	err := c.cc.Invoke(ctx, VoucherService_GetVoucher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) UpdateVoucher(ctx context.Context, in *UpdateVoucherRequest, opts ...grpc.CallOption) (*Voucher, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Voucher)
	err := c.cc.Invoke(ctx, VoucherService_UpdateVoucher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) DeleteVoucher(ctx context.Context, in *DeleteVoucherRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VoucherService_DeleteVoucher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) ListVouchers(ctx context.Context, in *ListVouchersRequest, opts ...grpc.CallOption) (*ListVouchersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVouchersResponse)
	err := c.cc.Invoke(ctx, VoucherService_ListVouchers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) CreateVoucherSet(ctx context.Context, in *CreateVoucherSetRequest, opts ...grpc.CallOption) (*VoucherSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoucherSet)
	err := c.cc.Invoke(ctx, VoucherService_CreateVoucherSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) GetVoucherSet(ctx context.Context, in *GetVoucherSetRequest, opts ...grpc.CallOption) (*VoucherSet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VoucherSet)
	err := c.cc.Invoke(ctx, VoucherService_GetVoucherSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) ApplyVoucher(ctx context.Context, in *ApplyVoucherRequest, opts ...grpc.CallOption) (*ApplyVoucherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplyVoucherResponse)
	err := c.cc.Invoke(ctx, VoucherService_ApplyVoucher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) ValidateVoucher(ctx context.Context, in *ValidateVoucherRequest, opts ...grpc.CallOption) (*ValidateVoucherResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateVoucherResponse)
	err := c.cc.Invoke(ctx, VoucherService_ValidateVoucher_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) GetVouchersByBasket(ctx context.Context, in *GetVoucherRequest, opts ...grpc.CallOption) (*ListVouchersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVouchersResponse)
	err := c.cc.Invoke(ctx, VoucherService_GetVouchersByBasket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voucherServiceClient) GetVouchersByUser(ctx context.Context, in *GetVoucherRequest, opts ...grpc.CallOption) (*ListVouchersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVouchersResponse)
	err := c.cc.Invoke(ctx, VoucherService_GetVouchersByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoucherServiceServer is the server API for VoucherService service.
// All implementations must embed UnimplementedVoucherServiceServer
// for forward compatibility.
type VoucherServiceServer interface {
	CreateVoucher(context.Context, *CreateVoucherRequest) (*Voucher, error)
	GetVoucher(context.Context, *GetVoucherRequest) (*Voucher, error)
	UpdateVoucher(context.Context, *UpdateVoucherRequest) (*Voucher, error)
	DeleteVoucher(context.Context, *DeleteVoucherRequest) (*emptypb.Empty, error)
	ListVouchers(context.Context, *ListVouchersRequest) (*ListVouchersResponse, error)
	CreateVoucherSet(context.Context, *CreateVoucherSetRequest) (*VoucherSet, error)
	GetVoucherSet(context.Context, *GetVoucherSetRequest) (*VoucherSet, error)
	ApplyVoucher(context.Context, *ApplyVoucherRequest) (*ApplyVoucherResponse, error)
	ValidateVoucher(context.Context, *ValidateVoucherRequest) (*ValidateVoucherResponse, error)
	GetVouchersByBasket(context.Context, *GetVoucherRequest) (*ListVouchersResponse, error)
	GetVouchersByUser(context.Context, *GetVoucherRequest) (*ListVouchersResponse, error)
	mustEmbedUnimplementedVoucherServiceServer()
}

// UnimplementedVoucherServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVoucherServiceServer struct{}

func (UnimplementedVoucherServiceServer) CreateVoucher(context.Context, *CreateVoucherRequest) (*Voucher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoucher not implemented")
}
func (UnimplementedVoucherServiceServer) GetVoucher(context.Context, *GetVoucherRequest) (*Voucher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoucher not implemented")
}
func (UnimplementedVoucherServiceServer) UpdateVoucher(context.Context, *UpdateVoucherRequest) (*Voucher, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVoucher not implemented")
}
func (UnimplementedVoucherServiceServer) DeleteVoucher(context.Context, *DeleteVoucherRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVoucher not implemented")
}
func (UnimplementedVoucherServiceServer) ListVouchers(context.Context, *ListVouchersRequest) (*ListVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVouchers not implemented")
}
func (UnimplementedVoucherServiceServer) CreateVoucherSet(context.Context, *CreateVoucherSetRequest) (*VoucherSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoucherSet not implemented")
}
func (UnimplementedVoucherServiceServer) GetVoucherSet(context.Context, *GetVoucherSetRequest) (*VoucherSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoucherSet not implemented")
}
func (UnimplementedVoucherServiceServer) ApplyVoucher(context.Context, *ApplyVoucherRequest) (*ApplyVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyVoucher not implemented")
}
func (UnimplementedVoucherServiceServer) ValidateVoucher(context.Context, *ValidateVoucherRequest) (*ValidateVoucherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateVoucher not implemented")
}
func (UnimplementedVoucherServiceServer) GetVouchersByBasket(context.Context, *GetVoucherRequest) (*ListVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVouchersByBasket not implemented")
}
func (UnimplementedVoucherServiceServer) GetVouchersByUser(context.Context, *GetVoucherRequest) (*ListVouchersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVouchersByUser not implemented")
}
func (UnimplementedVoucherServiceServer) mustEmbedUnimplementedVoucherServiceServer() {}
func (UnimplementedVoucherServiceServer) testEmbeddedByValue()                        {}

// UnsafeVoucherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoucherServiceServer will
// result in compilation errors.
type UnsafeVoucherServiceServer interface {
	mustEmbedUnimplementedVoucherServiceServer()
}

func RegisterVoucherServiceServer(s grpc.ServiceRegistrar, srv VoucherServiceServer) {
	// If the following call pancis, it indicates UnimplementedVoucherServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VoucherService_ServiceDesc, srv)
}

func _VoucherService_CreateVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).CreateVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_CreateVoucher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).CreateVoucher(ctx, req.(*CreateVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_GetVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).GetVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_GetVoucher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).GetVoucher(ctx, req.(*GetVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_UpdateVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).UpdateVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_UpdateVoucher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).UpdateVoucher(ctx, req.(*UpdateVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_DeleteVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).DeleteVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_DeleteVoucher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).DeleteVoucher(ctx, req.(*DeleteVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_ListVouchers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVouchersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).ListVouchers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_ListVouchers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).ListVouchers(ctx, req.(*ListVouchersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_CreateVoucherSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVoucherSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).CreateVoucherSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_CreateVoucherSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).CreateVoucherSet(ctx, req.(*CreateVoucherSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_GetVoucherSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoucherSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).GetVoucherSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_GetVoucherSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).GetVoucherSet(ctx, req.(*GetVoucherSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_ApplyVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).ApplyVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_ApplyVoucher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).ApplyVoucher(ctx, req.(*ApplyVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_ValidateVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).ValidateVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_ValidateVoucher_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).ValidateVoucher(ctx, req.(*ValidateVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_GetVouchersByBasket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).GetVouchersByBasket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_GetVouchersByBasket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).GetVouchersByBasket(ctx, req.(*GetVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VoucherService_GetVouchersByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoucherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoucherServiceServer).GetVouchersByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VoucherService_GetVouchersByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoucherServiceServer).GetVouchersByUser(ctx, req.(*GetVoucherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VoucherService_ServiceDesc is the grpc.ServiceDesc for VoucherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VoucherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voucher.VoucherService",
	HandlerType: (*VoucherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVoucher",
			Handler:    _VoucherService_CreateVoucher_Handler,
		},
		{
			MethodName: "GetVoucher",
			Handler:    _VoucherService_GetVoucher_Handler,
		},
		{
			MethodName: "UpdateVoucher",
			Handler:    _VoucherService_UpdateVoucher_Handler,
		},
		{
			MethodName: "DeleteVoucher",
			Handler:    _VoucherService_DeleteVoucher_Handler,
		},
		{
			MethodName: "ListVouchers",
			Handler:    _VoucherService_ListVouchers_Handler,
		},
		{
			MethodName: "CreateVoucherSet",
			Handler:    _VoucherService_CreateVoucherSet_Handler,
		},
		{
			MethodName: "GetVoucherSet",
			Handler:    _VoucherService_GetVoucherSet_Handler,
		},
		{
			MethodName: "ApplyVoucher",
			Handler:    _VoucherService_ApplyVoucher_Handler,
		},
		{
			MethodName: "ValidateVoucher",
			Handler:    _VoucherService_ValidateVoucher_Handler,
		},
		{
			MethodName: "GetVouchersByBasket",
			Handler:    _VoucherService_GetVouchersByBasket_Handler,
		},
		{
			MethodName: "GetVouchersByUser",
			Handler:    _VoucherService_GetVouchersByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "voucher-service/service.proto",
}
