// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: rent_house_service/service.proto

package pd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HomestayService_CreateHomestay_FullMethodName       = "/homestay.HomestayService/CreateHomestay"
	HomestayService_GetHomestay_FullMethodName          = "/homestay.HomestayService/GetHomestay"
	HomestayService_UpdateHomestay_FullMethodName       = "/homestay.HomestayService/UpdateHomestay"
	HomestayService_DeleteHomestay_FullMethodName       = "/homestay.HomestayService/DeleteHomestay"
	HomestayService_ListHomestays_FullMethodName        = "/homestay.HomestayService/ListHomestays"
	HomestayService_UpdateAvailability_FullMethodName   = "/homestay.HomestayService/UpdateAvailability"
	HomestayService_GetAvailability_FullMethodName      = "/homestay.HomestayService/GetAvailability"
	HomestayService_AddAmenities_FullMethodName         = "/homestay.HomestayService/AddAmenities"
	HomestayService_RemoveAmenities_FullMethodName      = "/homestay.HomestayService/RemoveAmenities"
	HomestayService_CreateUser_FullMethodName           = "/homestay.HomestayService/CreateUser"
	HomestayService_GetUser_FullMethodName              = "/homestay.HomestayService/GetUser"
	HomestayService_UpdateUser_FullMethodName           = "/homestay.HomestayService/UpdateUser"
	HomestayService_DeleteUser_FullMethodName           = "/homestay.HomestayService/DeleteUser"
	HomestayService_GetProfile_FullMethodName           = "/homestay.HomestayService/GetProfile"
	HomestayService_UpdateProfile_FullMethodName        = "/homestay.HomestayService/UpdateProfile"
	HomestayService_CreateBooking_FullMethodName        = "/homestay.HomestayService/CreateBooking"
	HomestayService_GetBooking_FullMethodName           = "/homestay.HomestayService/GetBooking"
	HomestayService_UpdateBooking_FullMethodName        = "/homestay.HomestayService/UpdateBooking"
	HomestayService_CancelBooking_FullMethodName        = "/homestay.HomestayService/CancelBooking"
	HomestayService_ListUserBookings_FullMethodName     = "/homestay.HomestayService/ListUserBookings"
	HomestayService_ListHomestayBookings_FullMethodName = "/homestay.HomestayService/ListHomestayBookings"
	HomestayService_ListProvinces_FullMethodName        = "/homestay.HomestayService/ListProvinces"
	HomestayService_ListDistricts_FullMethodName        = "/homestay.HomestayService/ListDistricts"
	HomestayService_ListWards_FullMethodName            = "/homestay.HomestayService/ListWards"
	HomestayService_ListAmenities_FullMethodName        = "/homestay.HomestayService/ListAmenities"
	HomestayService_CreateAmenity_FullMethodName        = "/homestay.HomestayService/CreateAmenity"
	HomestayService_UpdateAmenity_FullMethodName        = "/homestay.HomestayService/UpdateAmenity"
	HomestayService_DeleteAmenity_FullMethodName        = "/homestay.HomestayService/DeleteAmenity"
)

// HomestayServiceClient is the client API for HomestayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HomestayServiceClient interface {
	CreateHomestay(ctx context.Context, in *CreateHomestayRequest, opts ...grpc.CallOption) (*HomestayResponse, error)
	GetHomestay(ctx context.Context, in *GetHomestayRequest, opts ...grpc.CallOption) (*HomestayResponse, error)
	UpdateHomestay(ctx context.Context, in *UpdateHomestayRequest, opts ...grpc.CallOption) (*HomestayResponse, error)
	DeleteHomestay(ctx context.Context, in *DeleteHomestayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListHomestays(ctx context.Context, in *ListHomestaysRequest, opts ...grpc.CallOption) (*ListHomestaysResponse, error)
	UpdateAvailability(ctx context.Context, in *UpdateAvailabilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAvailability(ctx context.Context, in *GetAvailabilityRequest, opts ...grpc.CallOption) (*GetAvailabilityResponse, error)
	AddAmenities(ctx context.Context, in *AddAmenitiesRequest, opts ...grpc.CallOption) (*HomestayResponse, error)
	RemoveAmenities(ctx context.Context, in *RemoveAmenitiesRequest, opts ...grpc.CallOption) (*HomestayResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error)
	GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error)
	UpdateBooking(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error)
	CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error)
	ListUserBookings(ctx context.Context, in *ListUserBookingsRequest, opts ...grpc.CallOption) (*ListBookingsResponse, error)
	ListHomestayBookings(ctx context.Context, in *ListHomestayBookingsRequest, opts ...grpc.CallOption) (*ListBookingsResponse, error)
	ListProvinces(ctx context.Context, in *ListProvincesRequest, opts ...grpc.CallOption) (*ListProvincesResponse, error)
	ListDistricts(ctx context.Context, in *ListDistrictsRequest, opts ...grpc.CallOption) (*ListDistrictsResponse, error)
	ListWards(ctx context.Context, in *ListWardsRequest, opts ...grpc.CallOption) (*ListWardsResponse, error)
	ListAmenities(ctx context.Context, in *ListAmenitiesRequest, opts ...grpc.CallOption) (*ListAmenitiesResponse, error)
	CreateAmenity(ctx context.Context, in *CreateAmenityRequest, opts ...grpc.CallOption) (*AmenityResponse, error)
	UpdateAmenity(ctx context.Context, in *UpdateAmenityRequest, opts ...grpc.CallOption) (*AmenityResponse, error)
	DeleteAmenity(ctx context.Context, in *DeleteAmenityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type homestayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHomestayServiceClient(cc grpc.ClientConnInterface) HomestayServiceClient {
	return &homestayServiceClient{cc}
}

func (c *homestayServiceClient) CreateHomestay(ctx context.Context, in *CreateHomestayRequest, opts ...grpc.CallOption) (*HomestayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomestayResponse)
	err := c.cc.Invoke(ctx, HomestayService_CreateHomestay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) GetHomestay(ctx context.Context, in *GetHomestayRequest, opts ...grpc.CallOption) (*HomestayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomestayResponse)
	err := c.cc.Invoke(ctx, HomestayService_GetHomestay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) UpdateHomestay(ctx context.Context, in *UpdateHomestayRequest, opts ...grpc.CallOption) (*HomestayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomestayResponse)
	err := c.cc.Invoke(ctx, HomestayService_UpdateHomestay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) DeleteHomestay(ctx context.Context, in *DeleteHomestayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HomestayService_DeleteHomestay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) ListHomestays(ctx context.Context, in *ListHomestaysRequest, opts ...grpc.CallOption) (*ListHomestaysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHomestaysResponse)
	err := c.cc.Invoke(ctx, HomestayService_ListHomestays_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) UpdateAvailability(ctx context.Context, in *UpdateAvailabilityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HomestayService_UpdateAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) GetAvailability(ctx context.Context, in *GetAvailabilityRequest, opts ...grpc.CallOption) (*GetAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAvailabilityResponse)
	err := c.cc.Invoke(ctx, HomestayService_GetAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) AddAmenities(ctx context.Context, in *AddAmenitiesRequest, opts ...grpc.CallOption) (*HomestayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomestayResponse)
	err := c.cc.Invoke(ctx, HomestayService_AddAmenities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) RemoveAmenities(ctx context.Context, in *RemoveAmenitiesRequest, opts ...grpc.CallOption) (*HomestayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomestayResponse)
	err := c.cc.Invoke(ctx, HomestayService_RemoveAmenities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, HomestayService_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, HomestayService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, HomestayService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HomestayService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) GetProfile(ctx context.Context, in *GetProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, HomestayService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, HomestayService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) CreateBooking(ctx context.Context, in *CreateBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, HomestayService_CreateBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) GetBooking(ctx context.Context, in *GetBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, HomestayService_GetBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) UpdateBooking(ctx context.Context, in *UpdateBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, HomestayService_UpdateBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) CancelBooking(ctx context.Context, in *CancelBookingRequest, opts ...grpc.CallOption) (*BookingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookingResponse)
	err := c.cc.Invoke(ctx, HomestayService_CancelBooking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) ListUserBookings(ctx context.Context, in *ListUserBookingsRequest, opts ...grpc.CallOption) (*ListBookingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBookingsResponse)
	err := c.cc.Invoke(ctx, HomestayService_ListUserBookings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) ListHomestayBookings(ctx context.Context, in *ListHomestayBookingsRequest, opts ...grpc.CallOption) (*ListBookingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBookingsResponse)
	err := c.cc.Invoke(ctx, HomestayService_ListHomestayBookings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) ListProvinces(ctx context.Context, in *ListProvincesRequest, opts ...grpc.CallOption) (*ListProvincesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProvincesResponse)
	err := c.cc.Invoke(ctx, HomestayService_ListProvinces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) ListDistricts(ctx context.Context, in *ListDistrictsRequest, opts ...grpc.CallOption) (*ListDistrictsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDistrictsResponse)
	err := c.cc.Invoke(ctx, HomestayService_ListDistricts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) ListWards(ctx context.Context, in *ListWardsRequest, opts ...grpc.CallOption) (*ListWardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWardsResponse)
	err := c.cc.Invoke(ctx, HomestayService_ListWards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) ListAmenities(ctx context.Context, in *ListAmenitiesRequest, opts ...grpc.CallOption) (*ListAmenitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAmenitiesResponse)
	err := c.cc.Invoke(ctx, HomestayService_ListAmenities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) CreateAmenity(ctx context.Context, in *CreateAmenityRequest, opts ...grpc.CallOption) (*AmenityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmenityResponse)
	err := c.cc.Invoke(ctx, HomestayService_CreateAmenity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) UpdateAmenity(ctx context.Context, in *UpdateAmenityRequest, opts ...grpc.CallOption) (*AmenityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmenityResponse)
	err := c.cc.Invoke(ctx, HomestayService_UpdateAmenity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *homestayServiceClient) DeleteAmenity(ctx context.Context, in *DeleteAmenityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, HomestayService_DeleteAmenity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HomestayServiceServer is the server API for HomestayService service.
// All implementations must embed UnimplementedHomestayServiceServer
// for forward compatibility.
type HomestayServiceServer interface {
	CreateHomestay(context.Context, *CreateHomestayRequest) (*HomestayResponse, error)
	GetHomestay(context.Context, *GetHomestayRequest) (*HomestayResponse, error)
	UpdateHomestay(context.Context, *UpdateHomestayRequest) (*HomestayResponse, error)
	DeleteHomestay(context.Context, *DeleteHomestayRequest) (*emptypb.Empty, error)
	ListHomestays(context.Context, *ListHomestaysRequest) (*ListHomestaysResponse, error)
	UpdateAvailability(context.Context, *UpdateAvailabilityRequest) (*emptypb.Empty, error)
	GetAvailability(context.Context, *GetAvailabilityRequest) (*GetAvailabilityResponse, error)
	AddAmenities(context.Context, *AddAmenitiesRequest) (*HomestayResponse, error)
	RemoveAmenities(context.Context, *RemoveAmenitiesRequest) (*HomestayResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*UserResponse, error)
	GetUser(context.Context, *GetUserRequest) (*UserResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	GetProfile(context.Context, *GetProfileRequest) (*ProfileResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*ProfileResponse, error)
	CreateBooking(context.Context, *CreateBookingRequest) (*BookingResponse, error)
	GetBooking(context.Context, *GetBookingRequest) (*BookingResponse, error)
	UpdateBooking(context.Context, *UpdateBookingRequest) (*BookingResponse, error)
	CancelBooking(context.Context, *CancelBookingRequest) (*BookingResponse, error)
	ListUserBookings(context.Context, *ListUserBookingsRequest) (*ListBookingsResponse, error)
	ListHomestayBookings(context.Context, *ListHomestayBookingsRequest) (*ListBookingsResponse, error)
	ListProvinces(context.Context, *ListProvincesRequest) (*ListProvincesResponse, error)
	ListDistricts(context.Context, *ListDistrictsRequest) (*ListDistrictsResponse, error)
	ListWards(context.Context, *ListWardsRequest) (*ListWardsResponse, error)
	ListAmenities(context.Context, *ListAmenitiesRequest) (*ListAmenitiesResponse, error)
	CreateAmenity(context.Context, *CreateAmenityRequest) (*AmenityResponse, error)
	UpdateAmenity(context.Context, *UpdateAmenityRequest) (*AmenityResponse, error)
	DeleteAmenity(context.Context, *DeleteAmenityRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedHomestayServiceServer()
}

// UnimplementedHomestayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHomestayServiceServer struct{}

func (UnimplementedHomestayServiceServer) CreateHomestay(context.Context, *CreateHomestayRequest) (*HomestayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHomestay not implemented")
}
func (UnimplementedHomestayServiceServer) GetHomestay(context.Context, *GetHomestayRequest) (*HomestayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHomestay not implemented")
}
func (UnimplementedHomestayServiceServer) UpdateHomestay(context.Context, *UpdateHomestayRequest) (*HomestayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHomestay not implemented")
}
func (UnimplementedHomestayServiceServer) DeleteHomestay(context.Context, *DeleteHomestayRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHomestay not implemented")
}
func (UnimplementedHomestayServiceServer) ListHomestays(context.Context, *ListHomestaysRequest) (*ListHomestaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomestays not implemented")
}
func (UnimplementedHomestayServiceServer) UpdateAvailability(context.Context, *UpdateAvailabilityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvailability not implemented")
}
func (UnimplementedHomestayServiceServer) GetAvailability(context.Context, *GetAvailabilityRequest) (*GetAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailability not implemented")
}
func (UnimplementedHomestayServiceServer) AddAmenities(context.Context, *AddAmenitiesRequest) (*HomestayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAmenities not implemented")
}
func (UnimplementedHomestayServiceServer) RemoveAmenities(context.Context, *RemoveAmenitiesRequest) (*HomestayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAmenities not implemented")
}
func (UnimplementedHomestayServiceServer) CreateUser(context.Context, *CreateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedHomestayServiceServer) GetUser(context.Context, *GetUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedHomestayServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedHomestayServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedHomestayServiceServer) GetProfile(context.Context, *GetProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedHomestayServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedHomestayServiceServer) CreateBooking(context.Context, *CreateBookingRequest) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBooking not implemented")
}
func (UnimplementedHomestayServiceServer) GetBooking(context.Context, *GetBookingRequest) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBooking not implemented")
}
func (UnimplementedHomestayServiceServer) UpdateBooking(context.Context, *UpdateBookingRequest) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBooking not implemented")
}
func (UnimplementedHomestayServiceServer) CancelBooking(context.Context, *CancelBookingRequest) (*BookingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBooking not implemented")
}
func (UnimplementedHomestayServiceServer) ListUserBookings(context.Context, *ListUserBookingsRequest) (*ListBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBookings not implemented")
}
func (UnimplementedHomestayServiceServer) ListHomestayBookings(context.Context, *ListHomestayBookingsRequest) (*ListBookingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHomestayBookings not implemented")
}
func (UnimplementedHomestayServiceServer) ListProvinces(context.Context, *ListProvincesRequest) (*ListProvincesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProvinces not implemented")
}
func (UnimplementedHomestayServiceServer) ListDistricts(context.Context, *ListDistrictsRequest) (*ListDistrictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDistricts not implemented")
}
func (UnimplementedHomestayServiceServer) ListWards(context.Context, *ListWardsRequest) (*ListWardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWards not implemented")
}
func (UnimplementedHomestayServiceServer) ListAmenities(context.Context, *ListAmenitiesRequest) (*ListAmenitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAmenities not implemented")
}
func (UnimplementedHomestayServiceServer) CreateAmenity(context.Context, *CreateAmenityRequest) (*AmenityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAmenity not implemented")
}
func (UnimplementedHomestayServiceServer) UpdateAmenity(context.Context, *UpdateAmenityRequest) (*AmenityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAmenity not implemented")
}
func (UnimplementedHomestayServiceServer) DeleteAmenity(context.Context, *DeleteAmenityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAmenity not implemented")
}
func (UnimplementedHomestayServiceServer) mustEmbedUnimplementedHomestayServiceServer() {}
func (UnimplementedHomestayServiceServer) testEmbeddedByValue()                         {}

// UnsafeHomestayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HomestayServiceServer will
// result in compilation errors.
type UnsafeHomestayServiceServer interface {
	mustEmbedUnimplementedHomestayServiceServer()
}

func RegisterHomestayServiceServer(s grpc.ServiceRegistrar, srv HomestayServiceServer) {
	// If the following call pancis, it indicates UnimplementedHomestayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HomestayService_ServiceDesc, srv)
}

func _HomestayService_CreateHomestay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHomestayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).CreateHomestay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_CreateHomestay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).CreateHomestay(ctx, req.(*CreateHomestayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_GetHomestay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHomestayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).GetHomestay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_GetHomestay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).GetHomestay(ctx, req.(*GetHomestayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_UpdateHomestay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHomestayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).UpdateHomestay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_UpdateHomestay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).UpdateHomestay(ctx, req.(*UpdateHomestayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_DeleteHomestay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHomestayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).DeleteHomestay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_DeleteHomestay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).DeleteHomestay(ctx, req.(*DeleteHomestayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_ListHomestays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomestaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).ListHomestays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_ListHomestays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).ListHomestays(ctx, req.(*ListHomestaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_UpdateAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).UpdateAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_UpdateAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).UpdateAvailability(ctx, req.(*UpdateAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_GetAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).GetAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_GetAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).GetAvailability(ctx, req.(*GetAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_AddAmenities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAmenitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).AddAmenities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_AddAmenities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).AddAmenities(ctx, req.(*AddAmenitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_RemoveAmenities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAmenitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).RemoveAmenities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_RemoveAmenities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).RemoveAmenities(ctx, req.(*RemoveAmenitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).GetProfile(ctx, req.(*GetProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_CreateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).CreateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_CreateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).CreateBooking(ctx, req.(*CreateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_GetBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).GetBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_GetBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).GetBooking(ctx, req.(*GetBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_UpdateBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).UpdateBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_UpdateBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).UpdateBooking(ctx, req.(*UpdateBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_CancelBooking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBookingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).CancelBooking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_CancelBooking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).CancelBooking(ctx, req.(*CancelBookingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_ListUserBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).ListUserBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_ListUserBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).ListUserBookings(ctx, req.(*ListUserBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_ListHomestayBookings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHomestayBookingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).ListHomestayBookings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_ListHomestayBookings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).ListHomestayBookings(ctx, req.(*ListHomestayBookingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_ListProvinces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProvincesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).ListProvinces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_ListProvinces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).ListProvinces(ctx, req.(*ListProvincesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_ListDistricts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDistrictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).ListDistricts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_ListDistricts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).ListDistricts(ctx, req.(*ListDistrictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_ListWards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).ListWards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_ListWards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).ListWards(ctx, req.(*ListWardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_ListAmenities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAmenitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).ListAmenities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_ListAmenities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).ListAmenities(ctx, req.(*ListAmenitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_CreateAmenity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAmenityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).CreateAmenity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_CreateAmenity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).CreateAmenity(ctx, req.(*CreateAmenityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_UpdateAmenity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAmenityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).UpdateAmenity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_UpdateAmenity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).UpdateAmenity(ctx, req.(*UpdateAmenityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HomestayService_DeleteAmenity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAmenityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HomestayServiceServer).DeleteAmenity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HomestayService_DeleteAmenity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HomestayServiceServer).DeleteAmenity(ctx, req.(*DeleteAmenityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HomestayService_ServiceDesc is the grpc.ServiceDesc for HomestayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HomestayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "homestay.HomestayService",
	HandlerType: (*HomestayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHomestay",
			Handler:    _HomestayService_CreateHomestay_Handler,
		},
		{
			MethodName: "GetHomestay",
			Handler:    _HomestayService_GetHomestay_Handler,
		},
		{
			MethodName: "UpdateHomestay",
			Handler:    _HomestayService_UpdateHomestay_Handler,
		},
		{
			MethodName: "DeleteHomestay",
			Handler:    _HomestayService_DeleteHomestay_Handler,
		},
		{
			MethodName: "ListHomestays",
			Handler:    _HomestayService_ListHomestays_Handler,
		},
		{
			MethodName: "UpdateAvailability",
			Handler:    _HomestayService_UpdateAvailability_Handler,
		},
		{
			MethodName: "GetAvailability",
			Handler:    _HomestayService_GetAvailability_Handler,
		},
		{
			MethodName: "AddAmenities",
			Handler:    _HomestayService_AddAmenities_Handler,
		},
		{
			MethodName: "RemoveAmenities",
			Handler:    _HomestayService_RemoveAmenities_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _HomestayService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _HomestayService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _HomestayService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _HomestayService_DeleteUser_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _HomestayService_GetProfile_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _HomestayService_UpdateProfile_Handler,
		},
		{
			MethodName: "CreateBooking",
			Handler:    _HomestayService_CreateBooking_Handler,
		},
		{
			MethodName: "GetBooking",
			Handler:    _HomestayService_GetBooking_Handler,
		},
		{
			MethodName: "UpdateBooking",
			Handler:    _HomestayService_UpdateBooking_Handler,
		},
		{
			MethodName: "CancelBooking",
			Handler:    _HomestayService_CancelBooking_Handler,
		},
		{
			MethodName: "ListUserBookings",
			Handler:    _HomestayService_ListUserBookings_Handler,
		},
		{
			MethodName: "ListHomestayBookings",
			Handler:    _HomestayService_ListHomestayBookings_Handler,
		},
		{
			MethodName: "ListProvinces",
			Handler:    _HomestayService_ListProvinces_Handler,
		},
		{
			MethodName: "ListDistricts",
			Handler:    _HomestayService_ListDistricts_Handler,
		},
		{
			MethodName: "ListWards",
			Handler:    _HomestayService_ListWards_Handler,
		},
		{
			MethodName: "ListAmenities",
			Handler:    _HomestayService_ListAmenities_Handler,
		},
		{
			MethodName: "CreateAmenity",
			Handler:    _HomestayService_CreateAmenity_Handler,
		},
		{
			MethodName: "UpdateAmenity",
			Handler:    _HomestayService_UpdateAmenity_Handler,
		},
		{
			MethodName: "DeleteAmenity",
			Handler:    _HomestayService_DeleteAmenity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rent_house_service/service.proto",
}
