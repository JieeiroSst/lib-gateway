// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: medical-service/service.proto

package medical_records

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MedicalRecordsService_CreatePatient_FullMethodName       = "/medical_records.MedicalRecordsService/CreatePatient"
	MedicalRecordsService_GetPatient_FullMethodName          = "/medical_records.MedicalRecordsService/GetPatient"
	MedicalRecordsService_UpdatePatient_FullMethodName       = "/medical_records.MedicalRecordsService/UpdatePatient"
	MedicalRecordsService_ListPatients_FullMethodName        = "/medical_records.MedicalRecordsService/ListPatients"
	MedicalRecordsService_CreateMedicalRecord_FullMethodName = "/medical_records.MedicalRecordsService/CreateMedicalRecord"
	MedicalRecordsService_GetMedicalRecord_FullMethodName    = "/medical_records.MedicalRecordsService/GetMedicalRecord"
	MedicalRecordsService_UpdateMedicalRecord_FullMethodName = "/medical_records.MedicalRecordsService/UpdateMedicalRecord"
	MedicalRecordsService_ListMedicalRecords_FullMethodName  = "/medical_records.MedicalRecordsService/ListMedicalRecords"
	MedicalRecordsService_RequestAccess_FullMethodName       = "/medical_records.MedicalRecordsService/RequestAccess"
	MedicalRecordsService_GetAccessLogs_FullMethodName       = "/medical_records.MedicalRecordsService/GetAccessLogs"
)

// MedicalRecordsServiceClient is the client API for MedicalRecordsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedicalRecordsServiceClient interface {
	CreatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*PatientResponse, error)
	GetPatient(ctx context.Context, in *PatientRequest, opts ...grpc.CallOption) (*PatientResponse, error)
	UpdatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*PatientResponse, error)
	ListPatients(ctx context.Context, in *PatientFilterRequest, opts ...grpc.CallOption) (*PatientListResponse, error)
	CreateMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*MedicalRecordResponse, error)
	GetMedicalRecord(ctx context.Context, in *MedicalRecordRequest, opts ...grpc.CallOption) (*MedicalRecordResponse, error)
	UpdateMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*MedicalRecordResponse, error)
	ListMedicalRecords(ctx context.Context, in *MedicalRecordFilterRequest, opts ...grpc.CallOption) (*MedicalRecordListResponse, error)
	RequestAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error)
	GetAccessLogs(ctx context.Context, in *AccessLogRequest, opts ...grpc.CallOption) (*AccessLogResponse, error)
}

type medicalRecordsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMedicalRecordsServiceClient(cc grpc.ClientConnInterface) MedicalRecordsServiceClient {
	return &medicalRecordsServiceClient{cc}
}

func (c *medicalRecordsServiceClient) CreatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*PatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatientResponse)
	err := c.cc.Invoke(ctx, MedicalRecordsService_CreatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordsServiceClient) GetPatient(ctx context.Context, in *PatientRequest, opts ...grpc.CallOption) (*PatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatientResponse)
	err := c.cc.Invoke(ctx, MedicalRecordsService_GetPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordsServiceClient) UpdatePatient(ctx context.Context, in *Patient, opts ...grpc.CallOption) (*PatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatientResponse)
	err := c.cc.Invoke(ctx, MedicalRecordsService_UpdatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordsServiceClient) ListPatients(ctx context.Context, in *PatientFilterRequest, opts ...grpc.CallOption) (*PatientListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PatientListResponse)
	err := c.cc.Invoke(ctx, MedicalRecordsService_ListPatients_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordsServiceClient) CreateMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*MedicalRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicalRecordResponse)
	err := c.cc.Invoke(ctx, MedicalRecordsService_CreateMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordsServiceClient) GetMedicalRecord(ctx context.Context, in *MedicalRecordRequest, opts ...grpc.CallOption) (*MedicalRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicalRecordResponse)
	err := c.cc.Invoke(ctx, MedicalRecordsService_GetMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordsServiceClient) UpdateMedicalRecord(ctx context.Context, in *MedicalRecord, opts ...grpc.CallOption) (*MedicalRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicalRecordResponse)
	err := c.cc.Invoke(ctx, MedicalRecordsService_UpdateMedicalRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordsServiceClient) ListMedicalRecords(ctx context.Context, in *MedicalRecordFilterRequest, opts ...grpc.CallOption) (*MedicalRecordListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedicalRecordListResponse)
	err := c.cc.Invoke(ctx, MedicalRecordsService_ListMedicalRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordsServiceClient) RequestAccess(ctx context.Context, in *AccessRequest, opts ...grpc.CallOption) (*AccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessResponse)
	err := c.cc.Invoke(ctx, MedicalRecordsService_RequestAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medicalRecordsServiceClient) GetAccessLogs(ctx context.Context, in *AccessLogRequest, opts ...grpc.CallOption) (*AccessLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AccessLogResponse)
	err := c.cc.Invoke(ctx, MedicalRecordsService_GetAccessLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedicalRecordsServiceServer is the server API for MedicalRecordsService service.
// All implementations must embed UnimplementedMedicalRecordsServiceServer
// for forward compatibility.
type MedicalRecordsServiceServer interface {
	CreatePatient(context.Context, *Patient) (*PatientResponse, error)
	GetPatient(context.Context, *PatientRequest) (*PatientResponse, error)
	UpdatePatient(context.Context, *Patient) (*PatientResponse, error)
	ListPatients(context.Context, *PatientFilterRequest) (*PatientListResponse, error)
	CreateMedicalRecord(context.Context, *MedicalRecord) (*MedicalRecordResponse, error)
	GetMedicalRecord(context.Context, *MedicalRecordRequest) (*MedicalRecordResponse, error)
	UpdateMedicalRecord(context.Context, *MedicalRecord) (*MedicalRecordResponse, error)
	ListMedicalRecords(context.Context, *MedicalRecordFilterRequest) (*MedicalRecordListResponse, error)
	RequestAccess(context.Context, *AccessRequest) (*AccessResponse, error)
	GetAccessLogs(context.Context, *AccessLogRequest) (*AccessLogResponse, error)
	mustEmbedUnimplementedMedicalRecordsServiceServer()
}

// UnimplementedMedicalRecordsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMedicalRecordsServiceServer struct{}

func (UnimplementedMedicalRecordsServiceServer) CreatePatient(context.Context, *Patient) (*PatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatient not implemented")
}
func (UnimplementedMedicalRecordsServiceServer) GetPatient(context.Context, *PatientRequest) (*PatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatient not implemented")
}
func (UnimplementedMedicalRecordsServiceServer) UpdatePatient(context.Context, *Patient) (*PatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatient not implemented")
}
func (UnimplementedMedicalRecordsServiceServer) ListPatients(context.Context, *PatientFilterRequest) (*PatientListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatients not implemented")
}
func (UnimplementedMedicalRecordsServiceServer) CreateMedicalRecord(context.Context, *MedicalRecord) (*MedicalRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicalRecord not implemented")
}
func (UnimplementedMedicalRecordsServiceServer) GetMedicalRecord(context.Context, *MedicalRecordRequest) (*MedicalRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicalRecord not implemented")
}
func (UnimplementedMedicalRecordsServiceServer) UpdateMedicalRecord(context.Context, *MedicalRecord) (*MedicalRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicalRecord not implemented")
}
func (UnimplementedMedicalRecordsServiceServer) ListMedicalRecords(context.Context, *MedicalRecordFilterRequest) (*MedicalRecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicalRecords not implemented")
}
func (UnimplementedMedicalRecordsServiceServer) RequestAccess(context.Context, *AccessRequest) (*AccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAccess not implemented")
}
func (UnimplementedMedicalRecordsServiceServer) GetAccessLogs(context.Context, *AccessLogRequest) (*AccessLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessLogs not implemented")
}
func (UnimplementedMedicalRecordsServiceServer) mustEmbedUnimplementedMedicalRecordsServiceServer() {}
func (UnimplementedMedicalRecordsServiceServer) testEmbeddedByValue()                               {}

// UnsafeMedicalRecordsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedicalRecordsServiceServer will
// result in compilation errors.
type UnsafeMedicalRecordsServiceServer interface {
	mustEmbedUnimplementedMedicalRecordsServiceServer()
}

func RegisterMedicalRecordsServiceServer(s grpc.ServiceRegistrar, srv MedicalRecordsServiceServer) {
	// If the following call pancis, it indicates UnimplementedMedicalRecordsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MedicalRecordsService_ServiceDesc, srv)
}

func _MedicalRecordsService_CreatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordsServiceServer).CreatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordsService_CreatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordsServiceServer).CreatePatient(ctx, req.(*Patient))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordsService_GetPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordsServiceServer).GetPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordsService_GetPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordsServiceServer).GetPatient(ctx, req.(*PatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordsService_UpdatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Patient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordsServiceServer).UpdatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordsService_UpdatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordsServiceServer).UpdatePatient(ctx, req.(*Patient))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordsService_ListPatients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatientFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordsServiceServer).ListPatients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordsService_ListPatients_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordsServiceServer).ListPatients(ctx, req.(*PatientFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordsService_CreateMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordsServiceServer).CreateMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordsService_CreateMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordsServiceServer).CreateMedicalRecord(ctx, req.(*MedicalRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordsService_GetMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordsServiceServer).GetMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordsService_GetMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordsServiceServer).GetMedicalRecord(ctx, req.(*MedicalRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordsService_UpdateMedicalRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordsServiceServer).UpdateMedicalRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordsService_UpdateMedicalRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordsServiceServer).UpdateMedicalRecord(ctx, req.(*MedicalRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordsService_ListMedicalRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicalRecordFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordsServiceServer).ListMedicalRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordsService_ListMedicalRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordsServiceServer).ListMedicalRecords(ctx, req.(*MedicalRecordFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordsService_RequestAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordsServiceServer).RequestAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordsService_RequestAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordsServiceServer).RequestAccess(ctx, req.(*AccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedicalRecordsService_GetAccessLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedicalRecordsServiceServer).GetAccessLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MedicalRecordsService_GetAccessLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedicalRecordsServiceServer).GetAccessLogs(ctx, req.(*AccessLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MedicalRecordsService_ServiceDesc is the grpc.ServiceDesc for MedicalRecordsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedicalRecordsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "medical_records.MedicalRecordsService",
	HandlerType: (*MedicalRecordsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePatient",
			Handler:    _MedicalRecordsService_CreatePatient_Handler,
		},
		{
			MethodName: "GetPatient",
			Handler:    _MedicalRecordsService_GetPatient_Handler,
		},
		{
			MethodName: "UpdatePatient",
			Handler:    _MedicalRecordsService_UpdatePatient_Handler,
		},
		{
			MethodName: "ListPatients",
			Handler:    _MedicalRecordsService_ListPatients_Handler,
		},
		{
			MethodName: "CreateMedicalRecord",
			Handler:    _MedicalRecordsService_CreateMedicalRecord_Handler,
		},
		{
			MethodName: "GetMedicalRecord",
			Handler:    _MedicalRecordsService_GetMedicalRecord_Handler,
		},
		{
			MethodName: "UpdateMedicalRecord",
			Handler:    _MedicalRecordsService_UpdateMedicalRecord_Handler,
		},
		{
			MethodName: "ListMedicalRecords",
			Handler:    _MedicalRecordsService_ListMedicalRecords_Handler,
		},
		{
			MethodName: "RequestAccess",
			Handler:    _MedicalRecordsService_RequestAccess_Handler,
		},
		{
			MethodName: "GetAccessLogs",
			Handler:    _MedicalRecordsService_GetAccessLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medical-service/service.proto",
}
