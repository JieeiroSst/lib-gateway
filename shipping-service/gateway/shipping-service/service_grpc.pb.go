// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: shipping-service/service.proto

package pd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ShippingService_CreateShipment_FullMethodName       = "/shipping.ShippingService/CreateShipment"
	ShippingService_GetShipment_FullMethodName          = "/shipping.ShippingService/GetShipment"
	ShippingService_UpdateShipmentStatus_FullMethodName = "/shipping.ShippingService/UpdateShipmentStatus"
	ShippingService_ListShipments_FullMethodName        = "/shipping.ShippingService/ListShipments"
	ShippingService_TrackShipment_FullMethodName        = "/shipping.ShippingService/TrackShipment"
	ShippingService_CreateSender_FullMethodName         = "/shipping.ShippingService/CreateSender"
	ShippingService_GetSender_FullMethodName            = "/shipping.ShippingService/GetSender"
	ShippingService_UpdateSender_FullMethodName         = "/shipping.ShippingService/UpdateSender"
	ShippingService_CreateRecipient_FullMethodName      = "/shipping.ShippingService/CreateRecipient"
	ShippingService_GetRecipient_FullMethodName         = "/shipping.ShippingService/GetRecipient"
	ShippingService_UpdateRecipient_FullMethodName      = "/shipping.ShippingService/UpdateRecipient"
)

// ShippingServiceClient is the client API for ShippingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShippingServiceClient interface {
	CreateShipment(ctx context.Context, in *CreateShipmentRequest, opts ...grpc.CallOption) (*ShipmentResponse, error)
	GetShipment(ctx context.Context, in *GetShipmentRequest, opts ...grpc.CallOption) (*ShipmentResponse, error)
	UpdateShipmentStatus(ctx context.Context, in *UpdateShipmentStatusRequest, opts ...grpc.CallOption) (*ShipmentResponse, error)
	ListShipments(ctx context.Context, in *ListShipmentsRequest, opts ...grpc.CallOption) (*ListShipmentsResponse, error)
	TrackShipment(ctx context.Context, in *TrackShipmentRequest, opts ...grpc.CallOption) (*TrackingResponse, error)
	CreateSender(ctx context.Context, in *CreateSenderRequest, opts ...grpc.CallOption) (*SenderResponse, error)
	GetSender(ctx context.Context, in *GetSenderRequest, opts ...grpc.CallOption) (*SenderResponse, error)
	UpdateSender(ctx context.Context, in *UpdateSenderRequest, opts ...grpc.CallOption) (*SenderResponse, error)
	CreateRecipient(ctx context.Context, in *CreateRecipientRequest, opts ...grpc.CallOption) (*RecipientResponse, error)
	GetRecipient(ctx context.Context, in *GetRecipientRequest, opts ...grpc.CallOption) (*RecipientResponse, error)
	UpdateRecipient(ctx context.Context, in *UpdateRecipientRequest, opts ...grpc.CallOption) (*RecipientResponse, error)
}

type shippingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShippingServiceClient(cc grpc.ClientConnInterface) ShippingServiceClient {
	return &shippingServiceClient{cc}
}

func (c *shippingServiceClient) CreateShipment(ctx context.Context, in *CreateShipmentRequest, opts ...grpc.CallOption) (*ShipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShipmentResponse)
	err := c.cc.Invoke(ctx, ShippingService_CreateShipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) GetShipment(ctx context.Context, in *GetShipmentRequest, opts ...grpc.CallOption) (*ShipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShipmentResponse)
	err := c.cc.Invoke(ctx, ShippingService_GetShipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) UpdateShipmentStatus(ctx context.Context, in *UpdateShipmentStatusRequest, opts ...grpc.CallOption) (*ShipmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShipmentResponse)
	err := c.cc.Invoke(ctx, ShippingService_UpdateShipmentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) ListShipments(ctx context.Context, in *ListShipmentsRequest, opts ...grpc.CallOption) (*ListShipmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListShipmentsResponse)
	err := c.cc.Invoke(ctx, ShippingService_ListShipments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) TrackShipment(ctx context.Context, in *TrackShipmentRequest, opts ...grpc.CallOption) (*TrackingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrackingResponse)
	err := c.cc.Invoke(ctx, ShippingService_TrackShipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) CreateSender(ctx context.Context, in *CreateSenderRequest, opts ...grpc.CallOption) (*SenderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SenderResponse)
	err := c.cc.Invoke(ctx, ShippingService_CreateSender_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) GetSender(ctx context.Context, in *GetSenderRequest, opts ...grpc.CallOption) (*SenderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SenderResponse)
	err := c.cc.Invoke(ctx, ShippingService_GetSender_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) UpdateSender(ctx context.Context, in *UpdateSenderRequest, opts ...grpc.CallOption) (*SenderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SenderResponse)
	err := c.cc.Invoke(ctx, ShippingService_UpdateSender_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) CreateRecipient(ctx context.Context, in *CreateRecipientRequest, opts ...grpc.CallOption) (*RecipientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipientResponse)
	err := c.cc.Invoke(ctx, ShippingService_CreateRecipient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) GetRecipient(ctx context.Context, in *GetRecipientRequest, opts ...grpc.CallOption) (*RecipientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipientResponse)
	err := c.cc.Invoke(ctx, ShippingService_GetRecipient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shippingServiceClient) UpdateRecipient(ctx context.Context, in *UpdateRecipientRequest, opts ...grpc.CallOption) (*RecipientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecipientResponse)
	err := c.cc.Invoke(ctx, ShippingService_UpdateRecipient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShippingServiceServer is the server API for ShippingService service.
// All implementations must embed UnimplementedShippingServiceServer
// for forward compatibility.
type ShippingServiceServer interface {
	CreateShipment(context.Context, *CreateShipmentRequest) (*ShipmentResponse, error)
	GetShipment(context.Context, *GetShipmentRequest) (*ShipmentResponse, error)
	UpdateShipmentStatus(context.Context, *UpdateShipmentStatusRequest) (*ShipmentResponse, error)
	ListShipments(context.Context, *ListShipmentsRequest) (*ListShipmentsResponse, error)
	TrackShipment(context.Context, *TrackShipmentRequest) (*TrackingResponse, error)
	CreateSender(context.Context, *CreateSenderRequest) (*SenderResponse, error)
	GetSender(context.Context, *GetSenderRequest) (*SenderResponse, error)
	UpdateSender(context.Context, *UpdateSenderRequest) (*SenderResponse, error)
	CreateRecipient(context.Context, *CreateRecipientRequest) (*RecipientResponse, error)
	GetRecipient(context.Context, *GetRecipientRequest) (*RecipientResponse, error)
	UpdateRecipient(context.Context, *UpdateRecipientRequest) (*RecipientResponse, error)
	mustEmbedUnimplementedShippingServiceServer()
}

// UnimplementedShippingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedShippingServiceServer struct{}

func (UnimplementedShippingServiceServer) CreateShipment(context.Context, *CreateShipmentRequest) (*ShipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipment not implemented")
}
func (UnimplementedShippingServiceServer) GetShipment(context.Context, *GetShipmentRequest) (*ShipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipment not implemented")
}
func (UnimplementedShippingServiceServer) UpdateShipmentStatus(context.Context, *UpdateShipmentStatusRequest) (*ShipmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShipmentStatus not implemented")
}
func (UnimplementedShippingServiceServer) ListShipments(context.Context, *ListShipmentsRequest) (*ListShipmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipments not implemented")
}
func (UnimplementedShippingServiceServer) TrackShipment(context.Context, *TrackShipmentRequest) (*TrackingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrackShipment not implemented")
}
func (UnimplementedShippingServiceServer) CreateSender(context.Context, *CreateSenderRequest) (*SenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSender not implemented")
}
func (UnimplementedShippingServiceServer) GetSender(context.Context, *GetSenderRequest) (*SenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSender not implemented")
}
func (UnimplementedShippingServiceServer) UpdateSender(context.Context, *UpdateSenderRequest) (*SenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSender not implemented")
}
func (UnimplementedShippingServiceServer) CreateRecipient(context.Context, *CreateRecipientRequest) (*RecipientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecipient not implemented")
}
func (UnimplementedShippingServiceServer) GetRecipient(context.Context, *GetRecipientRequest) (*RecipientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipient not implemented")
}
func (UnimplementedShippingServiceServer) UpdateRecipient(context.Context, *UpdateRecipientRequest) (*RecipientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecipient not implemented")
}
func (UnimplementedShippingServiceServer) mustEmbedUnimplementedShippingServiceServer() {}
func (UnimplementedShippingServiceServer) testEmbeddedByValue()                         {}

// UnsafeShippingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShippingServiceServer will
// result in compilation errors.
type UnsafeShippingServiceServer interface {
	mustEmbedUnimplementedShippingServiceServer()
}

func RegisterShippingServiceServer(s grpc.ServiceRegistrar, srv ShippingServiceServer) {
	// If the following call pancis, it indicates UnimplementedShippingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ShippingService_ServiceDesc, srv)
}

func _ShippingService_CreateShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).CreateShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_CreateShipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).CreateShipment(ctx, req.(*CreateShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_GetShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).GetShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_GetShipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).GetShipment(ctx, req.(*GetShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_UpdateShipmentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShipmentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).UpdateShipmentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_UpdateShipmentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).UpdateShipmentStatus(ctx, req.(*UpdateShipmentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_ListShipments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).ListShipments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_ListShipments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).ListShipments(ctx, req.(*ListShipmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_TrackShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrackShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).TrackShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_TrackShipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).TrackShipment(ctx, req.(*TrackShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_CreateSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).CreateSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_CreateSender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).CreateSender(ctx, req.(*CreateSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_GetSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).GetSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_GetSender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).GetSender(ctx, req.(*GetSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_UpdateSender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).UpdateSender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_UpdateSender_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).UpdateSender(ctx, req.(*UpdateSenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_CreateRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).CreateRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_CreateRecipient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).CreateRecipient(ctx, req.(*CreateRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_GetRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).GetRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_GetRecipient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).GetRecipient(ctx, req.(*GetRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShippingService_UpdateRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecipientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShippingServiceServer).UpdateRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShippingService_UpdateRecipient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShippingServiceServer).UpdateRecipient(ctx, req.(*UpdateRecipientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShippingService_ServiceDesc is the grpc.ServiceDesc for ShippingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShippingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shipping.ShippingService",
	HandlerType: (*ShippingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShipment",
			Handler:    _ShippingService_CreateShipment_Handler,
		},
		{
			MethodName: "GetShipment",
			Handler:    _ShippingService_GetShipment_Handler,
		},
		{
			MethodName: "UpdateShipmentStatus",
			Handler:    _ShippingService_UpdateShipmentStatus_Handler,
		},
		{
			MethodName: "ListShipments",
			Handler:    _ShippingService_ListShipments_Handler,
		},
		{
			MethodName: "TrackShipment",
			Handler:    _ShippingService_TrackShipment_Handler,
		},
		{
			MethodName: "CreateSender",
			Handler:    _ShippingService_CreateSender_Handler,
		},
		{
			MethodName: "GetSender",
			Handler:    _ShippingService_GetSender_Handler,
		},
		{
			MethodName: "UpdateSender",
			Handler:    _ShippingService_UpdateSender_Handler,
		},
		{
			MethodName: "CreateRecipient",
			Handler:    _ShippingService_CreateRecipient_Handler,
		},
		{
			MethodName: "GetRecipient",
			Handler:    _ShippingService_GetRecipient_Handler,
		},
		{
			MethodName: "UpdateRecipient",
			Handler:    _ShippingService_UpdateRecipient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shipping-service/service.proto",
}
